<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Herbdocs – DB</title><link>/categories/DB/</link><description>Recent content in DB on Herbdocs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/categories/DB/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 分布式数据库理论概述</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/</guid><description>
&lt;h1 id="简介">简介&lt;/h1>
&lt;h2 id="对比单体数据库">对比单体数据库&lt;/h2>
&lt;p>这里主要针对关系型数据，像 MongoDB 这样的 NoSQL 产品不是这里的重点。&lt;/p>
&lt;p>传统的单体数据需要做好 查询、事务、存储、复制和其它 等五个方面，分布式数据库在单体数据库的基础上还需要增加对 分片 的处理。并且难点重点在 查询、事务、复制和分片 这四个方面。&lt;/p>
&lt;p>单体数据库：&lt;/p>
&lt;ul>
&lt;li>查询&lt;/li>
&lt;li>事务&lt;/li>
&lt;li>存储&lt;/li>
&lt;li>复制&lt;/li>
&lt;li>其它&lt;/li>
&lt;/ul>
&lt;p>分布式数据库：&lt;/p>
&lt;ul>
&lt;li>查询
&lt;ul>
&lt;li>计算下推&lt;/li>
&lt;li>多表关联&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>事务
&lt;ul>
&lt;li>隔离性&lt;/li>
&lt;li>原子性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>分片
&lt;ul>
&lt;li>分片元数据存储&lt;/li>
&lt;li>合并拆分&lt;/li>
&lt;li>调度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>存储
&lt;ul>
&lt;li>写入效率&lt;/li>
&lt;li>读取效率&lt;/li>
&lt;li>存储成本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>复制
&lt;ul>
&lt;li>主从复制&lt;/li>
&lt;li>Quorum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>其它
&lt;ul>
&lt;li>客户端接入&lt;/li>
&lt;li>权限管理&lt;/li>
&lt;li>元数据存储&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="定义">定义&lt;/h2>
&lt;h3 id="外部视角">外部视角&lt;/h3>
&lt;p>业务应用系统可以按照交易类型分为联机交易（OLTP）场景和联机分析（OLAP）场景两大类。OLTP 是面向交易的处理过程，单笔交易的数据量小，但要在短时间内响应，典型场景包括电商、转账等；而 OLAP 场景通常是基于大数据集的运算，典型场景包括生成年度账单和财务报表等。&lt;/p>
&lt;p>从外部视角可以有如下定义：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>OLTP 关系型数据库
写多读少；低延迟；高并发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>海量并发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>高可靠&lt;/p>
&lt;/li>
&lt;li>
&lt;p>海量存储
所以从外部视角最终定义可以是：分布式数据库是服务于写多读少、低延时、海量并发 OLTP 场景的，具备海量数据存储能力和高可靠性的关系型数据库。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="内部视角">内部视角&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>客户端组件 + 单体数据库
典型的客户端组件就是 Sharding-JDBC。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代理中间件 + 单体数据库
典型的就是中间件产品就是 MyCat。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单元化架构 + 单体数据库
单元化架构对业务应用系统需要彻底重构，应用系统被拆分成若干实例，配置独立的单体数据库，让每个实例管理一定范围的数据。当出现跨实例事务时通过分布式事务组件保证，不同的分布式事务模型，应用系统都需要配合改造。该方案改造量最大，实施难度最高。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>总结：&lt;/p>
&lt;p>传统的单体数据库仍然能够被应用系统感知到。而分布式数据库对外单体数据库是透明的，将技术细节收敛到产品内部，以一个整体面对业务应用。&lt;/p>
&lt;h1 id="一致性">一致性&lt;/h1>
&lt;p>分布式数据库的一致性，一般是指数据一致性和事务一致性两个方面。&lt;/p>
&lt;h2 id="数据一致性">数据一致性&lt;/h2>
&lt;p>数据一致性可分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>状态一致性（State Consistency）
数据所处的客观、实际状态所体现的一致性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>操作一致性（Operation Consistency）
外部用户通过协议约定的操作，能够读取到的数据一致性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="状态一致性">状态一致性&lt;/h3>
&lt;h4 id="强一致性">强一致性&lt;/h4>
&lt;p>如 MySQL 全同步复制。&lt;/p>
&lt;p>问题：&lt;/p>
&lt;ul>
&lt;li>性能差：主库必须等多个从库均返回成功后，才向客户端返回成功。主库的响应时间取决于多个从库中延时最长的那个。&lt;/li>
&lt;li>可用性问题：全同步复制模式下，多个节点被串联，如果单机可用性 99%，那么集群可用性为 99%*99%*99%，比单机更低。&lt;/li>
&lt;/ul>
&lt;h4 id="弱一致性">弱一致性&lt;/h4>
&lt;p>如 NoSQL 最终一致性。也就是 BASE 理论中的 E 代表的最终一致性（Eventually Consistency）。&lt;/p>
&lt;p>最终一致性可以理解为：主副本执行写操作成功后直接响应客户端，不要求其他副本与主副本实时保持一致，经过一段时间，其它副本会逐渐追赶上主副本。&lt;/p>
&lt;h3 id="操作一致性">操作一致性&lt;/h3>
&lt;h3 id="读写一致性">读写一致性&lt;/h3>
&lt;p>写后读一致性（Read after Write Consistency），它也称为 读写一致性 或 读自己写一致性（Read My Writes Consistency）。表示自己写入的数据，下一刻一定能够读取。&lt;/p>
&lt;h4 id="单调读一致性">单调读一致性&lt;/h4>
&lt;p>之前能读到，刷新了之后依然能够读到。避免出现上一刻读副本A，下一刻读副本B，导致前后数据不一致。避免这种问题就需要实现 单调读一致性。&lt;/p>
&lt;h4 id="前缀一致性">前缀一致性&lt;/h4>
&lt;p>保持因果关系的一致性，被称为前缀读或前缀一致性（Consistent Prefix）。举例出现时间上的扭曲：评论A在评论B之前，避免出现时间上的乱序。&lt;/p>
&lt;h4 id="线性一致性">线性一致性&lt;/h4>
&lt;p>分布式数据库无法要求应用系统每次变更操作都附带显式声明，如变更是因为读取哪些数据导致。更可靠的方式是将自然语义的因果关系转变为事件发生的先后顺序。&lt;/p>
&lt;p>线性一致性（Linearizability）就是建立在事件的先后顺序之上。整个系统的所有操作被记录在一条时间线下且被原子化，表现得就像只有一个副本。&lt;/p>
&lt;p>因为各个节点都是各自的时间线，所以做到全局线性一致性需要一个&lt;strong>全局时钟&lt;/strong>。主流数据大多以实现线性一致性为目标，在设计之初就引入了全局时钟（如 Spanner、TiDB、OceanBase、GoldenDB 和巨杉），多数采用单点授时（TSO）。&lt;/p>
&lt;p>对于线性一致性，当然也有一些争议，反对者认为没有绝对时间，时间都是相对的，自然不存在全序的事件顺序，不同的观察者对于事件的发生顺序无法达成一致（相对论）。&lt;/p>
&lt;h4 id="因果一致性">因果一致性&lt;/h4>
&lt;p>线性一致性存在争议，那可以不依赖绝对时间。&lt;/p>
&lt;p>因果一致性的基础是偏序关系，即部分事件顺序可以比较。如一个节点内的事件可以排序，仅依靠节点的本地时钟，如果节点发生通讯，则按照接收方事件晚于调用方事件来处理。&lt;/p>
&lt;p>基于这种偏序关系，Leslie Lamport 在论文“Time, Clocks, and the Ordering of Events in a Distributed System”中提出了&lt;strong>逻辑时钟&lt;/strong>的概念。&lt;/p>
&lt;p>借助逻辑时钟也可以建立全序关系，只不过这个全序关系不够精确，如两个事件没有相关性，逻辑时钟给出的大小就没有意义。&lt;/p>
&lt;p>因果一致性弱于线性一致性，但在并发性能上具有优势，也足以处理多数的异常现象，所以因果一致性也在工业界得到了应用。CockroachDB 和 YugabyteDB 都在设计中采用了逻辑混合时钟（Hybrid Logical Clocks）。&lt;/p>
&lt;h2 id="事务一致性">事务一致性&lt;/h2>
&lt;p>（事务一致性在 MySQL 章节已详细介绍，这里简单介绍）&lt;/p>
&lt;p>事务的 ACID 四大特性，将广义上的事务一致性具化到了：&lt;/p>
&lt;ul>
&lt;li>原子性：事务中的所有变更要么全部发生，要么一个也不发生。&lt;/li>
&lt;li>一致性：事务要保持数据的完整性。&lt;/li>
&lt;li>隔离性：多事务并行执行所得到的结果，与串行执行（一个接一个）完全相同。&lt;/li>
&lt;li>持久性：一旦事务提交，它对数据的改变将被永久保留，不应受到任何系统故障的影响。&lt;/li>
&lt;/ul>
&lt;h3 id="隔离性">隔离性&lt;/h3>
&lt;p>隔离级别：&lt;/p>
&lt;ul>
&lt;li>未提交读（RU）&lt;/li>
&lt;li>以提交读（RC）&lt;/li>
&lt;li>可重复读（RR）&lt;/li>
&lt;li>可串行化（Serializable）
隔离性是事务的核心。降低隔离级别就是在正确性上做妥协，将一些异常现象交给业务去处理，从而获得更好的性能。除 串行化 以外的隔离级别，都有无法处理的异常现象。&lt;/li>
&lt;/ul>
&lt;h1 id="原子性">原子性&lt;/h1>
&lt;h2 id="事务原子性">事务原子性&lt;/h2>
&lt;p>原子性要求事务只有两种状态：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>成功，所有操作全部成功；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>失败，任何操作都没有被执行，即使过程中执行了部分操作，也要保证回滚这些操作。
原子性提交协议有不少，按照其作用范围可以分为面向应用层和面向资源层。下面介绍两种协议：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>面向应用层的 TCC&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库领域常用的 2PC&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tcc">TCC&lt;/h2>
&lt;p>TCC 是 Try、Confirm 和 Cancel 三个单词的缩写，是事务过程中的三个操作。&lt;/p>
&lt;h2 id="2pc">2PC&lt;/h2>
&lt;p>两阶段提交协议（Two-Phase Commit，2PC），这也是面向资源层的典型协议。&lt;/p>
&lt;p>2PC 的首次正式提出是在 Jim Gray 1977 年发表的一份文稿中，文稿的题目是“&lt;a href="https://cs.nyu.edu/courses/fall18/CSCI-GA.3033-002/papers/Gray1978.pdf">Notes on Data Base Operating Systems&lt;/a>”，对当时数据库系统研究成果和实践进行了总结，而 2PC 在工程中的应用还要再早上几年。&lt;/p>
&lt;p>2PC 的处理过程也分为准备和提交两个阶段，每个阶段都由事务管理器与资源管理器共同完成。其中，事务管理器作为事务的协调者只有一个，而资源管理器作为参与者执行具体操作允许有多个。&lt;/p>
&lt;h3 id="问题">问题&lt;/h3>
&lt;p>相比于 TCC，2PC 的优点是借助了数据库的提交和回滚操作，不侵入业务逻辑。但是，它也存在一些明显的问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同步阻塞
执行过程中，数据库要锁定对应的数据行。如果其他事务刚好也要操作这些数据行，那就只能等待。其实同步阻塞只是设计方式，真正的问题在于这种设计会导致分布式事务出现高延迟和性能的显著下降。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单点故障
事务管理器非常重要，一旦发生故障，数据库会一直阻塞下去。尤其是在第二阶段发生故障的话，所有数据库还都处于锁定事务资源的状态中，从而无法继续完成事务操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据不一致
在第二阶段，当事务管理器向参与者发送 Commit 请求之后，发生了局部网络异常，导致只有部分数据库接收到请求，但是其他数据库未接到请求所以无法提交事务，整个系统就会出现数据不一致性的现象。比如转账余额已经能够扣减，但另一方余额没有增加，就不符合原子性的要求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="两个2pc改进模型">两个2PC改进模型&lt;/h2>
&lt;h3 id="newsql阵营-percolator">NewSQL阵营：Percolator&lt;/h3>
&lt;p>Percolator 来自 Google 的论文“&lt;a href="https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf">Large-scale Incremental Processing Using Distributed Transactions and Notifications&lt;/a>”，因为它是基于分布式存储系统 BigTable 建立的模型，所以可以和 NewSQL 无缝链接。&lt;/p>
&lt;p>Percolator 模型同时涉及了隔离性和原子性的处理，本节仅介绍原子性的部分。&lt;/p>
&lt;p>改进：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数据不一致
2PC 的一致性问题主要缘自第二阶段，不能确保事务管理器与多个参与者的通讯始终正常。但在 Percolator 的第二阶段，事务管理器只需要与一个分片通讯，这个 Commit 操作本身就是原子的。所以，事务的状态自然也是原子的，一致性问题被完美解决了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单点故障
Percolator 通过日志和异步线程的方式弱化了该问题。&lt;/p>
&lt;ul>
&lt;li>Percolator 引入的异步线程可以在事务管理器宕机后，回滚各个分片上的事务，提供了善后手段，不会让分片上被占用的资源无法释放。&lt;/li>
&lt;li>事务管理器可以用记录日志的方式使自身无状态化，日志通过共识算法同时保存在系统的多个节点上。事务管理器宕机后，可以在其他节点启动新的事务管理器，基于日志恢复事务操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="proxy阵营-goldendb一阶段提交">Proxy阵营：GoldenDB一阶段提交&lt;/h3>
&lt;p>GoldenDB 展现了另外一种改良思路，称之为“一阶段提交”。GoldenDB 遵循 Proxy 架构，包含了四种角色：协调节点、数据节点、全局事务器和管理节点，其中协调节点和数据节点均有多个。GoldenDB 的数据节点由 MySQL 担任，后者是独立的单体数据库。&lt;/p>
&lt;p>&lt;img src="" alt="图片">&lt;/p>
&lt;p>虽然叫做“一阶段提交”，但流程仍可以分为两个阶段：&lt;/p>
&lt;p>第一阶段，GoldenDB 的协调节点接到事务后，在全局事务管理器（GTM）的全局事务列表中将事务标记成活跃的状态。这个标记过程是 GoldenDB 的主要改进点，实质是通过全局事务列表来申请资源，规避可能存在的事务竞争。&lt;/p>
&lt;blockquote>
&lt;p>好处是避免了与所有参与者的通讯，也减少了很多无效的资源锁定动作。&lt;/p>
&lt;/blockquote>
&lt;p>第二阶段，协调节点把一个全局事务分拆成若干子事务，分配给对应的 MySQL 去执行。如果所有操作成功，协调者节点会将全局事务列表中的事务标记为结束，整个事务处理完成。如果失败，子事务在单机上自动回滚，而后反馈给协调者节点，后者向所有数据节点下发回滚指令。&lt;/p>
&lt;p>本质上是改变了资源的申请方式，更准确的说法是，并发控制手段从锁调度变为时间戳排序（Timestamp Ordering）。在正常情况下协调节点与数据节点只通讯一次，降低了网络不确定性的影响，数据库的整体性能有明显提升。因为第一阶段不涉及数据节点的操作，也就弱化了数据一致性和单点故障的问题。&lt;/p>
&lt;h2 id="事务延迟">事务延迟&lt;/h2>
&lt;p>优化方法如下&lt;/p>
&lt;h3 id="缓存写提交">缓存写提交&lt;/h3>
&lt;p>第一个办法是将所有写操作缓存起来，直到 commit 语句时一起执行，这种方式称为 Buffering Writes until Commit，这里称为“缓存写提交”。&lt;/p>
&lt;h3 id="管道">管道&lt;/h3>
&lt;p>Pipe 既能缩短延迟，又能保持交互事务。CockroachDB 就是采用这种方式，具体过程就是在准备阶段是按照顺序将 SQL 转换为 K/V 操作并执行，但是并不等待返回结果，直接执行下一个 K/V 操作。&lt;/p>
&lt;h3 id="并行提交">并行提交&lt;/h3>
&lt;p>（Parallel Commits）&lt;/p>
&lt;p>在执行意向写的同时，写入事务标志，这时不能确定事务是否提交成功，要引入一个新的状态“Staging”，表示事务正在进行。&lt;/p>
&lt;p>客户端得到所有意向写的成功反馈后，可以直接返回调用方事务提交成功。注意：这个地方是关键，客户端只在当前进程内判断事务提交成功后，不维护事务状态，而直接返回调用方；事后由异步线程根据事务表中的线索，再次确认事务的状态，并落盘维护状态记录。这样事务操作中就减少了一轮共识算法开销。&lt;/p>
&lt;h1 id="隔离性-1">隔离性&lt;/h1>
&lt;p>多版本并发控制（Multi-Version Concurrency Control，MVCC）就是通过记录数据项历史版本的方式，来提升系统应对多事务访问的并发处理能力。&lt;/p>
&lt;h2 id="单体数据库的mvcc">单体数据库的MVCC&lt;/h2>
&lt;h3 id="mvcc存储方式">MVCC存储方式&lt;/h3>
&lt;p>MVCC 有三类存储方式，一类是将历史版本直接存在数据表中的，称为 Append-Only，典型代表是 PostgreSQL。另外两类都是在独立的表空间存储历史版本，它们区别在于存储的方式是全量还是增量。增量存储就是只存储与版本间变更的部分，这种方式称为 Delta，也就是数学中常作为增量符号的那个 Delta，典型代表是 MySQL 和 Oracle。全量存储则是将每个版本的数据全部存储下来，这种方式称为 Time-Travle，典型代表是 HANA。&lt;/p>
&lt;h4 id="append-only方式">Append-Only方式&lt;/h4>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在事务包含大量更新操作时也能保持较高效率。因为更新操作被转换为 Delete + Insert，数据并未被迁移，只是有当前版本被标记为历史版本，磁盘操作的开销较小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以追溯更多的历史版本，不必担心回滚段被用完。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因为执行更新操作时，历史版本仍然留在数据表中，所以如果出现问题，事务能够快速完成回滚操作。
缺点：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新老数据放在一起，会增加磁盘寻址的开销，随着历史版本增多，会导致查询速度变慢。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="delta方式">Delta方式&lt;/h4>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>因为历史版本独立存储，所以不会影响当前读的执行效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>因为存储的只是变化的增量部分，所以占用存储空间较小。
缺点：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>历史版本存储在回滚段中，而回滚段由所有事务共享，并且还是循环使用的。如果一个事务执行持续的时间较长，历史版本可能会被其他数据覆盖，无法查询。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这个模式下读取的历史版本，实际上是基于当前版本和多个增量版本计算追溯回来的，那么计算开销自然就比较大。
Oracle 早期版本中经常会出现的 ORA-01555 “快照过旧”（Snapshot Too Old），就是回滚段中的历史版本被覆盖造成的。一般设置更大的回滚段和缩短事务执行时间可以解决这个问题。随着 Oracle 后续版本采用自动管理回滚段的设计该问题也得到缓解。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="time-travel方式">Time-Travel方式&lt;/h4>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>将历史版本独立存储，不会影响当前读的执行效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相对 Delta 方式，历史版本是全量独立存储的，直接访问即可，计算开销小。
缺点：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相对 Delta 方式，需要占用更大的存储空间。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mvcc工作过程">MVCC工作过程&lt;/h2>
&lt;p>最低可接受的隔离级别就是“已提交读”（Read Committed，RC）。RC隔离级别下 MVCC 的工作过程：&lt;/p>
&lt;ol>
&lt;li>当前事务的更新所产生的数据。&lt;/li>
&lt;li>当前事务启动前，已经提交事务更新的数据。&lt;/li>
&lt;/ol>
&lt;h3 id="快照工作原理">快照工作原理&lt;/h3>
&lt;p>快照是基于 MVCC 实现的一个重要功能，用“快照”来实现 RR 是很方便的。&lt;/p>
&lt;p>RC 与 RR 的区别在于 RC 下每个 SQL 语句会有一个自己的快照，所以看到的数据库是不同的，而 RR 下，所有 SQL 语句使用同一个快照，所以会看到同样的数据库。&lt;/p>
&lt;p>为了提升效率，快照不是单纯的事务 ID 列表，它会统计最小活动事务 ID 和最大已提交事务 ID。因此多数事务 ID 通过比较边界值就能被快速排除掉，如果事务 ID 恰好在边界范围内，再进一步查找是否与活跃事务 ID 匹配。&lt;/p>
&lt;p>快照在 MySQL 中称为 ReadView，在 PostgreSQL 中称为 SnapshotData，组织方式都是类似的。&lt;/p>
&lt;h3 id="proxy读写冲突处理">Proxy读写冲突处理&lt;/h3>
&lt;p>Proxy 架构实现 RR 时遇到的两个挑战，也就是实现快照的两个挑战：&lt;/p>
&lt;ul>
&lt;li>如何保证产生单调递增事务 ID。每个数据节点自行处理显然不行，这就需要由一个集中点来统一生成。&lt;/li>
&lt;li>如何提供全局快照。每个事务要把自己的状态发送给一个集中点，由它维护一个全局事务列表，并向所有事务提供快照。
Proxy 架构的分布式数据库都有一个集中点，通常称为全局事务管理器（GTM）。又因为事务 ID 是单调递增的，用来衡量事务发生的先后顺序，和时间戳作用相近，所以全局事务管理器也被称为“全局时钟”。&lt;/li>
&lt;/ul>
&lt;h3 id="newsql读写冲突处理">NewSQL读写冲突处理&lt;/h3>
&lt;p>没有普遍采用快照解决读写冲突问题，其中 TiDB 是由于权衡全局事务列表的代价，CockroachDB 则是因为要实现更高的隔离级别。无论哪种原因都造成了读写并行能力的下降。&lt;/p>
&lt;h2 id="隐式读写冲突">隐式读写冲突&lt;/h2>
&lt;h3 id="不确定时间窗口">不确定时间窗口&lt;/h3>
&lt;p>当两个时间窗口时重叠时，无法判断时间先后关系。只有通过避免时间窗口出现重叠来解决，而避免重叠只能是等待（waiting out the uncertainty”，用等待来消除不确定性）。&lt;/p>
&lt;h3 id="写等待-spanner">写等待：Spanner&lt;/h3>
&lt;p>Spanner 选择了写等待方式，更准确地说是用提交等待（commit-wait）来消除不确定性。&lt;/p>
&lt;p>Spanner 是直接将时间误差暴露出来的，所以调用当前时间函数 TT.now() 时，会获得的是一个区间对象 TTinterval。它的两个边界值 earliest 和 latest 分别代表了最早可能时间和最晚可能时间，而绝对时间就在这两者之间。另外，Spanner 还提供了 TT.before() 和 TT.after() 作为辅助函数，其中 TT.after() 用于判断当前时间是否晚于指定时间。&lt;/p>
&lt;h3 id="理论等待时间">理论等待时间&lt;/h3>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_1.png" alt="20230202_distributed_database_1.png">&lt;/p>
&lt;p>写等待的处理方式是：&lt;/p>
&lt;p>事务 Ta 在获得“提交时间戳”S 后，再等待ɛ时间后才写盘并提交事务。真正的提交时间是晚于“提交时间戳”的，中间这段时间就是等待。这样 Tb 事务启动后，能够得到的最早时间 TT2.earliet 肯定不会早于 S 时刻，所以 Tb 就一定能够读取到 Ta。这样就符合线性一致性的要求了。&lt;/p>
&lt;p>事务获得“提交时间戳”后必须等待ɛ时间才能写入磁盘，即 commit-wait。&lt;/p>
&lt;h3 id="实际等待时间">实际等待时间&lt;/h3>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_2.png" alt="20230202_distributed_database_2.png">&lt;/p>
&lt;p>针对同一个数据项，事务 T8 和 T9 分别对进行写入和读取操作。T8 在绝对时间 100ms 的时候，调用 TT.now() 函数，得到一个时间区间[99,103]，选择最大值 103 作为提交时间戳，而后等待 8 毫秒（即 2ɛ）后提交。&lt;/p>
&lt;p>无论如何 T9 事务启动时间都晚于 T8 的“提交时间戳”，也就能读取到 T8 的更新。&lt;/p>
&lt;p>回顾一下这个过程，第一个时间差是 2PC 带来的，如果换成其他事务模型也许可以避免，而第二个时间差是真正的 commit-wait，来自时间的不确定性，是不能避免的。&lt;/p>
&lt;p>TrueTime 的平均误差是 4 毫秒，commit-wait 需要等待两个周期，那 Spanner 读写事务的平均延迟必然大于等于 8 毫秒。为啥有人会说 Spanner 的 TPS 是 125 呢？原因就是这个。其实，这只是事务操作数据出现重叠时的吞吐量，而无关的读写事务是可以并行处理的。&lt;/p>
&lt;p>对数据库来说 8 毫秒的延迟虽然不能说短，但对多数场景来说还是能接受的。可是，TrueTime 是 Google 的独门招式，其他分布式数据库的时间误差远大于 8 毫秒，难道也用 commit-wait 可不太行，所以要用到第二种方式：读等待。&lt;/p>
&lt;h3 id="读等待-cockroachdb">读等待：CockroachDB&lt;/h3>
&lt;p>读等待的代表产品是 CockroachDB。&lt;/p>
&lt;p>CockroachDB 采用混合逻辑时钟（HLC），对于没有直接关联的事务，只能用物理时钟比较先后关系。CockroachDB 各节点的物理时钟使用 NTP 机制同步，误差在几十至几百毫秒之间，用户可以基于网络情况通过参数”maximum clock offset”设置这个误差，默认配置是 250 毫秒。&lt;/p>
&lt;p>写等待模式下，所有包含写操作的事务都受到影响，要延后提交；而读等待只在特殊条件下才被触发，影响的范围要小得多。&lt;/p>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_3.png" alt="20230202_distributed_database_3.png">&lt;/p>
&lt;p>这时，CockroachDB 的办法是重启（Restart）读操作的事务，就是让 T6 获得一个更晚的时间戳 T6-S2，使得 T6-S2 与 T2-C 的间隔大于 offset，那么就能读取 T2 的写入了。&lt;/p>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_4.png" alt="20230202_distributed_database_4.png">&lt;/p>
&lt;p>不过，接下来又出现更复杂的情况， T6-S2 与 T3 的提交时间戳 T3-C 间隔太近，又落入了 T3 的不确定时间窗口，所以 T6 事务还需要再次重启。而 T3 之后，T6 还要重启越过 T4 的不确定时间窗口。&lt;/p>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_5.png" alt="20230202_distributed_database_5.png">&lt;/p>
&lt;p>最后，当 T6 拿到时间戳 T6-S4 后，终于跳过了所有不确定时间窗口，读等待过程到此结束，T6 可以正式开始它的工作了。&lt;/p>
&lt;p>在这个过程中，可以看到读等待的两个特点：一是偶发，只有当读操作与已提交事务间隔小于设置的时间误差时才会发生；二是等待时间的更长，因为事务在重启后可能落入下一个不确定时间窗口，所以也许需要经过多次重启。&lt;/p>
&lt;h2 id="并发控制技术">并发控制技术&lt;/h2>
&lt;p>并发控制技术的分类：&lt;/p>
&lt;ul>
&lt;li>乐观协议&lt;/li>
&lt;li>悲观协议
悲观协议是使用锁的，而乐观协议是不使用锁的。&lt;/li>
&lt;/ul>
&lt;h3 id="乐观锁-tidb">乐观锁：TiDB&lt;/h3>
&lt;p>TiDB 的乐观锁基本上就是 Percolator 模型，运行过程分为三个阶段：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>选择Primary Row
收集所有参与修改的行，从中随机选择一行，作为这个事务的 Primary Row，这一行是拥有锁的，称为 Primary Lock，而且这个锁会负责标记整个事务的完成状态。所有其他修改行也有锁，称为 Secondary Lock，都会保留指向 Primary Row 的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写入阶段
按照两阶段提交的顺序，执行第一阶段。每个修改行都会执行上锁并执行“prewrite”，prewrite 就是将数据写入私有版本，其他事务不可见。注意这时候每个修改行都可能碰到锁冲突的情况，如果冲突就终止事务，返回给 TiDB，整个事务也就终止。如果所有修改行都顺利上锁，完成 prewrite，第一阶段结束。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提交阶段
这是两阶段提交的第二阶段，提交 Primary Row，也就是写入新版本的提交记录并清除 Primary Lock，如果顺利完成，那么这个事务整体也就完成了，反之就是失败。而 Secondary Rows 上的锁，则会交给异步线程根据 Primary Lock 的状态去清理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="并发控制阶段">并发控制阶段&lt;/h3>
&lt;ol>
&lt;li>读阶段
每个事务对数据项的局部拷贝进行更新。&lt;/li>
&lt;/ol>
&lt;p>注意此时的更新结果对于其他事务不可见。这个阶段的命名容易让人误解，明明做了写操作，却叫做“读阶段”。大意为后面要写入的内容，先要暂时加载到一个仅自己可见的临时空间内。&lt;/p>
&lt;ol start="2">
&lt;li>有效性确认阶段
验证准备提交的事务。检查这些更新是否可以保证数据库的一致性，如果检查通过进入下一个阶段，否则取消事务。&lt;/li>
&lt;/ol>
&lt;p>首先这里提到的检查与隔离性目标有直接联系；其次就是检查可以有不同的手段，也就是不同的并发控制技术，比如可以是基于锁的检查，也可以是基于时间戳排序。&lt;/p>
&lt;ol start="3">
&lt;li>写阶段
将读阶段的更新结果写入到数据库中，接受事务的提交结果。&lt;/li>
&lt;/ol>
&lt;p>还有一种关于乐观与悲观的表述，也与三阶段的顺序相呼应。&lt;strong>乐观重在事后检测&lt;/strong>，在事务提交时检查是否满足隔离级别，如果满足则提交，否则回滚并自动重新执行。&lt;strong>悲观重在事前预防&lt;/strong>，在事务执行时检查是否满足隔离级别，如果满足则继续执行，否则等待或回滚。&lt;/p>
&lt;p>回到 TiDB 的乐观锁。虽然对于每一个修改行来说，TiDB 都做了有效性验证，而且顺序是 VRW，可以说是悲观的，但这只是局部的有效性验证；从整体看，TiDB 没有做全局有效性验证，不符合 VRW 顺序，所以还是相对乐观的。&lt;/p>
&lt;h3 id="狭义乐观并发控制-occ">狭义乐观并发控制（OCC）&lt;/h3>
&lt;p>“&lt;a href="http://www.gbv.de/dms/weimar/toc/647210940_toc.pdf">Transactional Information Systems : Theory, Algorithms, and the Practice of Concurrency Control and Recovery&lt;/a>”给出了一个专用于 RVW 的三阶段定义，专门描述乐观协议的。其中主要差别在“有效性确认阶段”，是针对可串行化的检查，检查采用基于时间戳的特定算法。&lt;/p>
&lt;p>这个定义是一个更加具体的乐观协议，严格符合 RVW 顺序，所以我把它称为狭义上的乐观并发控制（Optimistic Concurrency Control），也称为基于有效性确认的并发控制（Validation-Based Concurrency Control）。很多学术论文中的 OCC 就是指这个。在工业界真正生产级的分布式数据库还很少使用狭义 OCC 进行并发控制，唯一的例外就是 FoundationDB。与之相对应的，则是 TiDB 这种广义上的乐观并发控制，说它乐观是因为它没有严格遵循 VRW 顺序。&lt;/p>
&lt;h3 id="乐观协议的挑战">乐观协议的挑战&lt;/h3>
&lt;p>主要两方面：&lt;/p>
&lt;ul>
&lt;li>事务冲突少是使用乐观协议的前提，但这个前提是否普遍成立？&lt;/li>
&lt;li>现有应用系统使用的单体数据库多是悲观协议，兼容性上的挑战。&lt;/li>
&lt;/ul>
&lt;h4 id="事务频繁冲突">事务频繁冲突&lt;/h4>
&lt;p>金融业务频繁冲突，很可能一直在重试、回滚，永远无法执行完成，而使用悲观锁就很容易解决。&lt;/p>
&lt;h4 id="兼容性要求">兼容性要求&lt;/h4>
&lt;p>保证对遗留应用系统的兼容性。单体数据库都是悲观协议，甚至多数都是基于锁的悲观协议，所以在 SQL 运行效果上与乐观协议有直接的区别。一个非常典型的例子就是 select for update。这是一个显式的加锁操作，或者说是显式的方式进行有效性确认，广义的乐观协议都不提供严格的 RVW，所以也就无法支持这个操作。&lt;/p>
&lt;h3 id="乐观锁的改变">乐观锁的改变&lt;/h3>
&lt;p>基于上面这些挑战，TiDB 的并发控制机制也做出了改变，增加了“悲观锁”并作为默认选项。TiDB 悲观锁的理论基础很简单，就是在原有的局部有效性确认前，增加一轮全局有效性确认。这样就是严格的 VRW，自然就是标准的悲观协议了。具体采用的方式就是增加了悲观锁，这个锁是实际存在的，表现为一个占位符，随着 SQL 的执行即时向存储系统（TiKV）发出，这样事务就可以在第一时间发现是否有其他事务与自己冲突。&lt;/p>
&lt;p>悲观锁还触发了一个变化。TiDB 原有的事务模型并不是一个交互事务，它会把所有的写 SQL 都攒在一起，在 commit 阶段一起提交，所以有很大的并行度，锁的时间较短，死锁的概率也就较低。因为增加了悲观锁的加锁动作，变回了一个可交互事务，TiDB 还要增加一个死锁检测机制。&lt;/p>
&lt;h2 id="悲观锁">悲观锁&lt;/h2>
&lt;h3 id="分类">分类&lt;/h3>
&lt;p>悲观协议又分为基于锁和非锁两大类，其中基于锁的协议是数量最多的。&lt;/p>
&lt;h3 id="两阶段封锁">两阶段封锁&lt;/h3>
&lt;p>Two-Phase Locking，2PL。就是事务具备两阶段特点的并发控制协议，两阶段指加锁阶段和释放锁阶段，并且加锁阶段严格区别于紧接着的释放锁阶段。&lt;/p>
&lt;p>保守两阶段封锁协议（Conservative 2PL，C2PL），事务在开始时设置它需要的所有锁。&lt;/p>
&lt;p>严格两阶段封锁协议（Strict 2PL，S2PL），事务一直持有已经获得的所有写锁，直到事务终止。&lt;/p>
&lt;p>强两阶段封锁协议（Strong Strict 2PL，SS2PL），事务一直持有已经获得的所有锁，包括写锁和读锁，直到事务终止。SS2PL 与 S2PL 差别只在于一直持有的锁的类型，所以它们的图形是相同的。&lt;/p>
&lt;h3 id="串行化图检测-sgt">串行化图检测（SGT）&lt;/h3>
&lt;p>SSI 是一种隔离级别的命名，最早来自 PostgreSQL，CockroachDB 沿用了这个名称。它是在 SI 基础上实现的可串行化隔离。作为 SSI 核心的 SGT 也不是 CockroachDB 首创，学术界早就提出了这个理论，真正的工程化实现要晚得多。&lt;/p>
&lt;h4 id="理论来源-postgresql">理论来源：PostgreSQL&lt;/h4>
&lt;p>事务之间的边又分为三类情况：&lt;/p>
&lt;ul>
&lt;li>写读依赖（WR-Dependencies），第二个操作读取了第一个操作写入的值。&lt;/li>
&lt;li>写写依赖（WW-Dependencies），第二个操作覆盖了第一个操作写入的值。&lt;/li>
&lt;li>读写反依赖（RW-Antidependencies），第二个操作覆盖了第一个操作读取的值，可能导致读取值过期。&lt;/li>
&lt;/ul>
&lt;h4 id="工程实现-cockroachdb">工程实现：CockroachDB&lt;/h4>
&lt;p>RW 反向依赖是一个非常特别的存在，而特别之处就在于传统的锁机制无法记录这种情况。因此在论文“&lt;a href="http://vldb.org/pvldb/vol5/p1850_danrkports_vldb2012.pdf">Serializable Snapshot Isolation in PostgreSQL&lt;/a>”中提出，增加一种锁 SIREAD，用来记录快照隔离（SI）上所有执行过的读操作（Read），从而识别 RW 反向依赖。本质上，SIREAD 并不是锁，只是一种标识。但这个方案面临的困境是，读操作涉及到的数据范围实在太大，跟踪标识带来的成本可能比 S2PL 还要高，也就无法达到最初的目标。&lt;/p>
&lt;p>针对这个问题，CockroachDB 做了一个关键设计，读时间戳缓存（Read Timestamp Cache），简称 RTC。&lt;/p>
&lt;p>基于 RTC 的新方案是这样的，当执行任何的读取操作时，操作的时间戳都会被记录在所访问节点的本地 RTC 中。当任何写操作访问这个节点时，都会以将要访问的 Key 为输入，向 RTC 查询最大的读时间戳（MRT），如果 MRT 大于这个写入操作的时间戳，那继续写入就会形成 RW 依赖。这时就必须终止并重启写入事务，让写入事务拿到一个更大的时间戳重新尝试。&lt;/p>
&lt;p>具体来说，RTC 是以 Key 的范围来组织读时间戳的。这样，当读取操作携带了谓词条件，比如 where 子句，对应的操作就是一个范围读取，会覆盖若干个 Key，那么整个 Key 的范围也可以被记录在 RTC 中。这样处理的好处是，可以兼容一种特殊情况。&lt;/p>
&lt;h1 id="架构演进">架构演进&lt;/h1>
&lt;p>单体数据往分布式数据库演进主要有两种方式，一种是通过增加中间件如 MyCat 来分库分表，实际就是在多个单体数据库之前增加代理节点，这里称作 Proxy 吧。另一种是提供一个完整的分布式数据库。&lt;/p>
&lt;h2 id="proxy">Proxy&lt;/h2>
&lt;p>在多个单体数据库之前增加代理节点，本质上是增加 SQL 的路由功能。随着分布式事务和跨节点等功能的加入，代理节点不再仅仅承担路由功能，还会承担分布式事务管理，可以成为协调节点。主要实现以下功能：&lt;/p>
&lt;ul>
&lt;li>客户端接入&lt;/li>
&lt;li>简单的查询处理器&lt;/li>
&lt;li>进程管理中的访问控制&lt;/li>
&lt;li>分布式事务管理
&lt;img src="../imgs/20230202_distributed_database_6.png" alt="20230202_distributed_database_6.png">&lt;/li>
&lt;/ul>
&lt;h2 id="newsql">NewSQL&lt;/h2>
&lt;p>NewSQL 也叫原生分布式数据，在架构上更加先进，每个层次的设计都是以分布式为目标，是从分布式键值对系统演进而来。在 NoSQL 的基础上增加了数据库事务处理能力。主要的工作负载由计算节点和存储节点承担，另外由管理节点承担全局时钟和分片信息管理功能。存储引擎层使用 LSM-Tree 模型替换 B+ Tree 模型，大幅提升了写入性能。&lt;/p>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_7.png" alt="20230202_distributed_database_7.png">&lt;/p>
&lt;p>Spanner 是 NewSQL 的开山鼻祖，其它的知名度较高的还有 CockroachDB、TiDB 和 YugabyteDB。&lt;/p>
&lt;h1 id="全局时钟">全局时钟&lt;/h1>
&lt;p>分布式数据库的很多设计都和时间有关，更确切地说是和全局时钟有关。比如前面提到的线性一致性，其基础就是全局时钟，还有多版本并发控制（MVCC）、快照、乐观协议与悲观协议，都和时间有关。&lt;/p>
&lt;h2 id="常见授时方案">常见授时方案&lt;/h2>
&lt;p>授时机制三要素：&lt;/p>
&lt;ul>
&lt;li>时间源：单个还是多个&lt;/li>
&lt;li>时钟类型：物理时钟还是混合逻辑时钟&lt;/li>
&lt;li>授时点：一个还是多个
排列组合一共 8 种可能性，其中 NTP（Network Time Protocol）误差大，也不能保证递增，基本没有使用其的产品。还有一些方案在实际中不适用（N/A），因此常见方案只有 4 类。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_8.png" alt="20230202_distributed_database_8.png">&lt;/p>
&lt;h2 id="truetime">TrueTime&lt;/h2>
&lt;p>Spanner 采用的方案是 TrueTime，其时间源是 GPS 和原子钟，属于多时间源和物理时钟，同时它也采用了多点授时机制，就是说集群内有多个时间服务器都可以提供授时服务。Truetime 是 Google 的独门绝技，依赖于特定硬件设备的思路，不适用于开源软件。&lt;/p>
&lt;p>TrueTime 会出现时光倒流，不只是 TrueTime，任何物理时钟都会存在时钟偏移甚至回拨。&lt;/p>
&lt;p>单个物理时钟会产生误差，多点授时又会带来整体性的误差。&lt;/p>
&lt;p>TrueTime 的优势：&lt;/p>
&lt;ul>
&lt;li>高可靠高性能，多时间源和多授时点实现了完全的去中心化设计，不存在单点问题&lt;/li>
&lt;li>支持全球化部署，客户端和时间服务器的距离可控，不会因为二者通讯延迟过长导致时钟失效&lt;/li>
&lt;/ul>
&lt;h2 id="hlc">HLC&lt;/h2>
&lt;p>CockroachDB 和 YugabyteDB 也是以高性能高可靠和全球化部署为目标，因为 TrueTime 的限制，其使用了混合逻辑时钟（Hybrid Logical Clock，HLC）。同样是多时间源、多点授时，但时钟采用了物理时钟与逻辑时钟混合的方式。HLC 在实现机制上较复杂的，且和 TrueTime 同样有整体性的时间误差。&lt;/p>
&lt;h3 id="实现-cockroachdb">实现（CockroachDB）&lt;/h3>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_9.png" alt="20230202_distributed_database_9.png">&lt;/p>
&lt;p>方框是节点上发生的事件，方框内的三个数字依次是节点的本地物理时间（简称本地时间，Pt）、HLC 的高位（简称 L 值）和 HLC 的低位（简称 C 值）。&lt;/p>
&lt;p>分析一：&lt;/p>
&lt;p>事件 D2 发生时，首先取上一个事件 D1 的 L 值和本地时间比较。L 值等于 0，本地时间已经递增变为 1，取最大值，那么用本地时间作为 D2 的 L 值。高位变更了，低位要归零，所以 D2 的 HLC 就是 (1,0)。&lt;/p>
&lt;p>分析二：&lt;/p>
&lt;p>如果节点间有调用关系，计时逻辑会更复杂一点。我们看事件 B2，要先判断 B2 的 L 值，就有三个备选：本节点上前一个事件 B1 的 L 值当前本地时间调用事件 A1 的 L 值，A1 的 HLC 是随着函数调用传给 B 节点的。&lt;/p>
&lt;p>这三个值分别是 0、1 和 10。按照规则取最大值，所以 B2 的 L 值是 10，也就是 A1 的 L 值，而 C 值就在 A1 的 C 值上加 1，最终 B2 的 HLC 就是 (10,1)。&lt;/p>
&lt;p>分析三：&lt;/p>
&lt;p>B3 事件发生时，发现当前本地时间比 B2 的 L 值还要小，所以沿用了 B2 的 L 值，而 C 值是在 B2 的 C 值上加一，最终 B3 的 HLC 就是 (10,2)。&lt;/p>
&lt;h2 id="tso">TSO&lt;/h2>
&lt;p>在 NewSQL 架构中使用单时间源、单点授时的方式往往被称为 TSO（Timestamp Oracle），在 Proxy 架构风格中被称为全局事务管理器（Golobal Transcation Manager，GTM）。也就是一个单点递增的时间戳和全局事务号基本等效。&lt;/p>
&lt;p>优点是实现简便，能够保证时钟单调递增，可以简化事务冲突时的设计。缺点是集群不能大范围部署，性能有上限。&lt;/p>
&lt;p>TiDB、OceanBase、GoldenDB 和 TBase 等选择使用 TSO。&lt;/p>
&lt;h3 id="实现-tidb">实现（TiDB）&lt;/h3>
&lt;p>中心化授时。&lt;/p>
&lt;p>TiDB 的全局时钟是一个数值，由两部分构成，其中高位是物理时间，也就是操作系统的毫秒时间；低位是逻辑时间，是一个 18 位的数值。从存储空间看，1 毫秒最多可以产生 262,144 个时间戳（2^18），这个数字很大一般来说足够使用。&lt;/p>
&lt;p>单点授时首先需要解决单点故障问题。TiDB 中提供授时服务的节点被称为 PD（Placement Driver）。多个 PD 节点构成一个 Raft 组，通过共识算法可以保证主节点宕机后马上选出新主，在短时间内恢复授时服务。&lt;/p>
&lt;p>问题是如何保证新主产生的时间戳一定大于旧主。必须将旧主的时间戳持久化存储，存储必须高可靠，TiDB 使用了 etcd。不是每产生一个时间戳都要保存的，那样时间戳的产生速度直接与磁盘 I/O 能力相关存在瓶颈。TiDB 采用预申请时间窗口的方式，如下过程：&lt;/p>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_10.png" alt="20230202_distributed_database_10.png">&lt;/p>
&lt;p>PD（主节点）系统时间是 103 毫秒，PD 向 etcd 申请了一个 可分配的时间窗口（可以通过参数指定，默认配置是 3 毫秒），所以该窗口起点是 PD 当前时间 103，时间窗口的终点就在 106 毫秒。写入 etcd 成功后，PD 将得到一个从 103 到 106 的 可分配时间窗口，这个时间窗口内 PD 可以使用系统的物理时间作为高位，拼接其在内存中累加的逻辑时间，对外分配时间戳。&lt;/p>
&lt;p>这种设计意味着所有 PD 已分配时间戳的高位，即物理时间，永远小于 etcd 存储的最大值。如果 PD 主节点宕机，新主可以读取 etcd 中存储的最大值，在这个基础上申请新的 可分配时间窗口，这样新主分配的时间戳肯定大于旧主。&lt;/p>
&lt;p>其次，客户端可以一次申请多个时间戳，但如果客户端缓存，多个客户端之间就不是严格单调递增的。&lt;/p>
&lt;h2 id="stp">STP&lt;/h2>
&lt;p>这是一个小众的方案，如 巨杉的 STP(SequoiaDB Time Protoco)，采用了单时间源、多点授时的方式，优缺点介于 HLC 和 TSO 之间。&lt;/p>
&lt;p>STP 是独立于分布式数据库的授时方案，与巨杉其他角色没有必然联系。&lt;/p>
&lt;p>STP 下的所有角色统称为 STP Node，分为两类：&lt;/p>
&lt;ul>
&lt;li>STP Server：STP 是独立于分布式数据库的授时方案。&lt;/li>
&lt;li>STP Client：按照固定的时间间隔，从 Primary Server 同步时间。
巨杉数据库的其他角色节点，如编目节点（CATALOG）、协调节点（COORD）和数据节点（DATA）等，都从本地的 STP Node 节点获得时间。&lt;/li>
&lt;/ul>
&lt;h1 id="分片机制">分片机制&lt;/h1>
&lt;h2 id="分片策略">分片策略&lt;/h2>
&lt;p>主要是：&lt;/p>
&lt;ul>
&lt;li>Hash（哈希）&lt;/li>
&lt;li>Range（范围）&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Key 和 List 可以看做 Hash 和 Range 的特殊情况。其机制类似。&lt;/p>
&lt;/blockquote>
&lt;h2 id="分片调度机制">分片调度机制&lt;/h2>
&lt;p>分为两种：&lt;/p>
&lt;ul>
&lt;li>静态：分片在节点上的分布基本固定，移动需要人工介入&lt;/li>
&lt;li>动态：通过调度管理器基于算法在各节点之间自动地移动分片
分片机制与架构风格对应关系：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">静态&lt;/th>
&lt;th style="text-align:left">动态&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Hash&lt;/td>
&lt;td style="text-align:left">Proxy / NewSQL&lt;/td>
&lt;td style="text-align:left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Range&lt;/td>
&lt;td style="text-align:left">Proxy&lt;/td>
&lt;td style="text-align:left">NewSQL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="hash分片">Hash分片&lt;/h2>
&lt;p>就是按照数据记录中指定关键字的 Hash 值将数据记录映射到不同的分片中。&lt;/p>
&lt;p>Hash 计算会过滤掉数据原有的业务特性，可以保证数据非常均匀地分布到多个分片上，这是 其最大优势，且实现也很简洁。如果直接用节点数作为模，当系统节点数量变动时模也随之改变，就要重新 Hash 计算，会带来大规模的数据迁移，对于扩展性非常不友好。&lt;/p>
&lt;p>于是引入了一致性 Hash。工业实践中应用一致性 Hash 算法，会引入虚拟节点，每个虚拟节点就是一个分片。一开始设定的分片数量决定了集群的最大规模，通常远大于初始集群节点。&lt;/p>
&lt;p>&lt;strong>节点和数据都通过 Hash 函数映射到 Hash 环上，数据按照顺时针找到最近的节点。&lt;/strong>&lt;/p>
&lt;h2 id="range静态分片">Range静态分片&lt;/h2>
&lt;p>Range 分片的特点恰恰是能够加入对于业务的预估，比如数据较多时可以更细分，数据较少时可以使用较粗的分类。&lt;/p>
&lt;p>Range 分片的适用范围更加广泛。主要因为 Range 分片可以更高效地扫描数据记录，而 Hash 分片由于数据被打散，扫描操作的 I/O 开销更大。&lt;/p>
&lt;h2 id="range动态分片">Range动态分片&lt;/h2>
&lt;p>多数是用主键作为关键字来分片的，当然主键可以是系统自动生成的，也可以是用户指定的。&lt;/p>
&lt;p>一般来说动态分片可以自动分裂和合并、根据访问压力调度分片，即&lt;strong>存储均衡&lt;/strong>和&lt;strong>访问压力均衡&lt;/strong>。&lt;/p>
&lt;p>分片调度还应具有两项能力：&lt;/p>
&lt;ul>
&lt;li>减少分布式事务：将频繁跨副本的事务数据转移到同一个节点，从而转换成本地事务。&lt;/li>
&lt;li>缩短服务延时：调度到较近的数据中心。&lt;/li>
&lt;/ul>
&lt;h1 id="数据复制协议">数据复制协议&lt;/h1>
&lt;p>动态分片，满足高可靠的同时还要考虑元数据的多副本一致性，必须选择合适的复制协议。&lt;/p>
&lt;p>如果搭建独立的、小规模元数据集群，则可以使用 Paxos 或 Raft 等协议，传播特点是广播。如果元数据存在工作节点上，数量较多则可以考虑 Gossip 协议，传播特点是谣言传播。&lt;/p>
&lt;p>复制协议的选择和数据副本数量有很大关系：如果副本少，参与节点少，可以采用广播方式，也就是 Paxos、Raft 等协议；如果副本多，节点多，更适合采用 Gossip 协议。&lt;/p>
&lt;h2 id="gossip协议">Gossip协议&lt;/h2>
&lt;p>CockroachDB 采用了 P2P 架构，每个节点都要保存完整的元数据，这样节点规模就非常大，不适用广播机制。而 Gossip 协议的原理是谣言传播机制，每一次谣言都在几个人的小范围内传播，但最终会成为众人皆知的谣言。这种方式达成的数据一致性是 “最终一致性”，即执行数据更新操作后，经过一定的时间，集群内各个节点所存储的数据最终会达成一致。&lt;/p>
&lt;p>虽然 Gossip 是最终一致性，但通过一些寻址过程中的巧妙设计，基于“最终一致性”的元数据也可以实现强一致性。&lt;/p>
&lt;h3 id="实现强一致性">实现强一致性&lt;/h3>
&lt;p>&lt;img src="../imgs/20230202_distributed_database_11.png" alt="20230202_distributed_database_11.png">&lt;/p>
&lt;ol>
&lt;li>节点 A 接到客户端的 SQL 请求，要查询数据表 T1 的记录，根据主键范围确定记录可能在分片 R1 上，而本地元数据显示 R1 存储在节点 B 上。&lt;/li>
&lt;li>节点 A 向节点 B 发送请求。很不幸，节点 A 的元数据已经过时，R1 已经重新分配到节点 C。&lt;/li>
&lt;li>此时节点 B 会回复给节点 A 一个非常重要的信息，R1 存储在节点 C。&lt;/li>
&lt;li>节点 A 得到该信息后，向节点 C 再次发起查询请求，这次运气很好 R1 确实在节点 C。&lt;/li>
&lt;li>节点 A 收到节点 C 返回的 R1。节点 A 向客户端返回 R1 上的记录，同时会更新本地元数据。
CockroachDB 在寻址过程中会不断地更新分片元数据，促成各节点元数据达成一致。&lt;/li>
&lt;/ol>
&lt;h2 id="raft协议">Raft协议&lt;/h2>
&lt;p>Raft 日志复制过程：&lt;/p>
&lt;ol>
&lt;li>Leader 收到客户端的请求。&lt;/li>
&lt;li>Leader 将请求内容（Log Entry）追加（Append）到本地 Log。&lt;/li>
&lt;li>Leader 将 Log Entry 发送给其他的 Follower。&lt;/li>
&lt;li>Leader 等待 Follower 的结果，如果大多数节点提交了该 Log，那么该 Log Entry 就是 Committed Entry，Leader 就可以将它应用（Apply）到本地的状态机。&lt;/li>
&lt;li>Leader 返回客户端提交成功。&lt;/li>
&lt;li>Leader 继续处理下一次请求。&lt;/li>
&lt;/ol>
&lt;h3 id="顺序投票阻塞问题">顺序投票阻塞问题&lt;/h3>
&lt;p>当多事务并行操作时，由于前面的事务没有超过半数的响应，Leader 必须等待一个明确的失败信号，如通讯超时等，才能结束这次操作。因为有顺序投票的规则，会阻塞后续事务的进行。&lt;/p>
&lt;h3 id="优化方法-tidb">优化方法（TiDB）&lt;/h3>
&lt;p>可以借鉴下 TiDB 的优化点：&lt;/p>
&lt;ul>
&lt;li>批操作（Batch）：Leader 缓存多个客户端请求，将一批日志批量发送给 Follower。减少通讯成本。&lt;/li>
&lt;li>流水线（Pipeline）：Leader 本地增加一个变量（称为 NextIndex），每次发送一个 Batch 后，更新 NextIndex 记录下一个 Batch 的位置，不等待 Follower 返回立刻发送下一个 Batch。当出现网络问题，Leader 重新调整 NextIndex 再次发送 Batch。&lt;/li>
&lt;li>并行追加日志（Append Log Parallelly）：Leader 将 Batch 发送给 Follower 的同时，并发执行本地的 Append 操作，可以减少部分开销。同时可以调整 Committed Entry 的判断规则，并行操作下，即使 Leader 没有 Append 成功，只要有半数以上的 Follower 节点 Append 成功，那就依然可以视为一个 Committed Entry，Entry 可以被 Apply。&lt;/li>
&lt;li>异步应用日志（Asynchronous Apply）：任何处于 Committed 状态的 Log Entry 都确保是不会丢失的。Apply 仅仅是为了保证状态能够在下次被正确地读取到，一般提交数据后不会马上读取，可以将 Apply 修改异步执行，同时改造读操作。&lt;/li>
&lt;/ul>
&lt;h1 id="自增主键">自增主键&lt;/h1>
&lt;h2 id="特性">特性&lt;/h2>
&lt;p>自增主键给开发人员提供了很大的便利。主键必须要保证唯一，且多数设计规范都会要求，主键不带有业务属性。如果数据库没有内置这个特性，应用开发人员就必须自己设计一套主键的生成逻辑，数据库原生提供的自增主键免去了这些工作量。&lt;/p>
&lt;h2 id="单体数据库自增主键">单体数据库自增主键&lt;/h2>
&lt;h3 id="无法连续递增">无法连续递增&lt;/h3>
&lt;p>事务发生冲突时，主键就会跳跃留下空洞。可以参考 MySQL 章节。&lt;/p>
&lt;h3 id="无法单调递增">无法单调递增&lt;/h3>
&lt;p>当主键生成的速度能够满足应用系统的并发需求时，自增主键确实可以做到单调自增。但在高并发场景下，如果自增主键称为瓶颈，那么需要优化。&lt;/p>
&lt;p>Oracle 数据库常见的优化方式就是由 Sequence 负责生成主键的高位，由应用服务器负责生成低位数字，拼接起来形成完整的主键。&lt;/p>
&lt;p>这样只能保证全局唯一，但数据表中最终保存的主键不再是单调递增。&lt;/p>
&lt;p>因此，在一个海量并发场景下，即使借助单体数据库的自增主键特性，也不能实现单调递增的主键。&lt;/p>
&lt;h2 id="自增主键的问题">自增主键的问题&lt;/h2>
&lt;p>分布式数据库中自增主键的问题更多，如：&lt;/p>
&lt;ul>
&lt;li>在自增主键的产生环节&lt;/li>
&lt;li>在自增主键的使用环节
可以发现自增主键的单调递增和全局时钟中的 TSO 很相似。&lt;/li>
&lt;/ul>
&lt;h3 id="尾部热点">尾部热点&lt;/h3>
&lt;blockquote>
&lt;p>参考：&lt;a href="https://www.cockroachlabs.com/blog/unpacking-competitive-benchmarks/">https://www.cockroachlabs.com/blog/unpacking-competitive-benchmarks/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>性能问题的根因是同时使用自增主键和 Range 分片。Range 分片有很多优势，使得其成为一个不能轻易放弃的选择。因此主流产品的默认方案是保持 Range 分片，放弃自增主键，转而用随机主键来代替。&lt;/p>
&lt;h2 id="随机主键">随机主键&lt;/h2>
&lt;h3 id="内置uuid">内置UUID&lt;/h3>
&lt;p>UUID 是由 32 个的 16 进制数字组成，长度是 128 位（16^32 = 2^128）。UUID 作为一种广泛使用标准，有多个实现版本，影响它的因素包括时间、网卡 MAC 地址、自定义 Namesapce 等等。&lt;/p>
&lt;p>缺点是键值长度过长（128 位），存储和计算的代价都会增加。&lt;/p>
&lt;h3 id="内置random-id">内置Random ID&lt;/h3>
&lt;p>TiDB 默认是支持自增主键的，对未声明主键的表会提供了一个隐式主键 _tidb_rowid。因为这个主键大体上是单调递增的，所以也会出现尾部热点问题。&lt;/p>
&lt;p>TiDB 除了提供了 UUID 函数，在 4.0 版本中还提供了一种解决方案 AutoRandom。TiDB 模仿 MySQL 的 AutoIncrement，提供了 AutoRandom 关键字用于生成一个随机 ID 填充指定列。&lt;/p>
&lt;p>这个随机 ID 是一个 64 位整型，分为三个部分。&lt;/p>
&lt;ul>
&lt;li>第一部分的符号位没有实际作用。&lt;/li>
&lt;li>第二部分是事务开始时间，默认为 5 位，可以理解成事务时间戳的一种映射。&lt;/li>
&lt;li>第三部分则是自增的序列号，使用其余位。&lt;/li>
&lt;/ul>
&lt;h3 id="外置snowflake">外置Snowflake&lt;/h3>
&lt;p>雪花算法（Snowflake）是 Twitter 公司分布式项目采用的 ID 生成算法。&lt;/p>
&lt;p>生成的 ID 是一个 64 位的长整型，由四个部分构成：&lt;/p>
&lt;ul>
&lt;li>第一部分是 1 位的符号位，并没有实际用处，主要为了兼容长整型的格式。&lt;/li>
&lt;li>第二部分是 41 位的时间戳用来记录本地的毫秒时间。&lt;/li>
&lt;li>第三部分是机器 ID，这里说的机器就是生成 ID 的节点，用 10 位长度给机器做编码，那意味着最大规模可以达到 1024 个节点（2^10）。&lt;/li>
&lt;li>最后是 12 位序列，序列的长度直接决定了一个节点 1 毫秒能够产生的 ID 数量，12 位就是 4096（2^12）。
注意时钟回拨导致产生的 ID 重复，需要特殊处理。&lt;/li>
&lt;/ul>
&lt;h1 id="关联查询">关联查询&lt;/h1>
&lt;p>查询中的多表关联，也就是 join 操作，在分布式数据库中如何优化呢。&lt;/p>
&lt;h2 id="关联算法">关联算法&lt;/h2>
&lt;p>常见的关联算法有三大类，分别是嵌套循环（Nested Loop Join）、排序归并（Sort-Merge Join）和哈希（Hash Join）。&lt;/p>
&lt;h3 id="嵌套循环连接算法">嵌套循环连接算法&lt;/h3>
&lt;p>所有的嵌套循环算法都由内外两个循环构成，分别从两张表中顺序取数据。其中，外层循环表称为外表（Outer 表），内层循环表则称为内表（Inner 表）。算法过程是由遍历 Outer 表开始，Outer 表也称为驱动表。在最终得到的结果集中，记录的排列顺序与 Outer 表的记录顺序是一致的。&lt;/p>
&lt;p>根据在处理环节上的不同，嵌套循环算法又可以细分为三种，分别是 Simple Nested-Loop Join（SNLJ）、Block Nested-Loop Join（BNJ）和 Index Lookup Join（ILJ）。&lt;/p>
&lt;h4 id="simple-nested-loop-join">Simple Nested-Loop Join&lt;/h4>
&lt;p>SNLJ 是最简单粗暴的算法，有些资料会用 NLJ 指代 SNLJ。&lt;/p>
&lt;p>SNLJ 执行过程：&lt;/p>
&lt;ol>
&lt;li>遍历 Outer 表，取一条记录 r1；&lt;/li>
&lt;li>遍历 Inner 表，对于 Inner 表中的每条记录，与 r1 做 join 操作并输出结果；&lt;/li>
&lt;li>重复步骤 1 和 2，直至遍历完 Outer 表中的所有数据，就得到了最后的结果集。
性能问题：每次为了匹配 Outer 表的一条记录，都要对 Inner 表做一次全表扫描操作。而全表扫描的磁盘 I/O 开销很大。&lt;/li>
&lt;/ol>
&lt;h4 id="block-nested-loop-join">Block Nested-Loop Join&lt;/h4>
&lt;p>BNJ 是对 SNLJ 的一种优化，改进点是减少 Inner 表的全表扫描次数。BNJ 的变化主要在于步骤 1，读取 Outer 表时不再只取一条记录，而是读取一个批次的 x 条记录加载到内存中。这样执行一次 Inner 表的全表扫描就可以比较 x 条记录。MySQL 中这个 x 对应一个叫做 Join Buffer 的设置项，直接影响了 BNJ 的执行效率。&lt;/p>
&lt;p>与 SNLJ 相比，BNJ 虽然在时间复杂度都是 O(m*n)（m 和 n 分别是 Outer 表和 Inner 表的记录行数），但磁盘 I/O 的开销却明显降低了，所以效果优于 SNLJ&lt;/p>
&lt;h4 id="index-lookup-join">Index Lookup Join&lt;/h4>
&lt;p>SNLJ 和 BNJ 都是直接在数据行上扫描，并没有使用索引。所以这两种算法的磁盘 I/O 开销比较大。&lt;/p>
&lt;p>Index Lookup Join（ILJ）在 BNJ 的基础上使用了索引，执行过程：&lt;/p>
&lt;ol>
&lt;li>遍历 Outer 表，取一个批次的记录 ri；&lt;/li>
&lt;li>通过连接键（Join Key）和 ri 可以确定对 Inner 表索引的扫描范围，再通过索引得到对应的若干条数据记录，记为 sj；&lt;/li>
&lt;li>将 ri 的每一条记录与 sj 的每一条记录做 Join 操作并输出结果；&lt;/li>
&lt;li>重复前三步，直到遍历完 Outer 表中的所有数据，就得到了最后结果集。
ILJ 的主要优化点很明显就是对 Inner 表进行索引扫描。BNJ 在 Inner 表上要做多次全表扫描成本最高，所以 Inner 表上使用索引的效果最显著，也就成为了算法的重点，而 Outer 表因为扫描结果集要放入内存中暂存，意味着它的记录数比较有限，索引带来的效果也就没有 Inner 表那么显著。&lt;/li>
&lt;/ol>
&lt;h3 id="排序归并链接算法">排序归并链接算法&lt;/h3>
&lt;p>排序归并算法就是 Sort-Merge Join（SMJ），也被称为 Merge Join。&lt;/p>
&lt;p>SMJ 可以分为排序和归并两个阶段：&lt;/p>
&lt;ol>
&lt;li>对 Outer 表和 Inner 表进行排序，排序的依据就是每条记录在连接键上的数值。&lt;/li>
&lt;li>归并，两张表已经按照同样的顺序排列，Outer 表和 Inner 表各一次循环遍历就能完成比对工作。
SMJ 就是先要把两个数据集合变成两个数据序列（有序的数据单元），然后再做循环比对。计算成本是两次排序再加两次循环。所以选择 SMJ 的前提是表的记录本身就是有序的，否则成本较高。而索引天然有序，如果表的连接键刚好是索引列，那么 SMJ 就是三种嵌套循环算法中成本最低的，它的时间复杂度只有 O(m+n)。&lt;/li>
&lt;/ol>
&lt;h3 id="哈希连接算法">哈希连接算法&lt;/h3>
&lt;p>哈希连接是一种分治思想，基本思想是取关联表的记录，计算连接键上数据项的哈希值，再根据哈希值映射为若干组，然后分组进行匹配。&lt;/p>
&lt;p>常见的哈希连接算法有三种，分别是 Simple Hash Join、Grace Hash Join 和 Hybrid Hash Join。&lt;/p>
&lt;h4 id="simple-hash-join">Simple Hash Join&lt;/h4>
&lt;p>执行过程:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>建立阶段（Build Phase）
选择一张表作为 Inner 表，对其中每条记录上的连接属性（Join Attribute）使用哈希函数得到哈希值，从而建立一个哈希表。在计算逻辑允许的情况下，建立阶段选择数据量较小的表作为 Inner 表，以减少生成哈希表的时间和空间开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>探测阶段（Probe Phase）
另一个表作为 Outer 表，扫描它的每一行并计算连接属性的哈希值，与建立阶段生成的哈希表进行对比。当然哈希值相等不代表连接属性相等，需要再做一次判断，返回最终满足条件的记录。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这里做了非常理想化的假设，即 Inner 表形成的哈希表小到能够放入内存中。但实际上哈希表也有可能超过内存容量。所以引入了 Grace Hash Join 算法。&lt;/p>
&lt;h4 id="grace-hash-join">Grace Hash Join&lt;/h4>
&lt;p>GHJ 中的 Grace 并不是指某项技术，而是首个采用该算法的数据库名称。Grace 将哈希表分块缓存在磁盘上。&lt;/p>
&lt;p>执行过程：&lt;/p>
&lt;ol>
&lt;li>Inner 表的记录会根据哈希值分成若干个块（Bucket）写入磁盘，每个 Bucket 必须小于内存容量。Outer 表也按照同样的方法被分为若干 Bucket 写入磁盘，但大小并不受到内存容量限制。&lt;/li>
&lt;li>和 SHJ 类似，先将 Inner 表的 Bucket 加载到内存，再读取 Outer 表对应 Bucket 的记录进行匹配，所有 Inner 表和 Outer 表的 Bucket 都读取完毕后，就得到了最终的结果集。&lt;/li>
&lt;/ol>
&lt;h4 id="hybrid-hash-join">Hybrid Hash Join&lt;/h4>
&lt;p>也就是混合哈希，字面上是指 Simple Hash Join 和 Grace Hash Join 的混合。实际上主要是针对 Grace Hash Join 的优化，内存够用下，可以将 Inner 表的第一个 Bucket 和 Outer 表的第一个 Bucket 都保留在内存中，这样建立阶段一结束就可以进行匹配，节省了先写入磁盘再读取的两次 I/O 操作。&lt;/p>
&lt;p>总体来说，哈希连接的核心思想和排序归并很相似，都是对内外表的记录分别只做一次循环。哈希连接算法不仅能够处理大小表关联，对提升大表之间关联的效率也有明显效果，但限制条件就是适用于等值连接。&lt;/p>
&lt;h2 id="并行框架">并行框架&lt;/h2>
&lt;h3 id="大小表关联-复制表">大小表关联（复制表）&lt;/h3>
&lt;p>大小表关联时，可以把小表复制到相关存储节点，这样全局关联就被转换为一系列的本地关联，再汇总起来就得到了最终结果。&lt;/p>
&lt;p>具体实现有静态和动态两种方式。&lt;/p>
&lt;h4 id="静态方式">静态方式&lt;/h4>
&lt;p>创建表时直接使用关键字将表声明为复制表，每个节点上都会保留一份数据副本。当与大表关联时，计算节点就可以将关联操作下推到每个存储节点进行。很多分布式数据库，比如 TBase、TDSQL 等，都支持定义复制表。&lt;/p>
&lt;h4 id="动态方式">动态方式&lt;/h4>
&lt;p>动态方式也称为“小表广播”，不需要人工预先定义，在关联发生时系统自行处理。当关联的某张表足够小时，在整个集群中分发不会带来太大的网络开销，系统就将其即时地复制到相关的数据节点上，实现本地关联。&lt;/p>
&lt;h3 id="大表关联-重分布">大表关联（重分布）&lt;/h3>
&lt;p>复制表解决了大小表关联的问题，还剩下最棘手的大表间关联，它的解决方案通常就是重分布。&lt;/p>
&lt;p>例如，A、B 两张大表，c 作为关联字段。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">A&lt;/span>,&lt;span style="color:#000">B&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">A&lt;/span>.&lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">B&lt;/span>.&lt;span style="color:#a90d91">c&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>那么可能引起两种不同的重分布操作：&lt;/p>
&lt;ul>
&lt;li>c 是 A 表的分区键，但不是 B 表的分区键，则 B 表按照 c 做重分布，推送到 A 的各个分片上，实现本地关联。&lt;/li>
&lt;li>两张表的分区键都不是 c，则两张表都要按照 c 做重分布，然后在多个节点上再做本地关联。（执行代价很高）
重分布的思想和 MapReduce、Spark 等并行计算引擎一致，基本等同于 Shuffle 操作：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>shuffle 阶段：分别将两个表按照连接键进行分区，将相同连接键的记录重分布到同一节点，数据就会被分配到尽量多的节点上，增大并行度。&lt;/li>
&lt;li>hash join 阶段：每个分区节点上的数据单独执行单机 hash join 算法。&lt;/li>
&lt;/ol>
&lt;h1 id="查询执行引擎">查询执行引擎&lt;/h1>
&lt;h2 id="火山模型">火山模型&lt;/h2>
&lt;p>火山模型（Volcano Model）也称为迭代模型（Iterator Model），是最著名的查询执行模型。1990 年提出，长期流行的查询执行模型，主流的 OLTP 数据库 Oracle、MySQL 都采用了这种模型。但面对海量数据时，火山模型有 CPU 使用率低的问题，性能有待提升。&lt;/p>
&lt;p>火山模型中，一个查询计划会被分解为多个代数运算符（Operator）。每个 Operator 就是一个迭代器，都要实现一个 next() 接口，通常包括三个步骤：&lt;/p>
&lt;ol>
&lt;li>调用子节点 Operator 的 next() 接口，获取一个元组（Tuple）；&lt;/li>
&lt;li>对元组执行 Operator 特定的处理；&lt;/li>
&lt;li>返回处理后的元组。&lt;/li>
&lt;/ol>
&lt;h3 id="优缺点">优缺点&lt;/h3>
&lt;p>火山模型的优点是处理逻辑清晰，每个 Operator 只要关心自己的处理逻辑即可，耦合性低。但是它的缺点也非常明显，主要是两点：&lt;/p>
&lt;ul>
&lt;li>虚函数调用次数过多，造成 CPU 资源的浪费。&lt;/li>
&lt;li>数据以行为单位进行处理，不利于发挥现代 CPU 的特性。&lt;/li>
&lt;/ul>
&lt;h3 id="运算符融合">运算符融合&lt;/h3>
&lt;p>最简单的方法就是减少执行过程中 Operator 的函数调用。通常来说 Project 和 Filter 都是常见的 Operator，在很多查询计划中都会出现。OceanBase1.0 就将两个 Operator 融合到了其它的 Operator 中。这样做有两个好处：&lt;/p>
&lt;ul>
&lt;li>降低了整个查询计划中 Operator 的数量，也就简化了 Operator 间的嵌套调用关系，最终减少了虚函数调用次数。&lt;/li>
&lt;li>单个 Operator 的处理逻辑更集中，增强了代码局部性能力，更容易发挥 CPU 的分支预测能力。
火山模型仍有一些优化空间，比如运算符融合，可以适度减少虚函数调用，但提升空间有限。学术界提出的两种优化方案是向量化和代码生成。&lt;/li>
&lt;/ul>
&lt;h3 id="分支预测能力">分支预测能力&lt;/h3>
&lt;p>分支预测是指 CPU 执行跳转指令时的一种优化技术。当出现程序分支时 CPU 需要执行跳转指令，在跳转的目的地址之前无法确定下一条指令，就只能让流水线等待，这就降低了 CPU 效率。为了提高效率，设计者在 CPU 中引入了一组寄存器，用来专门记录最近几次某个地址的跳转指令。&lt;/p>
&lt;p>当下次执行到这个跳转指令时，就可以直接取出上次保存的指令，放入流水线。等到真正获取到指令时，如果证明取错了则推翻当前流水线中的指令，执行真正的指令。&lt;/p>
&lt;h2 id="向量化模型">向量化模型&lt;/h2>
&lt;p>向量化模型就是一系列向量化运算符组成的执行模型。向量化模型首先在 OLAP 数据库和大数据领域广泛使用，配合列式存储取得很好的效果。虽然 OLTP 数据库的场景不适于列式存储，但将其与行式存储结合也取得了明显的性能提升。&lt;/p>
&lt;p>向量化模型与火山模型的最大差异就是，其中的 Operator 是向量化运算符，是基于列来重写查询处理算法的。简单来说向量化模型是由一系列支持向量化运算的 Operator 组成的执行模型。&lt;/p>
&lt;p>向量化模型依然采用了拉取式模型。和火山模型的唯一区别就是 Operator 的 next() 函数每次返回的是一个向量块，而不是一个元组。向量块是访问数据的基本单元，由固定的一组向量组成，这些向量和列 / 字段一一对应。&lt;/p>
&lt;p>向量处理背后的主要思想是，按列组织数据和计算，充分利用 CPU，把从多列到元组的转化推迟到较晚的时候执行。这种方法在不同的操作符间平摊了函数调用的开销。&lt;/p>
&lt;p>向量化模型首先在 OLAP 数据库中采用，与列式存储搭配使用可以获得更好的效果，例如 ClickHouse。&lt;/p>
&lt;p>这里的分布式数据库都是面向 OLTP 场景的，不能直接使用列式存储。但是可以采用折中的方式来实现向量化模型，即在底层的 Operator 中完成多行到向量块的转化，上层的 Operator 都是以向量块作为输入。这样改造后即使是与行式存储结合，仍然能够显著提升性能。在 TiDB 和 CockroachDB 的实践中，性能提升可以达到数倍甚至数十倍。&lt;/p>
&lt;h2 id="代码生成">代码生成&lt;/h2>
&lt;p>与向量化模型并列的另一种高效查询执行引擎就是 代码生成。代码生成的全称是以数据为中心的代码生成（Data-Centric Code Generation），也被称为编译执行（Compilation）。&lt;/p>
&lt;p>代码生成消除了火山模型中的大量虚函数调用，让大部分指令可以直接从寄存器取数，极大地提高了 CPU 的执行效率。&lt;/p>
&lt;p>代码生成是现代编译器与 CPU 结合的产物，也可以大幅提升查询执行效率。代码生成的基础逻辑是，针对性的代码在执行效率上必然优于通用运算符嵌套。代码生成根据算法会被划分成多个在 Pipeline 执行的单元，提升 CPU 效率。代码生成有不同的粒度，包括整体代码生成和表达式代码生成，粒度越大实现难度越大。&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf">https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://cse.buffalo.edu/~demirbas/publications/hlc.pdf">https://cse.buffalo.edu/~demirbas/publications/hlc.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://cs.brown.edu/courses/cs296-2/papers/consistent.pdf">http://cs.brown.edu/courses/cs296-2/papers/consistent.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://core.ac.uk/download/pdf/54846488.pdf">https://core.ac.uk/download/pdf/54846488.pdf&lt;/a>&lt;/p></description></item><item><title>Docs: LevelDB-01基本介绍</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-01%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-01%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</guid><description>
&lt;h1 id="简介">简介&lt;/h1>
&lt;h2 id="简介-1">简介&lt;/h2>
&lt;p>LevelDB 是一个key/value型的单机存储引擎，由google开发，并宣布在BSD许可下开放源代码。它是 leveling+ 分区实现的LSM典型代表。&lt;/p>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>key、value支持任意的byte类型数组，不单单支持字符串&lt;/li>
&lt;li>LevelDB 是一个持久化存储的KV系统，将大部分数据存储到磁盘上&lt;/li>
&lt;li>按照记录key值顺序存储数据，并且LevleDb支持按照用户定义的比较函数进行排序&lt;/li>
&lt;li>操作接口简单，包括写/读记录以及删除记录，也支持针对多条操作的原子批量操作。&lt;/li>
&lt;li>支持数据快照（snapshot）功能，使得读取操作不受写操作影响，可以在读操作过程中始终看到一致的数据。&lt;/li>
&lt;li>支持数据压缩（snappy压缩）操作，有效减小存储空间、并增快IO效率。&lt;/li>
&lt;li>LSM典型实现，适合写多读少。&lt;/li>
&lt;/ul>
&lt;h2 id="限制">限制&lt;/h2>
&lt;p>LevelDB 只是一个 C/C++ 编程语言的库，需要封装自己的网络服务器，无法像一般意义的存储服务器（如 MySQL）那样直接用客户端来连接。非关系型数据模型（NoSQL），不支持sql语句，也不支持索引，且一次只允许一个进程访问一个特定的数据库。&lt;/p>
&lt;h2 id="编译与使用">编译与使用&lt;/h2>
&lt;h3 id="源码">源码&lt;/h3>
&lt;p>源码下载&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/google/leveldb.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update --init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>安装三方模块
直接编译因为 third_party 中缺少 googletest 和 benchmark 子模块，需要单独安装。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">cd&lt;/span> third_party
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone git@github.com:google/googletest.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone git@github.com:google/benchmark.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>安装 sqlite3：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt-get install sqlite3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>编译&lt;/p>
&lt;blockquote>
&lt;p>注意避免修改了源码文件导致编译失败。&lt;/p>
&lt;/blockquote>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">cd&lt;/span> leveldb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p build &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a90d91">cd&lt;/span> build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># release版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmake -DCMAKE_BUILD_TYPE&lt;span style="color:#000">=&lt;/span>Release .. &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> cmake --build .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 或debug版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmake -DCMAKE_BUILD_TYPE&lt;span style="color:#000">=&lt;/span>Debug .. &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> cmake --build .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>编译Demo
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 头文件加入系统目录(可选)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -r ./include/leveldb /usr/include/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp build/libleveldb.a /usr/local/lib/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 编写demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 编译demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g++ -o xxx xxx.cpp libleveldb.a -lpthread
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="压测">压测&lt;/h2>
&lt;p>参照源码中的 benchmarks 目录&lt;/p>
&lt;h1 id="整体架构">整体架构&lt;/h1>
&lt;p>&lt;img src="../imgs/20230108_leveldb01_1.png" alt="20230108_leveldb01_1.png">&lt;/p>
&lt;p>LevelDB 作为存储系统，数据记录的存储介质包括内存以及磁盘文件。写数据时，接口会同时写入 MemTable（内存）和 Log 文件。当 MemTable 达到阈值时，MemTable 会冻结变成 Immutable MemTable（内存），并将数据写入 SSTable（磁盘上）中，在此同时会生成新的 MemTable 及 Log 文件供新的数据写入。&lt;/p>
&lt;h2 id="log文件">Log文件&lt;/h2>
&lt;p>LevelDB 写操作不是直接写入磁盘，而是先写入内存。加入写入到内存的数据还未来得及持久化，发生异常或者服务器宕机等会造成写入的数据丢失。因此，在写入内存之前会首先将所有的写操作写入日志文件中（其它存储系统都是这种通用做法）。每次写操作都是通过 append 方式顺序写入，整体写入性能好效率高。&lt;/p>
&lt;h2 id="memtable">Memtable&lt;/h2>
&lt;p>写入操作并不是直接将数据写入到磁盘文件，而是采用先将数据写入内存的方式。memtable 就是使用跳表实现的内存数据结构。数据按用户定义的方法排序之后按序存储，等到其存储内容到达阈值时（4MB）时，便将其转换成一个不可修改的 memtable，与此同时创建一个新的memtable 来供用户进行读写操作。因为使用跳表，它的大多数操作都是O(logn)。&lt;/p>
&lt;h2 id="immutable-memtable">Immutable Memtable&lt;/h2>
&lt;p>达到 Memtable 设置的容量上限后，Memtable 会变为 Immutable 为之后向SST文件的归并做准备。 同 Memtable 的结构定义一样。两者的区别只是 Immutable Memtable 是只读的。Immutable Memtable 被创建时，LevelDB 的后台压缩进程便会利用其中的内容创建一个sstable，然后持久化到磁盘中。Immutable Mumtable不再接受用户写入，同时生成新的 Memtable、Log 文件供新数据写入。&lt;/p>
&lt;h2 id="sstable文件">SSTable文件&lt;/h2>
&lt;p>磁盘数据存储文件。SSTable(Sorted String Table) 就是由内存中的数据不断导出并进行Compaction 操作后形成的，而且 SSTable 的所有文件是一种层级结构，第一层为Level 0，第二层为 Level 1，依次类推，层级逐渐增高，这也是为何称之为 LevelDB 的原因。此外，Compact 动作会将多个 SSTable 合并成少量的几个 SSTable，以剔除无效数据，保证数据访问效率并降低磁盘占用。&lt;/p>
&lt;h3 id="manifest文件">Manifest文件&lt;/h3>
&lt;p>Manifest 文件中记录SST文件在不同Level的分布，单个SST文件的最大最小key，以及其他一些LevelDB需要的元信息。&lt;/p>
&lt;h2 id="current文件">Current文件&lt;/h2>
&lt;p>主要是记录当前 Manifest 的文件名。LevelDB 启动时的首要任务就是找到当前的 Manifest，而 Manifest 文件可能有多个。Current 文件记录了当前 Manifest 的文件名，从而让 LevelDB 启动时能够找到当前的 Manifest。&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://github.com/google/leveldb">https://github.com/google/leveldb&lt;/a>&lt;/p></description></item><item><title>Docs: LevelDB-02基础数据结构</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-02%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-02%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>
&lt;h1 id="slice">Slice&lt;/h1>
&lt;h2 id="作用">作用&lt;/h2>
&lt;p>Slice 是 leveldb 中自定义的字符串处理类，主要是因为标准库中的 string 存在如下问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>默认语义为拷贝，会损失性能。（在可预期的条件下，可以通过指针传递）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用不太方便，不支持 remove_prefix 和 starts_with 等函数
Slice 的作用：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据结构简单，包括length和一个指向外部字节数组的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相比返回 std::string，返回 Slice的开销小很多（没有拷贝，Slice 没有实际数据只有指向数据的指针）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>允许key和value包含’\0’&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="兼容性">兼容性&lt;/h2>
&lt;p>可以方便实现与 std::string 的互相转换&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// string 转slice：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">s1&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">str&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">s2&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// slice转string:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">str&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">s1&lt;/span>.&lt;span style="color:#000">ToString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">str&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;hello&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="源码">源码&lt;/h2>
&lt;p>在 include/leveldb/slice.h 中，较简单。&lt;/p>
&lt;h1 id="key">Key&lt;/h1>
&lt;p>Key 的代码都在 dbformat.cc / dbformat.h&lt;/p>
&lt;p>Key 的关系图如下：&lt;/p>
&lt;p>&lt;img src="../imgs/20230108_leveldb02_1.png" alt="20230108_leveldb02_1.png">&lt;/p>
&lt;h2 id="internalkey">InternalKey&lt;/h2>
&lt;h3 id="作用-1">作用&lt;/h3>
&lt;p>用户输入的数据 key 使用 slice ，LevelDB 则使用 InternalKey 作为 内部key，常用来比较 key 等场景。&lt;/p>
&lt;h3 id="结构">结构&lt;/h3>
&lt;p>[Slice user_key] + [SequenceNumber&amp;lt;&amp;lt;8 + ValueType]，后半部分固定64位，即8字节。&lt;/p>
&lt;h2 id="lookupkey">LookupKey&lt;/h2>
&lt;h3 id="作用-2">作用&lt;/h3>
&lt;p>查找对象的时候，查找顺序是从第0层到第n层遍历查找，找到为止(最新的修改或者删除的数据会优先被找到)。由于不同层的键值不同，所以 LookupKey 提供了不同层所需的键值。（用于 DBImpl:Get）&lt;/p>
&lt;h3 id="结构-1">结构&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// We construct a char array of the form:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// klength varint32 &amp;lt;-- start_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// userkey char[klength] &amp;lt;-- kstart_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// tag uint64
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// &amp;lt;-- end_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// The array is a suitable MemTable key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// The suffix starting with &amp;#34;userkey&amp;#34; can be used as an InternalKey.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">start_&lt;/span>; &lt;span style="color:#177500">// user_key.size() + 8 变长编码后的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">kstart_&lt;/span>; &lt;span style="color:#177500">// userkey
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">end_&lt;/span>; &lt;span style="color:#177500">// 64位整型顺序号&amp;lt;&amp;lt;8+值类型 64位定长编码后的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">char&lt;/span> &lt;span style="color:#000">space_&lt;/span>[&lt;span style="color:#1c01ce">200&lt;/span>]; &lt;span style="color:#177500">// Avoid allocation for short keys
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>memtable_key = start_ + kstart_ + end_&lt;/p>
&lt;p>internal_key = kstart_ + end_&lt;/p>
&lt;p>user_key = kstart_&lt;/p>
&lt;h2 id="parsedinternalkey">ParsedInternalKey&lt;/h2>
&lt;h3 id="作用-3">作用&lt;/h3>
&lt;p>对 InternalKey 的解析，InternalKey 是一个字符串&lt;/p>
&lt;h3 id="结构-2">结构&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>struct ParsedInternalKey {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Slice user_key;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SequenceNumber sequence;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueType type;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="skiplist">SkipList&lt;/h1>
&lt;h2 id="定义">定义&lt;/h2>
&lt;p>跳跃表：可以代替平衡树的数据结构，可以看成并联的有序链表。跳跃表通过概率保证平衡，而平衡树通过严格的旋转来保证平衡，因此跳跃表实现比较容易，相比平衡树有较高的运行效率。&lt;/p>
&lt;blockquote>
&lt;p>Redis 中默认的最大 level 为 64。&lt;/p>
&lt;/blockquote>
&lt;h2 id="实现">实现&lt;/h2>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// skiplist.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">template&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">SkipList&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">Node&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">SkipList&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">list_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">node_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Intentionally copyable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">enum&lt;/span> { &lt;span style="color:#000">kMaxHeight&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">12&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">inline&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">GetMaxHeight&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">max_height_&lt;/span>.&lt;span style="color:#000">load&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_relaxed&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">NewNode&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">height&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">RandomHeight&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">Equal&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">a&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">b&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> (&lt;span style="color:#000">compare_&lt;/span>(&lt;span style="color:#000">a&lt;/span>, &lt;span style="color:#000">b&lt;/span>) &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return true if key is greater than the data stored in &amp;#34;n&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">KeyIsAfterNode&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">n&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return the earliest node that comes at or after key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Return nullptr if there is no such node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// If prev is non-null, fills prev[level] with pointer to previous
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// node at &amp;#34;level&amp;#34; for every level in [0..max_height_-1].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">FindGreaterOrEqual&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">**&lt;/span> &lt;span style="color:#000">prev&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return the latest node with a key &amp;lt; key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Return head_ if there is no such node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">FindLessThan&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return the last node in the list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Return head_ if list is empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">FindLast&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Immutable after construction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Comparator&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">compare_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">arena_&lt;/span>; &lt;span style="color:#177500">// Arena used for allocations of nodes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">head_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Modified only by Insert(). Read racily by readers, but stale
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// values are ok.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">int&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">max_height_&lt;/span>; &lt;span style="color:#177500">// Height of the entire list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Read/written only by Insert().
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Random&lt;/span> &lt;span style="color:#000">rnd_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Implementation details follow
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">template&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">SkipList&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#000">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;::&lt;/span>&lt;span style="color:#000">Node&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">explicit&lt;/span> &lt;span style="color:#000">Node&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">k&lt;/span>) &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#000">key&lt;/span>(&lt;span style="color:#000">k&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Key&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">key&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Accessors/mutators for links. Wrapped in methods so we can
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// add the appropriate barriers as necessary.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Next&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Use an &amp;#39;acquire load&amp;#39; so that we observe a fully initialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// version of the returned Node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">load&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_acquire&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">SetNext&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">x&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Use a &amp;#39;release store&amp;#39; so that anybody who reads through this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// pointer observes a fully initialized version of the inserted node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">store&lt;/span>(&lt;span style="color:#000">x&lt;/span>, &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_release&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// No-barrier variants that can be safely used in a few locations.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">NoBarrier_Next&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">load&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_relaxed&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">NoBarrier_SetNext&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">x&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">store&lt;/span>(&lt;span style="color:#000">x&lt;/span>, &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_relaxed&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Array of length equal to the node height. next_[0] is lowest level link.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 提前使用声明分配1个对象的内存，因为第0层数据肯定都有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 使用数组的方式，后续分配的内存都是连续的，atomic 保证原子性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">template&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">SkipList&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#000">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;::&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">SkipList&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#000">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;::&lt;/span>&lt;span style="color:#000">NewNode&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">height&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 前面已经分配了一层，所以 level-1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">node_memory&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">arena_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AllocateAligned&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">sizeof&lt;/span>(&lt;span style="color:#000">Node&lt;/span>) &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#a90d91">sizeof&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>) &lt;span style="color:#000">*&lt;/span> (&lt;span style="color:#000">height&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">new&lt;/span> (&lt;span style="color:#000">node_memory&lt;/span>) &lt;span style="color:#000">Node&lt;/span>(&lt;span style="color:#000">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h1 id="compare">Compare&lt;/h1>
&lt;h2 id="作用-4">作用&lt;/h2>
&lt;p>LevelDB 抽象了一个基类 Comparator 用于各种 key 之间的比较，毕竟数据是按照键有序存储的。且必须要支持线程安全。&lt;/p>
&lt;h2 id="源码-1">源码&lt;/h2>
&lt;p>在 include/leveldb/comparator.h 中&lt;/p>
&lt;h2 id="结构-3">结构&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">Comparator&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">Comparator&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Three-way comparison. Returns value:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// &amp;lt; 0 iff &amp;#34;a&amp;#34; &amp;lt; &amp;#34;b&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// == 0 iff &amp;#34;a&amp;#34; == &amp;#34;b&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// &amp;gt; 0 iff &amp;#34;a&amp;#34; &amp;gt; &amp;#34;b&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 支持 &amp;gt;、=、&amp;lt; 三种操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">Compare&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">a&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">b&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 比较器名字，以 leveldb. 开头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Name&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果 *start &amp;lt; limit, 将 *start 更改为 [start,limit) 中的短字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 简单的比较器实现可能以 *start 不变返回。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">FindShortestSeparator&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">start&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">limit&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 将 *key 更改为 string &amp;gt;= *key.Simple 比较器实现可能会在 *key 不变的情况下返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">FindShortSuccessor&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>具体实现有：&lt;/p>
&lt;ul>
&lt;li>BytewiseComparatorImpl&lt;/li>
&lt;li>InternalKeyComparator&lt;/li>
&lt;/ul>
&lt;h2 id="bytewisecomparatorimpl">BytewiseComparatorImpl&lt;/h2>
&lt;h3 id="作用-5">作用&lt;/h3>
&lt;ul>
&lt;li>Slice并没有规定Key具体类型，LevelDB 支持用户自定义比较器，创建数据库对象时可以通过Option 指定。&lt;/li>
&lt;li>默认的比较器，基于二进制比较&lt;/li>
&lt;/ul>
&lt;h3 id="源码-2">源码&lt;/h3>
&lt;p>在 util/comparator.cc 中。&lt;/p>
&lt;h2 id="internalkeycomparator">InternalKeyComparator&lt;/h2>
&lt;h3 id="作用-6">作用&lt;/h3>
&lt;ul>
&lt;li>用于内部的Key比较器。&lt;/li>
&lt;li>内部调用的也是 BytewiseComparatorImpl&lt;/li>
&lt;li>cmp原则：
&lt;ul>
&lt;li>userkey&lt;/li>
&lt;li>seq 越大越新&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FindShortestSeparator / FindShortSuccessor
&lt;ul>
&lt;li>提取 userkey，通过 userkey 查找&lt;/li>
&lt;li>追加 kMaxSequenceNumber + kValueTypeForSeek&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="源码-3">源码&lt;/h3>
&lt;p>在 db/dbformat.h 中。&lt;/p>
&lt;h1 id="env">Env&lt;/h1>
&lt;p>LevelDB 是跨平台的，因此 Env 封装了跨平台的内容。&lt;/p>
&lt;p>Env 是一个纯虚类，有三个实现版本：&lt;/p>
&lt;ul>
&lt;li>PosixEnv：封装了 &lt;a href="https://zhuanlan.zhihu.com/p/526876127">posix&lt;/a> 标准下所有接口&lt;/li>
&lt;li>WindowsEnv：封装了 win 相关接口&lt;/li>
&lt;li>EnvWrapper：对 Env 的扩展，将所有调用转发到其他的 Env 实现&lt;/li>
&lt;/ul>
&lt;h2 id="envwrapper">EnvWrapper&lt;/h2>
&lt;p>EnvWrapper 可以理解成对 Env 的扩展，使用了代理模式来实现扩展。&lt;/p></description></item><item><title>Docs: LevelDB-03Log</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-03Log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-03Log/</guid><description>
&lt;h2 id="log作用">Log作用&lt;/h2>
&lt;p>对于DB最怕的就是数据的丢失。当服务挂掉时，应尽可能的减少数据丢失。在 leveldb 中引入了 WAL 日志。&lt;/p>
&lt;h2 id="基本组成">基本组成&lt;/h2>
&lt;p>每个 Log 被划分成了很多 32K 大小的物理 block，写入、读取操作都是以 block 为单位进行。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// log_format.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">enum&lt;/span> &lt;span style="color:#3f6e75">RecordType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Zero is reserved for preallocated files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">kZeroType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kFullType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// For fragments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">kFirstType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kMiddleType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kLastType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">kMaxRecordType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kLastType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">32768&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Header is checksum (4 bytes), length (2 bytes), type (1 byte).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">4&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="写入流程">写入流程&lt;/h2>
&lt;p>入口：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// db_impl.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Status DBImpl::Write(const WriteOptions&amp;amp; options, WriteBatch* updates)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">log_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AddRecord&lt;/span>(&lt;span style="color:#000">WriteBatchInternal&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Contents&lt;/span>(&lt;span style="color:#000">write_batch&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">sync_error&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">status&lt;/span>.&lt;span style="color:#000">ok&lt;/span>() &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">sync&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">logfile_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Sync&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">status&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sync_error&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">status&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">WriteBatchInternal&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">InsertInto&lt;/span>(&lt;span style="color:#000">write_batch&lt;/span>, &lt;span style="color:#000">mem_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Lock&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="addrecord">AddRecord&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// log_writer.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Status Writer::AddRecord(const Slice&amp;amp; slice)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">begin&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 检查剩余可以写的空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 小于kHeaderSize，则需要开启新的block，因为kHeaderSize是必须要写的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Switch to a new block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 剩余空间使用0填充
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Fill the trailer (literal below relies on kHeaderSize being 7)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">static_assert&lt;/span>(&lt;span style="color:#000">kHeaderSize&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">7&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">dest_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Append&lt;/span>(&lt;span style="color:#000">Slice&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;&lt;/span>&lt;span style="color:#c41a16">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#c41a16">&amp;#34;&lt;/span>, &lt;span style="color:#000">leftover&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 开启新的block，重置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Invariant: we never leave &amp;lt; kHeaderSize bytes in a block.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">avail&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span> &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#000">avail&lt;/span>) &lt;span style="color:#000">?&lt;/span> &lt;span style="color:#000">left&lt;/span> : &lt;span style="color:#000">avail&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RecordType&lt;/span> &lt;span style="color:#000">type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 计算是否刚好填满该block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">end&lt;/span> &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">begin&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">end&lt;/span>) { &lt;span style="color:#177500">// 新block且刚好装下
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kFullType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> &lt;span style="color:#000">if&lt;/span> (&lt;span style="color:#000">begin&lt;/span>) { &lt;span style="color:#177500">// 新block，一个装不下
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kFirstType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> &lt;span style="color:#000">if&lt;/span> (&lt;span style="color:#000">end&lt;/span>) { &lt;span style="color:#177500">// 上一份数据到该block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kLastType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> { &lt;span style="color:#177500">// 其它场景
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kMiddleType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">EmitPhysicalRecord&lt;/span>(&lt;span style="color:#000">type&lt;/span>, &lt;span style="color:#000">ptr&lt;/span>, &lt;span style="color:#000">fragment_length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ptr&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">-=&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">begin&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>() &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="emitphysicalrecord">EmitPhysicalRecord&lt;/h3>
&lt;p>接着查看 EmitPhysicalRecord 函数&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size_t length) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(length &amp;lt;= 0xffff); // Must fit in two bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(block_offset_ + kHeaderSize + length &amp;lt;= kBlockSize);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Format the header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char buf[kHeaderSize];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 序列化长度和recordtype信息
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[4] = static_cast&amp;lt;char&amp;gt;(length &amp;amp; 0xff);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[5] = static_cast&amp;lt;char&amp;gt;(length &amp;gt;&amp;gt; 8);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[6] = static_cast&amp;lt;char&amp;gt;(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Compute the crc of the record type and the payload.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint32_t crc = crc32c::Extend(type_crc_[t], ptr, length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> crc = crc32c::Mask(crc); // Adjust for storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EncodeFixed32(buf, crc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Write the header and the payload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Status s = dest_-&amp;gt;Append(Slice(buf, kHeaderSize));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (s.ok()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s = dest_-&amp;gt;Append(Slice(ptr, length));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (s.ok()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s = dest_-&amp;gt;Flush();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> block_offset_ += kHeaderSize + length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="sync">Sync&lt;/h3>
&lt;p>注意 DBImpl::Write 函数中调用完 AddRecord 后立马调用了 Sync 函数进行了同步。&lt;/p>
&lt;h2 id="删除日志">删除日志&lt;/h2>
&lt;p>doc(&lt;strong>doc/impl.md&lt;/strong>)文档里面讲解了，在打开数据库以及compact之后，会将不再使用的文件删除，使用的函数是 RemoveObsoleteFiles。可以通过添加日志或者 gdb 来查看。&lt;/p>
&lt;h3 id="打开数据库">打开数据库&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// db_impl.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Status DB::Open(const Options&amp;amp; options, const std::string&amp;amp; dbname, DB** dbptr)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">RemoveObsoleteFiles&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">MaybeScheduleCompaction&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="数据压缩">数据压缩&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// void DBImpl::CompactMemTable()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Commit to the new state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">imm_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">imm_&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">has_imm_&lt;/span>.&lt;span style="color:#000">store&lt;/span>(&lt;span style="color:#a90d91">false&lt;/span>, &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_release&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RemoveObsoleteFiles&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#a90d91">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RecordBackgroundError&lt;/span>(&lt;span style="color:#000">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: LevelDB-04数据读写</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-04%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-04%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/</guid><description>
&lt;h1 id="数据写入">数据写入&lt;/h1>
&lt;h2 id="基本原理">基本原理&lt;/h2>
&lt;h3 id="新增记录">新增记录&lt;/h3>
&lt;p>一个插入操作 Put(key, value) 包含两个具体步骤：&lt;/p>
&lt;ol>
&lt;li>追加写入 log&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>以顺序写的方式追加到 log 文件末尾。磁盘顺序写的方式效率很高，不会导致写入速度的急剧降低。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>写入 memtable&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果写入 log 文件成功，那么记录也会插入内存的 Memtable 中，Memtable 是一个 key 有序的跳表。&lt;/p>
&lt;/blockquote>
&lt;p>正是因为一个插入操作涉及一次磁盘文件追加写和内存跳表的插入操作，所以 LevelDB 写入速度很高效。&lt;/p>
&lt;h3 id="删除记录">删除记录&lt;/h3>
&lt;p>删除一条记录并不是立即执行删除操作，而是与插入操作相同，只不过插入操作是插入 key:value 值，而删除操作是插入 key:删除标记，等后台 Compaction 时才执行真正的删除操作。&lt;/p>
&lt;h2 id="writebatch">WriteBatch&lt;/h2>
&lt;p>WriteBatch 使用批量写来提高性能，支持 put 和 delete。&lt;/p>
&lt;h3 id="结构">结构&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// include/leveldb/write_batch.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">WriteBatch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Store the mapping &amp;#34;key-&amp;gt;value&amp;#34; in the database.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// If the database contains a mapping for &amp;#34;key&amp;#34;, erase it. Else do nothing.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Clear all updates buffered in this batch.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 内存状态信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">ApproximateSize&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 多个 WriteBatch 还可以继续合并
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Append&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">source&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Support for iterating over the contents of a batch.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Iterate&lt;/span>(&lt;span style="color:#000">Handler&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handler&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">//内部工具性质的辅助类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">friend&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">WriteBatchInternal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 具体数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">rep_&lt;/span>; &lt;span style="color:#177500">// See comment in write_batch.cc for the format of rep_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#177500">// namespace leveldb
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// db/write_batch.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// WriteBatch header has an 8-byte sequence number followed by a 4-byte count.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">kHeader&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">12&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="写入数据">写入数据&lt;/h3>
&lt;p>代码：include/leveldb/write_batch.h；db/write_batch_internal.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">ReadOptions&lt;/span>(), &lt;span style="color:#000">key1&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteOptions&lt;/span>(), &lt;span style="color:#000">key2&lt;/span>, &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteOptions&lt;/span>(), &lt;span style="color:#000">key1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>调用 db-&amp;gt;Put(WriteOptions(),&amp;amp;key,&amp;amp;value); 写入数据。WriteOptions 只有一个变量 sync，默认初始值为 false，因此默认写数据方式是异步。即每次写操作只要将数据写入到内存中就返回，而将数据从内存写到磁盘的方式是异步的。
异步写的效率比同步写高很多，问题是系统故障时可能会导致最近的写入丢失。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#633820">#include&lt;/span> &lt;span style="color:#633820">&amp;#34;leveldb/write_batch.h&amp;#34;&lt;/span>&lt;span style="color:#633820">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#633820">&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">ReadOptions&lt;/span>(), &lt;span style="color:#000">key1&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteBatch&lt;/span> &lt;span style="color:#000">batch&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch&lt;/span>.&lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#000">key1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch&lt;/span>.&lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#000">key2&lt;/span>, &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteOptions&lt;/span>(), &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">batch&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>LevelDB 使用 WriteBatch 替代简单的异步写操作。首先将所有的写操作记录到一个 batch 中，然后执行同步写，这样同步写的开销就被分散到多个写操作中。&lt;/p>
&lt;h2 id="写操作">写操作&lt;/h2>
&lt;h3 id="写接口">写接口&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Open the database with the specified &amp;#34;name&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Stores a pointer to a heap-allocated database in *dbptr and returns
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// OK on success.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Stores nullptr in *dbptr and returns a non-OK status on error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Caller should delete *dbptr when it is no longer needed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Open&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Options&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">**&lt;/span> &lt;span style="color:#000">dbptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>() &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#a90d91">operator&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">DB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Set the database entry for &amp;#34;key&amp;#34; to &amp;#34;value&amp;#34;. Returns OK on success,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// and a non-OK status on error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Note: consider setting options.sync = true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">updates&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="写实现">写实现&lt;/h3>
&lt;p>代码：db/db_impl.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">DBImpl&lt;/span> &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#000">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 更新一条记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// leveldb::DBImpl::Put =&amp;gt; leveldb::DB::Put =&amp;gt; leveldb::DBImpl::Write
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除一条记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// leveldb::DBImpl::Delete =&amp;gt; leveldb::DB::Delete =&amp;gt; leveldb::DBImpl::Write
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 更新多条记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">updates&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>注意调用流程：leveldb::DBImpl::Put =&amp;gt; leveldb::DB::Put =&amp;gt; leveldb::DBImpl::Write&lt;/p>
&lt;h3 id="dbimpl-write">DBImpl::Write&lt;/h3>
&lt;p>代码：db/db_impl.cc&lt;/p>
&lt;p>基本流程：&lt;/p>
&lt;ul>
&lt;li>构造 Writer&lt;/li>
&lt;li>将 writebatch 存入到一个 Writer 中，&lt;/li>
&lt;li>将 Writer 存入 deque 中。（levedb支持多线程，需要加互斥锁保护writers_）&lt;/li>
&lt;li>每个生产者在向 writers_ 队列中添加任务之后，都会进入一个 while 循环在里面等待。只有当该生产者加入的任务已经被处理或位于队列的头部，线程才会被唤醒。注意线程被唤醒后会继续检查循环条件，满足条件会继续睡眠。
&lt;ul>
&lt;li>加入的任务被其他任务处理，线程直接退出。&lt;/li>
&lt;li>加入的任务排在了队列的头部且未处理，当前线程将消费者进行后续处理。
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Writer 结构
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Writer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">explicit&lt;/span> &lt;span style="color:#000">Writer&lt;/span>(&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">mu&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#000">batch&lt;/span>(&lt;span style="color:#a90d91">nullptr&lt;/span>), &lt;span style="color:#000">sync&lt;/span>(&lt;span style="color:#a90d91">false&lt;/span>), &lt;span style="color:#000">done&lt;/span>(&lt;span style="color:#a90d91">false&lt;/span>), &lt;span style="color:#000">cv&lt;/span>(&lt;span style="color:#000">mu&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">batch&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">sync&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">done&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">CondVar&lt;/span> &lt;span style="color:#000">cv&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">updates&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 构造 Writer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Writer&lt;/span> &lt;span style="color:#000">w&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">batch&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">updates&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">sync&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">sync&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">done&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 将 Writer push 到 deque 中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">push_back&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">w&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 构造 Writer 未执行完时(如合并操作，可能会被其它线程执行完成)，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 且未到队列头(没有获得调度)时，则等待
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">done&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">front&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">cv&lt;/span>.&lt;span style="color:#000">Wait&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果Writer任务被其它writer执行完成，则返回。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">done&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 真正执行调度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 将处理完的任务从队列中取出，设置状态为 true，然后通知对应的 port::CondVar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#a90d91">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Writer&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">ready&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">front&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">pop_front&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">ready&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">w&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ready&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ready&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">done&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ready&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">cv&lt;/span>.&lt;span style="color:#000">Signal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">ready&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">last_writer&lt;/span>) &lt;span style="color:#a90d91">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 通知队列中的首 Writer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">empty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">front&lt;/span>()&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">cv&lt;/span>.&lt;span style="color:#000">Signal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="数据读取">数据读取&lt;/h1>
&lt;h2 id="数据读取流程">数据读取流程&lt;/h2>
&lt;ul>
&lt;li>Memtable 查找：首先会去查看内存中的 Memtable，如果 Memtable 中包含key及其对应的value，则直接返回；&lt;/li>
&lt;li>Immutable Memtable 查找：接下来会到内存中的 Immutable Memtable 中查找，读到则返回；&lt;/li>
&lt;li>SSTable 查找：SSTable数量较多且分成多个 level。首先从属于 level 0 的文件中查找，如果找到则直接返回，如果没有找到则到下一个 level 的文件中查找，如此循环往复直到找到或查遍所有 level 没有仍然找到返回不存在为止。&lt;/li>
&lt;/ul>
&lt;h2 id="sst">SST&lt;/h2>
&lt;h3 id="数据分布">数据分布&lt;/h3>
&lt;ul>
&lt;li>level 0下的不同文件可能key的范围有重叠，某个要查询的key有可能多个文件都包含。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>策略是先找出 level 0 中哪些文件包含这个key（manifest文件中记载了level和对应的文件及文件里key的范围信息，内存中保存该映射表），之后按照文件的新鲜程度排序，新的文件排在前面，之后依次查找，读出key对应的value。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>非level 0下的不同文件之间key是不重叠的，所以只从一个文件就可以找到key对应的value。&lt;/li>
&lt;/ul>
&lt;h3 id="查询过程">查询过程&lt;/h3>
&lt;p>如果命中了 SST，那么查询过程如下：&lt;/p>
&lt;ul>
&lt;li>一般先在内存中的 Cache 中查找是否包含这个文件的缓存记录，找到则从缓存中读取；&lt;/li>
&lt;li>然后打开 SSTable 文件，同时将文件的索引部分加载到内存中存入 Cache（只有索引部分在 Cache中）；&lt;/li>
&lt;li>根据索引定位到哪个 Block 包含 key，从文件中读出 Block 的内容，然后根据记录逐一比较，找到则返回，没有找到则到下一级别的 SSTable 中查找。&lt;/li>
&lt;/ul>
&lt;h2 id="读操作">读操作&lt;/h2>
&lt;h3 id="读接口">读接口&lt;/h3>
&lt;p>代码：include/leveldb/db.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">ReadOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="读实现">读实现&lt;/h3>
&lt;p>代码：db/db_impl.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">DBImpl&lt;/span> &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#000">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 读取记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">ReadOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="dbimpl-get">DBImpl::Get&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">ReadOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取互斥锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取本地读操作的 Sequence Number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">SequenceNumber&lt;/span> &lt;span style="color:#000">snapshot&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果 ReadOptions 的 snapshot 不为空，则使用这个 Sequence Number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 否则，默认使用 LastSequence
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#000">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">static_cast&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">SnapshotImpl&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>(&lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">snapshot&lt;/span>)&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">sequence_number&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">versions_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">LastSequence&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// MemTable、Immutable Memtable 和 Current Version 增加引用计数，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 避免在读取过程中被后台线程 Compaction 时垃圾回收
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">MemTable&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">mem&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">mem_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MemTable&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">imm_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Version 主要用来维护 SST 文件的版本信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">current&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">versions_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">current&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mem&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Ref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>) &lt;span style="color:#000">imm&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Ref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Ref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">have_stat_update&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">GetStats&lt;/span> &lt;span style="color:#000">stats&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Unlock while reading from files and memtables
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// First look in the memtable, then in the immutable memtable (if any).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LookupKey&lt;/span> &lt;span style="color:#000">lkey&lt;/span>(&lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#000">snapshot&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 查找过程：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 1、从 MemTable 查找
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">mem&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">lkey&lt;/span>, &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">s&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 从 Immutable Memtable 查找
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> } &lt;span style="color:#a90d91">else&lt;/span> &lt;span style="color:#000">if&lt;/span> (&lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">imm&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">lkey&lt;/span>, &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">s&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 从 SSTable 文件中查找
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> } &lt;span style="color:#a90d91">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">lkey&lt;/span>, &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">stats&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">have_stat_update&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Lock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 更新 SST 文件的统计信息，根据统计结果决定是否调度后台 Compaction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">have_stat_update&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">UpdateStats&lt;/span>(&lt;span style="color:#000">stats&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MaybeScheduleCompaction&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// MemTable、Immutable Memtable 和 Current Version 减少引用计数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">mem&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>) &lt;span style="color:#000">imm&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>注意：MemTable、Immutable Memtable 和 Current Version 查找不需要加锁，因为前两个是 SkipList，其读操作是线程安全的，只需要通过引用计数保证数据结构不被回收即可。Current Version 内部是 SSTable 文件，都是只读操作，也无需加锁。&lt;/p></description></item><item><title>Docs: LevelDB-05Cache</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-05Cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-05Cache/</guid><description>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>为了读取效率使用了 Cache 机制。主要是 Table Cache 和 Block Cache 两类。&lt;/p>
&lt;p>Table Cache 主要是缓存 SST 文件的 data block index，Block Cache 主要是缓存 data block。&lt;/p>
&lt;h2 id="通用接口">通用接口&lt;/h2>
&lt;p>代码：include/leveldb/cache.h&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">Cache&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cache&lt;/span>() &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cache&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#a90d91">operator&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Destroys all existing entries by calling the &amp;#34;deleter&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 调用 deleter 删除所有 entries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">Cache&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Opaque handle to an entry stored in the cache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 存储的 entry，除了kv还有一些维护信息，这里是通用接口所以没有定义
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">Handle&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 插入kv，charge 表示本次插入操作对cache容量的消耗
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// entry 被淘汰是，使用 deleter 进行删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>)) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 查找接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 释放 handle
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Release&lt;/span>(&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handle&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取 handle 的 value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Value&lt;/span>(&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handle&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除对应 key 记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 真正的存储记录，所有相关的 handles 都释放了才会被删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Erase&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 生成 cacheid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">uint64_t&lt;/span> &lt;span style="color:#000">NewId&lt;/span>() &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除 lru_ 链上的记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Prune&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// cache 的开销，Insert 接口传入 charge 之和
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">TotalCharge&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="lruhandle">LRUHandle&lt;/h2>
&lt;p>代码：util/cache.cc&lt;/p>
&lt;p>LRUHandle 类主要用于自定义的 hashtable 和 LRU 中的节点。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">LRUHandle&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除器，refs==0 调用deleter完成value对象释放
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// HashTable 节点，指向hash值相同的节点（采用链地址法解决hash冲突）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">next_hash&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// LRUCache 节点，指向后继
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// LRUCache 节点，指向前驱
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">prev&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 用户指定占用缓存的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>; &lt;span style="color:#177500">// TODO(opt): Only allow uint32_t?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">key_length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">in_cache&lt;/span>; &lt;span style="color:#177500">// Whether entry is in the cache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">refs&lt;/span>; &lt;span style="color:#177500">// References, including cache reference, if present.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>; &lt;span style="color:#177500">// Hash of key(); used for fast sharding and comparisons
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">char&lt;/span> &lt;span style="color:#000">key_data&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>]; &lt;span style="color:#177500">// Beginning of key
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="lrucache">LRUCache&lt;/h2>
&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LRUCache&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">LRUCache&lt;/span>(); &lt;span style="color:#177500">// 初始化双向链表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">LRUCache&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Separate from constructor so caller can easily make an array of LRUCache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">SetCapacity&lt;/span>(&lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">capacity&lt;/span>) { &lt;span style="color:#000">capacity_&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">capacity&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Like Cache methods, but with an extra &amp;#34;hash&amp;#34; parameter.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 插入数据到 Cache 中，这里保存节点的 hash 值，方便快速比对
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 查询目标节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 释放句柄(操作引用)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Release&lt;/span>(&lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handle&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 从缓存中删除节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Erase&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 手动检测是否有需要删除的节点，发生在节点超过容量之后
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Prune&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 当前缓存中数据所占用的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">TotalCharge&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">usage_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">LRU_Remove&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">LRU_Append&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">list&lt;/span>, &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 增加引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Ref&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 节点引用为0，调用 free 函数，否则只能移动
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Unref&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">FinishErase&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>) &lt;span style="color:#000">EXCLUSIVE_LOCKS_REQUIRED&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Initialized before use.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// LRU 容量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">capacity_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// mutex_ protects the following state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// id 生成锁，保护 LRUCache 操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">mutable&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Mutex&lt;/span> &lt;span style="color:#000">mutex_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取 LRUCache 已经使用的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">usage_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Dummy head of LRU list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// lru.prev is newest entry, lru.next is oldest entry.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Entries have refs==1 and in_cache==true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 只存在缓存中的节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span> &lt;span style="color:#000">lru_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Dummy head of in-use list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Entries are in use by clients, and have refs &amp;gt;= 2 and in_cache==true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 既存在缓存中，又被外部引用的节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span> &lt;span style="color:#000">in_use_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 用户快速获取某个节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">HandleTable&lt;/span> &lt;span style="color:#000">table_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>LRU 中元素不仅在 cache 中，也可能会被外部引用，不能直接删除节点&lt;/li>
&lt;li>某个节点被修改或引用，空间不足不能参与 LRU 计算&lt;/li>
&lt;li>in_use 表示既在 cache 中，也被外部引用&lt;/li>
&lt;li>table_ 记录 key 和节点的映射关系，通过key可以快速定位到某个节点&lt;/li>
&lt;li>调用 insert/LookUp 之后，必须使用 Release 释放句柄&lt;/li>
&lt;/ul>
&lt;h3 id="insert函数">Insert函数&lt;/h3>
&lt;p>代码：util/cache.cc&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">LRUCache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 加锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 创建节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">reinterpret_cast&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>(&lt;span style="color:#000">malloc&lt;/span>(&lt;span style="color:#a90d91">sizeof&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>) &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">size&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">deleter&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">deleter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">charge&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">charge&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">key_length&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">size&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">hash&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">hash&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">in_cache&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 引用数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>; &lt;span style="color:#177500">// for the returned handle.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memcpy&lt;/span>(&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">key_data&lt;/span>, &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">data&lt;/span>(), &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 容量大于0时开启缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">capacity_&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 会放入缓存中，因此存在两个地方，引用数加1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span>&lt;span style="color:#000">++&lt;/span>; &lt;span style="color:#177500">// for the cache&amp;#39;s reference.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">in_cache&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 外部会引用，所以节点需要放在 in_use_ 链上
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRU_Append&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">in_use_&lt;/span>, &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 加上新增的字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">usage_&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#000">charge&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果存在该节点，需要将老的节点释放
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">FinishErase&lt;/span>(&lt;span style="color:#000">table_&lt;/span>.&lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#000">e&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> { &lt;span style="color:#177500">// don&amp;#39;t cache. (capacity_==0 is supported and turns off caching.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// next is read by key() in an assert, so it must be initialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">next&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 当cache容量不够，有空余的节点需要进行 LRU 策略淘汰
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 注意 in_use_ 中的节点不能被淘汰，因为被外部引用了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">usage_&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">capacity_&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">lru_&lt;/span>.&lt;span style="color:#000">next&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">lru_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">old&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">lru_&lt;/span>.&lt;span style="color:#000">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">erased&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">FinishErase&lt;/span>(&lt;span style="color:#000">table_&lt;/span>.&lt;span style="color:#000">Remove&lt;/span>(&lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">key&lt;/span>(), &lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">hash&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">erased&lt;/span>) { &lt;span style="color:#177500">// to avoid unused variable when compiled NDEBUG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">erased&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#a90d91">reinterpret_cast&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>(&lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="ref-unref函数">ref/Unref函数&lt;/h3>
&lt;p>代码：util/cache.cc&lt;/p>
&lt;p>Ref&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">LRUCache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Ref&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">in_cache&lt;/span>) { &lt;span style="color:#177500">// If on lru_ list, move to in_use_ list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRU_Remove&lt;/span>(&lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">LRU_Append&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">in_use_&lt;/span>, &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span>&lt;span style="color:#000">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Unref
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>void LRUCache::Unref(LRUHandle* e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(e-&amp;gt;refs &amp;gt; 0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 引用减1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e-&amp;gt;refs--;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (e-&amp;gt;refs == 0) { // Deallocate.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(!e-&amp;gt;in_cache);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (*e-&amp;gt;deleter)(e-&amp;gt;key(), e-&amp;gt;value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } else if (e-&amp;gt;in_cache &amp;amp;&amp;amp; e-&amp;gt;refs == 1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // No longer in use; move to lru_ list.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 仅在缓存中且引用数为1，将其从 in_use_ 中删除，放到 LRU 中
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LRU_Remove(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LRU_Append(&amp;amp;lru_, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p></description></item><item><title>Docs: LevelDB-06Compaction</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-06Compaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-06Compaction/</guid><description>
&lt;h2 id="分类">分类&lt;/h2>
&lt;p>LevelDB 中，compaction 有两种：&lt;/p>
&lt;ul>
&lt;li>minor compaction&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>immutable memtable 持久化为 sst 文件&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>major compaction&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>sst 文件之间的 compaction&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>* Manual Compaction：人工触发，外部接口调用产生
* Size Compaction：每个 level 文件大小超过一定阈值就会触发
* Seek Compaction：一个文件的 seek miss 次数超过阈值就会触发
&lt;/code>&lt;/pre>
&lt;p>优先级：Minor &amp;gt; Manual &amp;gt; Size &amp;gt; Seek&lt;/p>
&lt;h2 id="成员变量">成员变量&lt;/h2>
&lt;p>代码：&lt;/p>
&lt;p>db/version_set.h&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 需要压缩的 level
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">level_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 压缩之后最大的文件大小，等于 options-&amp;gt;max_file_size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">uint64_t&lt;/span> &lt;span style="color:#000">max_output_file_size_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 当前操作的版本
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">input_version_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 版本变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">VersionEdit&lt;/span> &lt;span style="color:#000">edit_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Each compaction reads inputs from &amp;#34;level_&amp;#34; and &amp;#34;level_+1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// level 和 level 两层需要参与压缩的文件元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">vector&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">FileMetaData&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span> &lt;span style="color:#000">inputs_&lt;/span>[&lt;span style="color:#1c01ce">2&lt;/span>]; &lt;span style="color:#177500">// The two sets of inputs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// State used to check for number of overlapping grandparent files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// (parent == level_ + 1, grandparent == level_ + 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// grandparents元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">vector&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">FileMetaData&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span> &lt;span style="color:#000">grandparents_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// grandparent下标索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">grandparent_index_&lt;/span>; &lt;span style="color:#177500">// Index in grandparent_starts_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">seen_key_&lt;/span>; &lt;span style="color:#177500">// Some output key has been seen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 当前压缩与grandparent元数据重叠的字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int64_t&lt;/span> &lt;span style="color:#000">overlapped_bytes_&lt;/span>; &lt;span style="color:#177500">// Bytes of overlap between current output
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// and grandparent files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// State for implementing IsBaseLevelForKey
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// level_ptrs_ holds indices into input_version_-&amp;gt;levels_: our state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// is that we are positioned at one of the file ranges for each
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// higher level than the ones involved in this compaction (i.e. for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// all L &amp;gt;= level_ + 2).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 记录某个 user_key 与 &amp;gt;= level+2 中每一层不重叠的文件个数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">level_ptrs_&lt;/span>[&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">kNumLevels&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="主要函数">主要函数&lt;/h2>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Return the level that is being compacted. Inputs from &amp;#34;level&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// and &amp;#34;level+1&amp;#34; will be merged to produce a set of &amp;#34;level+1&amp;#34; files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 返回将要压缩的 level 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">level&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">level_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Return the object that holds the edits to the descriptor done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// by this compaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">VersionEdit&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">edit&lt;/span>() { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">edit_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// &amp;#34;which&amp;#34; must be either 0 or 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 返回对应层级参与压缩的文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">num_input_files&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">which&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">inputs_&lt;/span>[&lt;span style="color:#000">which&lt;/span>].&lt;span style="color:#000">size&lt;/span>(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Return the ith input file at &amp;#34;level()+which&amp;#34; (&amp;#34;which&amp;#34; must be 0 or 1).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 获取某一层第 i 个文件的 sst 元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">FileMetaData&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">input&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">which&lt;/span>, &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">i&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">inputs_&lt;/span>[&lt;span style="color:#000">which&lt;/span>][&lt;span style="color:#000">i&lt;/span>]; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Maximum size of files to build during this compaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 本次压缩产生的最大文件大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">uint64_t&lt;/span> &lt;span style="color:#000">MaxOutputFileSize&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">max_output_file_size_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Is this a trivial compaction that can be implemented by just
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// moving a single input file to the next level (no merging or splitting)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 表示本地是否可以将本次 sst 直接移动到上一层
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">IsTrivialMove&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Add all inputs to this compaction as delete operations to *edit.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 添加所有需要删除 sst 文件到 *edit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// input 经过变化生成 output，input对应 deleted_file 容器，output进入 added_file 容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// add时先忽略 deleted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">AddInputDeletions&lt;/span>(&lt;span style="color:#000">VersionEdit&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">edit&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Returns true if the information we have available guarantees that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// the compaction is producing data in &amp;#34;level+1&amp;#34; for which no data exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// in levels greater than &amp;#34;level+1&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 判断当前user_key在 &amp;gt;=(level+2) 层中是否存在。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 主要用于key的 type=deletion 时是否将该 key 删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">IsBaseLevelForKey&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">user_key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Returns true iff we should stop building the current output
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// before processing &amp;#34;internal_key&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 是否需要停止输出，生成新的SST，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 避免合并到 level+1 层之后和 level+2 层重叠太多，导致下次合并level+1时间太久
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">ShouldStopBefore&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">internal_key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Release the input version for the compaction, once the compaction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// is successful.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 释放内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">ReleaseInputs&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="minor-compaction">Minor Compaction&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>immutable memtable 持久化为 sst 文件。&lt;/p>
&lt;h3 id="触发条件">触发条件&lt;/h3>
&lt;p>Wirte 新数据进入 LevelDB 时，会在适当的时机检查内存中 Memtable 占用内存大小，一旦超过 options_.write_buffer_size (默认4M)，就会尝试 Minor Compaction。&lt;/p>
&lt;h3 id="执行过程">执行过程&lt;/h3>
&lt;ul>
&lt;li>DBImpl::BackgroundCompaction -&amp;gt; DBImpl::CompactMemTable -&amp;gt; DBImpl::WriteLevel0Table
&lt;ul>
&lt;li>BuildTable：将 immutable memtable 格式化成 sstable 文件。&lt;/li>
&lt;li>PickLevelForMemTableOutput：计算新生成的sstable所属的层级。&lt;/li>
&lt;li>edit-&amp;gt;AddFile()：将新sst文件放置到第2步选出的level中。
策略上尽量将新 compact 文件推至高 level。因为如果 level0 需要控制的文件过多，compaction IO 和查找都比较耗费。另一方面也不能推至过高level，某些范围的key更新比较频繁，后续往高层 compaction IO 消耗也很大。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="层级选择">层级选择&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>新 sst key 范围和 level0 的某个或某几个 sst 文件是否有重叠&lt;/p>
&lt;ul>
&lt;li>是，level = 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，新 sst key 范围和 level1 的某个或某几个 sst 文件是否有重叠&lt;/p>
&lt;ul>
&lt;li>是，level = 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，level2 文件中与新 sst 有重叠文件个数过多，size之和是否超过阈值&lt;/p>
&lt;ul>
&lt;li>是，level = 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，新 sst key 范围和 level2 的某个或某几个 sst 文件是否有重叠&lt;/p>
&lt;ul>
&lt;li>是，level = 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，level3 文件与新 sst 重叠文件个数过多，size之和是否超过阈值&lt;/p>
&lt;ul>
&lt;li>是，level = 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，level = 2
基本判断原则：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当前level n，推向下一层level的条件是：与 level n+1 不能重叠，与 level n+2 重叠的文件大小不能超过阈值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>level 最大不超过2&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="major-compaction">Major Compaction&lt;/h2>
&lt;p>Major compaction 是将不同层级的 sst 的文件进行合并。&lt;/p>
&lt;p>作用：&lt;/p>
&lt;ul>
&lt;li>将不活跃的数据下沉，均衡各个level的数据，保证 read 的性能&lt;/li>
&lt;li>合并 delete 数据，释放磁盘空间，因为删除是标记删除&lt;/li>
&lt;li>合并 update 数据，例如put同一个key，类似于 delete，是采用的标记插入新的数据，实际的update是在compact中完成，并实现空间的释放&lt;/li>
&lt;/ul>
&lt;h3 id="size-compaction">Size Compaction&lt;/h3>
&lt;h4 id="定义-1">定义&lt;/h4>
&lt;p>LevelDB 的核心 Compact 过程，其主要是为了均衡各个level的数据，从而保证读写的性能均衡。&lt;/p>
&lt;p>主要是指某一层 sst 文件不能太大，这个大对 level0 层来说是 sst 文件过多，因为 level0 层会被频繁访问，而对于其他层表示字节数太大，具体见Builder类的Finalize函数。&lt;/p>
&lt;h4 id="触发条件-1">触发条件&lt;/h4>
&lt;p>LevelDB 会计算每个level的总的文件大小，并根据此计算出一个score，最后会根据这个score来选择合适level和文件进行Compact。具体得分原则见：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">VersionSet&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Finalize&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>进行 Compation 时，判断得分是否大于 1，是则进行 Size Compaction。代码见：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">VersionSet&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">PickCompaction&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h4 id="执行过程-1">执行过程&lt;/h4>
&lt;ul>
&lt;li>score计算：各 level 触发得分，得到 compaction 层级（VersionSet::Finalize）
&lt;ul>
&lt;li>level0: level0文件总数 / 4&lt;/li>
&lt;li>其它 level：当前level所有文件size之和 / 当前 level 阈值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>寻找 compaction 的文件，如 level n：
&lt;ul>
&lt;li>确定 level n 参与 compation 的文件列表 ，存入inputs_[0] （核心函数：VersionSet::PickCompaction）&lt;/li>
&lt;li>确定 level n+1 参与 compation 的文件列表，存入inputs_[1]（核心函数：VersionSet::SetupOtherInputs）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="seek-compaction">Seek Compaction&lt;/h3>
&lt;h4 id="定义-2">定义&lt;/h4>
&lt;p>主要记录的是某个 sst seek 次数到达阈值之后，将会参与下一次压缩。&lt;/p>
&lt;p>LevelDB 认为如果一个 sst 文件在 level i 中总是没总到，而是在 level i+1 中找到，这说明两层之间key的范围重叠很严重。当这种 seek miss 积累到一定次数之后，就考虑将其从 level i 中合并到 level i+1 中，这样可以避免不必要的 seek miss 消耗 read I/O。&lt;/p>
&lt;h4 id="触发条件-2">触发条件&lt;/h4>
&lt;p>当 allowed_seeks 递减到小于0了，将标记为需要 compation 的文件。但是由于 Size Compaction 优先级高于 Seek Compaction，所以在不存在 Size Compaction 时且触发了Compaction，Seek Compaction 就能执行。&lt;/p>
&lt;h4 id="执行过程-2">执行过程&lt;/h4>
&lt;ul>
&lt;li>获取 compaction 文件（Version::UpdateStats）&lt;/li>
&lt;li>寻找 compaction 的文件，如 level n：
&lt;ul>
&lt;li>确定 level n 参与 compation 的文件列表 ，存入inputs_[0] （核心函数：VersionSet::PickCompaction）&lt;/li>
&lt;li>确定 level n+1 参与 compation 的文件列表，存入inputs_[1]（核心函数：VersionSet::SetupOtherInputs）
具体代码见：DBImpl::DoCompactionWork&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="manual-compact">Manual Compact&lt;/h3>
&lt;h4 id="定义-3">定义&lt;/h4>
&lt;p>人工触发的Compaction，由外部接口调用产生。实际内部触发调用的接口是 DBImpl 中的&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// begin/end 表示 compaction 的范围
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// begin/end 为 null 时，表示尝试 compact 所有文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">CompactRange&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">begin&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">end&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Manual Compaction 中会指定 begin 和 end。它将会逐个 level 分次的 Compact 所有level 中与 begin 和 end 有重叠（overlap）的 sst 文件。&lt;/p>
&lt;h4 id="触发条件-3">触发条件&lt;/h4>
&lt;p>人工触发，由外部调用。&lt;/p>
&lt;h4 id="执行过程-3">执行过程&lt;/h4>
&lt;ul>
&lt;li>遍历所有level，获取到最大重叠的层级（核心函数：OverlapInLevel）&lt;/li>
&lt;li>强制将当前的 memtable 进行 minor compation。（核心函数：TEST_CompactMemTable）&lt;/li>
&lt;li>遍历重叠的层级进行 major compation（核心函数：TEST_CompactRange）&lt;/li>
&lt;li>真正的 compation（核心函数：VersionSet::CompactRange）&lt;/li>
&lt;/ul></description></item><item><title>Docs: PostgreSQL</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>PostgreSQL&lt;/p></description></item><item><title>Docs: LevelDB</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>LevelDB&lt;/p></description></item></channel></rss>