<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Herbdocs – annotation</title><link>/tags/annotation/</link><description>Recent content in annotation on Herbdocs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/annotation/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: spring注解驱动+源码</title><link>/docs/21.Java/08.%E6%A1%86%E6%9E%B6/Spring/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8+%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/21.Java/08.%E6%A1%86%E6%9E%B6/Spring/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8+%E6%BA%90%E7%A0%81/</guid><description>
&lt;h2 id="组件注册">组件注册&lt;/h2>
&lt;p>给容器中注入组件&lt;/p>
&lt;h3 id="1-包扫描-组件标注注解">1）包扫描+组件标注注解&lt;/h3>
&lt;p>（@Controller/@Service/@Repository/@Component）&lt;/p>
&lt;h3 id="2-bean导入">2）@Bean导入&lt;/h3>
&lt;p>[导入的第三方包里面的组件]&lt;/p>
&lt;h3 id="3-import">3）@Import&lt;/h3>
&lt;p>[快速给容器中导入一个组件]，查看源码，可以看到有三种导入方法&lt;/p>
&lt;h4 id="3-1-import">3.1）@Import&lt;/h4>
&lt;p>(要导入到容器中的组件)：容器找那个就会自动注册这个组件，id默认是全类名&lt;/p>
&lt;h4 id="3-2-importselector">3.2）ImportSelector&lt;/h4>
&lt;p>返回需要导入的全类名数组(注意：可以返回空数组，但不要返回null)&lt;/p>
&lt;h4 id="3-3-importbeandefinitionregistrar">3.3）ImportBeanDefinitionRegistrar&lt;/h4>
&lt;p>注：在Config的类上注，如下&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>@Import({Color.class,Red.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>//@Import(Color.class)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@Configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public class Config{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Lazy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Bean(&amp;#34;person&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public Person person() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return new Person();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public class MyImportSelector implements ImportSelector {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 返回值，就是要导入到容器中的组件全类名
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Override
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public String[] selectImports(AnnotationMetadata importingClassMetadata) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 不要返回null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return new String[]{&amp;#34;com.xxx.xxx.Yellow&amp;#34;,&amp;#34;com.xxx.xxx.Blue&amp;#34;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // AnnotationMetadata: 当前类的注解信息
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // BeanDefinitionRegistry: BeanDefinition注册类，把所有需要添加到容器中的类注册进去.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 调用BeanDefinitionRegistry.registerBeanDefinition手工注册
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Override
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry beanDefinitionRegistry) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boolean definition = registry.containBeanDefinition(&amp;#34;red&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (definition) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="4-使用factorybean-工厂bean">4）使用FactoryBean（工厂Bean）&lt;/h3>
&lt;p>4.1）默认获取到的是工厂bean调用getObject创建的对象&lt;/p>
&lt;p>4.2）要获取工厂Bean本身，需要在id前面加一个&amp;amp;（查看FactoryBean接口源码，定义了常量）&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>public class ColorFactoryBean implements FactoryBean&amp;lt;Color&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 返回一个对象，该对象会添加到容器中
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Override
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public Color getObject() throws Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return new Color();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Override
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public Class&amp;lt;?&amp;gt; getObjectType() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return Color.class;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // ture：容器中只保留一份
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // false: 多份
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Override
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public boolean isSingleton() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reutrn false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@Configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public class Config{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Bean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public ColorFactoryBean colorFactoryBean() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return new ColorFactoryBean();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="生命周期">生命周期&lt;/h2>
&lt;h3 id="指定初始化和销毁方法">指定初始化和销毁方法&lt;/h3>
&lt;p>1、指定初始化方法和销毁方法&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>@ComponentSan(&amp;#34;com.xxx.bean&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@Configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public class MainConfigOfLifeCycle {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 指定car中定义的方法
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Bean(initMethod=&amp;#34;init&amp;#34;, destroyMethod=&amp;#34;destroy&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public Car car() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> returen new Car();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>2、通过让Bean实现InitializingBean（定义初始化逻辑） 、DisposableBean（定义销毁逻辑）
3、可以使用JSR250，在bean定义的方法上加上以下注解 @PostConstruct：bean创建完成 @PreDestroy：容易移除bean之前&lt;/p>
&lt;p>4、BeanPostProcessor接口，bean的后置处理器；在bean初始化前后进行一些处理工作； postProcessBeforeInitialization(Object object, xxx); postProcessAfterInittialization(Object object, xxx);&lt;/p>
&lt;h3 id="instantiationawarebeanpostprocessor">InstantiationAwareBeanPostProcessor&lt;/h3>
&lt;p>其方法postProcessAfterInstantiation，可以根本Object bean判断需要实例话的方法，或者全部不实例化&lt;/p>
&lt;h2 id="aop">AOP&lt;/h2>
&lt;h3 id="enableaspectjautoproxy">@EnableAspectJAutoProxy&lt;/h3>
&lt;p>1、@Import(AspectJAutoProxyRegistrar.class 给容器中导入AspectJAutoProxyRegistrar，&lt;/p>
&lt;p>利用AspectJAutoProxyRegistrar自定义给容器中注册bean。&lt;/p>
&lt;p>internalAutoProxyCreator = AnnotationAwareAspectJAutoProxyCreator&lt;/p>
&lt;p>给容器中注册一个AnnotationAwareAspectJAutoProxyCreator&lt;/p>
&lt;p>2、AnnotationAwareAspectJAutoProxyCreator&lt;/p>
&lt;p>类的继承关系&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AnnotationAwareAspectJAutoProxyCreator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AspectJAwareAdvisorAutoProxyCreator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AbstractAdvisorAutoProxyCreator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AbstractAutoProxyCreator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impl&lt;/span> &lt;span style="color:#000">SmartInstantiationAwareBeanPostProcessor&lt;/span>&lt;span style="color:#000">,&lt;/span> &lt;span style="color:#000">BeanFactoryAware&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">//关注后置处理器、自动装配bean
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>类的主要方法
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AbstractAutoProxyCreator&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">setBeanFactory&lt;/span>&lt;span style="color:#000">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AbstractAutoProxyCreator&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">后置处理器逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AbstractAdvisorAutoProxyCreator&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">setBeanFactory&lt;/span>&lt;span style="color:#000">()-&amp;gt;&lt;/span>&lt;span style="color:#000">initBeanFactory&lt;/span>&lt;span style="color:#000">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">AnnotationAwareAspectJAutoProxyCreator&lt;/span>&lt;span style="color:#000">.&lt;/span>&lt;span style="color:#836c28">initBeanFactory&lt;/span>&lt;span style="color:#000">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h3 id="调用流程">调用流程&lt;/h3>
&lt;p>1、传入配置类，创建ioc容器&lt;/p>
&lt;p>2、注册配置类，调用refresh()刷新容器&lt;/p>
&lt;p>3、registerBeanPostProcessors(beanFactory);注册bean的后置处理器来拦截bean的创建&lt;/p>
&lt;p>3.1、先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor&lt;/p>
&lt;p>3.2、给容器中加别的BeanPostProcessor&lt;/p>
&lt;p>3.3、优先注册实现了PriorityOrdered接口的BeanPostProcessor&lt;/p>
&lt;p>3.4、再给容器中注册实现了Ordered接口的BeanPostProcessor&lt;/p>
&lt;p>3.5、没实现优先级接口的BeanPostProcessor&lt;/p>
&lt;p>3.6、注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中。&lt;/p>
&lt;p>创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】&lt;/p>
&lt;p>3.6.1、创建bean的实例&lt;/p>
&lt;p>3.6.2、populateBean：给bean各种属性赋值&lt;/p>
&lt;p>3.6.3、initializeBean：初始化bean&lt;/p>
&lt;p>3.6.3.1、invokeAwareMethods()：处理Aware接口的方法回调&lt;/p>
&lt;p>3.6.3.2、applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的BeforeInitialization&lt;/p>
&lt;p>3.6.3.3、invokeInitMethods()：执行自定义的初始化方法&lt;/p>
&lt;p>3.6.3.4、applyBeanPostProcessorsAfterInitialization()：执行后置处理器的postProcessAfterInitialization()&lt;/p>
&lt;p>3.6.4、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)&lt;/p>
&lt;p>3.7、把BeanPostProcessor注册到BeanFactory中：&lt;/p>
&lt;p>beanFactory.addBeanPostProcessor(postProcessor);&lt;/p>
&lt;p>===以上是创建和注册AnnotationAwareAspectJAutoProxyCreator的过程===&lt;/p>
&lt;p>4、finishBeanFactoryInitialization(beanFactory);完成BeanFactory初始话工作，创建剩下的单实例bean&lt;/p>
&lt;p>4.1、编译获取容器中所有的bean，依次创建对象getBean(beanName);&lt;/p>
&lt;p>getBean-&amp;gt;doGetBean()-&amp;gt;getSingleton()&lt;/p>
&lt;p>4.2、创建bean&lt;/p>
&lt;p>【AnnotationAwareAspectJAutoProxyCreator在所有bean创建之前会有一个拦截，InstantiationAwareBeanPostProcessor，会调用postProcessBeforeInstantiation()】&lt;/p>
&lt;p>4.2.1、先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过直接使用，否则再创建；只要创建好的bean都会被缓存起来&lt;/p>
&lt;p>4.2.2、createBean(); 创建bean; AnnotationAwareAspectJAutoProxyCreator会在任何bean创建之前尝试返回bean的实例&lt;/p>
&lt;p>【BeanPostProcessor是在Bean对象创建完成初始化前后调用的】&lt;/p>
&lt;p>【InstantiationAwareBeanPostProcessor是在创建Bean实例之前先尝试用后置处理器返回对象的】&lt;/p>
&lt;p>4.2.2.1、resolveBeforeInstantiation(beanName, mbdToUse); 解析BeforeInstantiation&lt;/p>
&lt;p>希望后置处理器在次能返回一个代理对象，如果不能就继续&lt;/p>
&lt;p>4.2.2.1.1、后置处理器先尝试返回对象；&lt;/p>
&lt;p>bean=applyBeanPostProcessorsBeforeInstantiation()&lt;/p>
&lt;p>拿到所有后置处理器，如果是InstanttiationAwareBeanPostProcessor，就执行postProcessBeforeInstantiation&lt;/p>
&lt;p>if (bean != null) {&lt;/p>
&lt;p>bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>4.2.2.2、doCreateBean(beanName, mbdToUse, args); 真正地去创建一个bean实例；和3.6流程一致&lt;/p>
&lt;h3 id="processor的作用">processor的作用&lt;/h3>
&lt;p>AnnotationAwareAspectJAutoProxyCreator【InstanttiationAwareBeanPostProcessor】的作用：&lt;/p>
&lt;p>1、每一个bean创建之前，调用postProcessBeforeInstantiation();&lt;/p>
&lt;p>关心MathCalculator和LogAspect的创建&lt;/p>
&lt;p>1.1、判断当前bean是否在advisedBeans中（保存了所有需要增强bean）&lt;/p>
&lt;p>1.2、判断当前bean是否是基本类型Advice/PointCut/Adivsor/AopInfrastructureBean，或者是否为切面(@Aspect)&lt;/p>
&lt;p>1.3、是否需要跳过&lt;/p>
&lt;p>1.3.1、获取候选的增强器（切面里面的通知方法）【List&lt;Advisor> candidateAdvisors】&lt;/p>
&lt;p>每一个封装的通知方法的增强器是InstantiationModelAwarePointcutAdvisor;&lt;/p>
&lt;p>判断每一个增强器是否是AspectJPointcutAdvisor类型的，返回true&lt;/p>
&lt;p>1.3.2、永远返回false&lt;/p>
&lt;p>2、创建对象&lt;/p>
&lt;p>postProcessAfterInitialization;&lt;/p>
&lt;p>return wrapIfNecessary(bean, beanName, cacheKey);//包装如果需要的情况下&lt;/p>
&lt;p>2.1、获取当前bean的所有增强器（通知方法）Object[] specificInterceptors&lt;/p>
&lt;p>2.1.1、找到能在当前bean使用的增强器（找哪些通知方法是需要切入当前bean方法的）&lt;/p>
&lt;p>2.1.2、获取到能在bean使用的增强器。&lt;/p>
&lt;p>2.1.3、给增强排序&lt;/p>
&lt;p>2.2、保存当前bean在advisedBeans中&lt;/p>
&lt;p>2.3、如果当前bean需要增强，创建当前bean的代理对象&lt;/p>
&lt;p>2.3.1、获取所有增强器（通知方法）&lt;/p>
&lt;p>2.3.2、保存到proxyFactory&lt;/p>
&lt;p>2.3.3、创建代理对象，spring自动决定（jdk、cglib）&lt;/p>
&lt;p>2.4、给容器中返回当前组件使用cglib增强了的代理对象&lt;/p>
&lt;p>2.5、以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法的流程&lt;/p>
&lt;p>3、目标方法的执行&lt;/p>
&lt;p>容器中保存了组件的代理对象（cglib增强后的对象），这个对象里面保存了详细信息（比如增强器，目标对象，xxx）；&lt;/p>
&lt;p>3.1、CglibAopProxy.intercept(); 拦截目标方法的执行&lt;/p>
&lt;p>3.2、根据ProxyFactory对象获取将要执行的目标方法的拦截器链;&lt;/p>
&lt;p>List&lt;Object> chain=this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);&lt;/p>
&lt;p>3.2.1、List&lt;Object> interceptroList保存所有拦截器5&lt;/p>
&lt;p>1个默认的ExposeInvocationInterceptor和4个增强器&lt;/p>
&lt;p>3.2.2、遍历所有的增强器，将其转为Interceptor;&lt;/p>
&lt;p>registry.getInterceptors(advisor);&lt;/p>
&lt;p>3.2.3、将增强器转为List&lt;MethodInterceptor>;&lt;/p>
&lt;p>如果是MethodInterceptor，直接加入到集合中；如果不是使用AdvisorAdapter将增强器转为MethodInterceptor；转换完成返回MethodInterceptor数组；&lt;/p>
&lt;p>3.3、如果没有拦截器链，直接执行目标方法&lt;/p>
&lt;p>拦截器链（每一个通知方法又被包装成方法拦截器，利用MethodInterceptor机制）&lt;/p>
&lt;p>3.4、如果有拦截器链，把需要执行的目标对象、目标方法、拦截器等信息传入创建一个CglibMethodInvocation对象，并调用Object retVal = mi.proceed();&lt;/p>
&lt;p>3.5、拦截器的触发过程&lt;/p>
&lt;p>3.5.1、如果没有拦截器执行目标方法，或者拦截器的索引和拦截器&lt;/p>
&lt;p>3.5.2、链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后来执行；&lt;/p>
&lt;p>拦截器的机制，保证通知方法与目标方法的执行顺序&lt;/p>
&lt;p>拦截器链&lt;/p>
&lt;p>&lt;img src="../imgs/spring_zhujiequdong_source_1.png" alt="spring_zhujiequdong_source_1.png">&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>1、@EnableAspectJAutoProxy开启aop功能&lt;/p>
&lt;p>2、@EnableAspectJAutoProxy会给容器中注册一个组件AnnotationAwareAspectJAutoProxyCreator&lt;/p>
&lt;p>3、AnnotationAwareAspectJAutoProxyCreator是一个后置处理器&lt;/p>
&lt;p>4、容器的创建流程&lt;/p>
&lt;p>4.1、registerBeanPostProcessors()注册后置处理器，创建AnnotationAwareAspectJAutoProxyCreator对象&lt;/p>
&lt;p>4.2、finishBeanFactoryInitailization()初始化剩下的单实例bean&lt;/p>
&lt;p>4.2.1、创建业务逻辑组件和切面组件&lt;/p>
&lt;p>4.2.2、AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程&lt;/p>
&lt;p>4.2.3、组件创建完之后，判断组件是否需要增强&lt;/p>
&lt;p>是：切面的通知方法，包装成增强器（Advisor）；给业务组件创建一个代理对象(cglib)&lt;/p>
&lt;p>5、执行目标方法&lt;/p>
&lt;p>5.1、代理对象执行目标方法&lt;/p>
&lt;p>5.2、CglibAopProxy.intercept();&lt;/p>
&lt;p>5.2.1、得到目标方法的拦截器链，（增强器包装成拦截器MethodInterceptor）&lt;/p>
&lt;p>5.2.2、利用拦截器链式机制，依次进入每一个拦截器进行执行&lt;/p>
&lt;p>5.2.3、效果：&lt;/p>
&lt;p>正常执行：前置通知-&amp;gt;目标方法-&amp;gt;后置通知-&amp;gt;返回通知&lt;/p>
&lt;p>出现异常：前置通知-&amp;gt;目标方法-&amp;gt;后置通知-&amp;gt;异常通知&lt;/p></description></item></channel></rss>