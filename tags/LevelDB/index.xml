<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Herbdocs – LevelDB</title><link>/tags/LevelDB/</link><description>Recent content in LevelDB on Herbdocs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/LevelDB/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: LevelDB-01基本介绍</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-01%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-01%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</guid><description>
&lt;h1 id="简介">简介&lt;/h1>
&lt;h2 id="简介-1">简介&lt;/h2>
&lt;p>LevelDB 是一个key/value型的单机存储引擎，由google开发，并宣布在BSD许可下开放源代码。它是 leveling+ 分区实现的LSM典型代表。&lt;/p>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>key、value支持任意的byte类型数组，不单单支持字符串&lt;/li>
&lt;li>LevelDB 是一个持久化存储的KV系统，将大部分数据存储到磁盘上&lt;/li>
&lt;li>按照记录key值顺序存储数据，并且LevleDb支持按照用户定义的比较函数进行排序&lt;/li>
&lt;li>操作接口简单，包括写/读记录以及删除记录，也支持针对多条操作的原子批量操作。&lt;/li>
&lt;li>支持数据快照（snapshot）功能，使得读取操作不受写操作影响，可以在读操作过程中始终看到一致的数据。&lt;/li>
&lt;li>支持数据压缩（snappy压缩）操作，有效减小存储空间、并增快IO效率。&lt;/li>
&lt;li>LSM典型实现，适合写多读少。&lt;/li>
&lt;/ul>
&lt;h2 id="限制">限制&lt;/h2>
&lt;p>LevelDB 只是一个 C/C++ 编程语言的库，需要封装自己的网络服务器，无法像一般意义的存储服务器（如 MySQL）那样直接用客户端来连接。非关系型数据模型（NoSQL），不支持sql语句，也不支持索引，且一次只允许一个进程访问一个特定的数据库。&lt;/p>
&lt;h2 id="编译与使用">编译与使用&lt;/h2>
&lt;h3 id="源码">源码&lt;/h3>
&lt;p>源码下载&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/google/leveldb.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update --init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>安装三方模块
直接编译因为 third_party 中缺少 googletest 和 benchmark 子模块，需要单独安装。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">cd&lt;/span> third_party
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone git@github.com:google/googletest.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone git@github.com:google/benchmark.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>安装 sqlite3：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt-get install sqlite3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>编译&lt;/p>
&lt;blockquote>
&lt;p>注意避免修改了源码文件导致编译失败。&lt;/p>
&lt;/blockquote>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">cd&lt;/span> leveldb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p build &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a90d91">cd&lt;/span> build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># release版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmake -DCMAKE_BUILD_TYPE&lt;span style="color:#000">=&lt;/span>Release .. &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> cmake --build .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 或debug版&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmake -DCMAKE_BUILD_TYPE&lt;span style="color:#000">=&lt;/span>Debug .. &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> cmake --build .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>编译Demo
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 头文件加入系统目录(可选)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -r ./include/leveldb /usr/include/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp build/libleveldb.a /usr/local/lib/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 编写demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 编译demo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g++ -o xxx xxx.cpp libleveldb.a -lpthread
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="压测">压测&lt;/h2>
&lt;p>参照源码中的 benchmarks 目录&lt;/p>
&lt;h1 id="整体架构">整体架构&lt;/h1>
&lt;p>&lt;img src="../imgs/20230108_leveldb01_1.png" alt="20230108_leveldb01_1.png">&lt;/p>
&lt;p>LevelDB 作为存储系统，数据记录的存储介质包括内存以及磁盘文件。写数据时，接口会同时写入 MemTable（内存）和 Log 文件。当 MemTable 达到阈值时，MemTable 会冻结变成 Immutable MemTable（内存），并将数据写入 SSTable（磁盘上）中，在此同时会生成新的 MemTable 及 Log 文件供新的数据写入。&lt;/p>
&lt;h2 id="log文件">Log文件&lt;/h2>
&lt;p>LevelDB 写操作不是直接写入磁盘，而是先写入内存。加入写入到内存的数据还未来得及持久化，发生异常或者服务器宕机等会造成写入的数据丢失。因此，在写入内存之前会首先将所有的写操作写入日志文件中（其它存储系统都是这种通用做法）。每次写操作都是通过 append 方式顺序写入，整体写入性能好效率高。&lt;/p>
&lt;h2 id="memtable">Memtable&lt;/h2>
&lt;p>写入操作并不是直接将数据写入到磁盘文件，而是采用先将数据写入内存的方式。memtable 就是使用跳表实现的内存数据结构。数据按用户定义的方法排序之后按序存储，等到其存储内容到达阈值时（4MB）时，便将其转换成一个不可修改的 memtable，与此同时创建一个新的memtable 来供用户进行读写操作。因为使用跳表，它的大多数操作都是O(logn)。&lt;/p>
&lt;h2 id="immutable-memtable">Immutable Memtable&lt;/h2>
&lt;p>达到 Memtable 设置的容量上限后，Memtable 会变为 Immutable 为之后向SST文件的归并做准备。 同 Memtable 的结构定义一样。两者的区别只是 Immutable Memtable 是只读的。Immutable Memtable 被创建时，LevelDB 的后台压缩进程便会利用其中的内容创建一个sstable，然后持久化到磁盘中。Immutable Mumtable不再接受用户写入，同时生成新的 Memtable、Log 文件供新数据写入。&lt;/p>
&lt;h2 id="sstable文件">SSTable文件&lt;/h2>
&lt;p>磁盘数据存储文件。SSTable(Sorted String Table) 就是由内存中的数据不断导出并进行Compaction 操作后形成的，而且 SSTable 的所有文件是一种层级结构，第一层为Level 0，第二层为 Level 1，依次类推，层级逐渐增高，这也是为何称之为 LevelDB 的原因。此外，Compact 动作会将多个 SSTable 合并成少量的几个 SSTable，以剔除无效数据，保证数据访问效率并降低磁盘占用。&lt;/p>
&lt;h3 id="manifest文件">Manifest文件&lt;/h3>
&lt;p>Manifest 文件中记录SST文件在不同Level的分布，单个SST文件的最大最小key，以及其他一些LevelDB需要的元信息。&lt;/p>
&lt;h2 id="current文件">Current文件&lt;/h2>
&lt;p>主要是记录当前 Manifest 的文件名。LevelDB 启动时的首要任务就是找到当前的 Manifest，而 Manifest 文件可能有多个。Current 文件记录了当前 Manifest 的文件名，从而让 LevelDB 启动时能够找到当前的 Manifest。&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://github.com/google/leveldb">https://github.com/google/leveldb&lt;/a>&lt;/p></description></item><item><title>Docs: LevelDB-02基础数据结构</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-02%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-02%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>
&lt;h1 id="slice">Slice&lt;/h1>
&lt;h2 id="作用">作用&lt;/h2>
&lt;p>Slice 是 leveldb 中自定义的字符串处理类，主要是因为标准库中的 string 存在如下问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>默认语义为拷贝，会损失性能。（在可预期的条件下，可以通过指针传递）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用不太方便，不支持 remove_prefix 和 starts_with 等函数
Slice 的作用：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据结构简单，包括length和一个指向外部字节数组的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相比返回 std::string，返回 Slice的开销小很多（没有拷贝，Slice 没有实际数据只有指向数据的指针）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>允许key和value包含’\0’&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="兼容性">兼容性&lt;/h2>
&lt;p>可以方便实现与 std::string 的互相转换&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// string 转slice：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">s1&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">str&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">s2&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// slice转string:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">str&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">s1&lt;/span>.&lt;span style="color:#000">ToString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">str&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;hello&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="源码">源码&lt;/h2>
&lt;p>在 include/leveldb/slice.h 中，较简单。&lt;/p>
&lt;h1 id="key">Key&lt;/h1>
&lt;p>Key 的代码都在 dbformat.cc / dbformat.h&lt;/p>
&lt;p>Key 的关系图如下：&lt;/p>
&lt;p>&lt;img src="../imgs/20230108_leveldb02_1.png" alt="20230108_leveldb02_1.png">&lt;/p>
&lt;h2 id="internalkey">InternalKey&lt;/h2>
&lt;h3 id="作用-1">作用&lt;/h3>
&lt;p>用户输入的数据 key 使用 slice ，LevelDB 则使用 InternalKey 作为 内部key，常用来比较 key 等场景。&lt;/p>
&lt;h3 id="结构">结构&lt;/h3>
&lt;p>[Slice user_key] + [SequenceNumber&amp;lt;&amp;lt;8 + ValueType]，后半部分固定64位，即8字节。&lt;/p>
&lt;h2 id="lookupkey">LookupKey&lt;/h2>
&lt;h3 id="作用-2">作用&lt;/h3>
&lt;p>查找对象的时候，查找顺序是从第0层到第n层遍历查找，找到为止(最新的修改或者删除的数据会优先被找到)。由于不同层的键值不同，所以 LookupKey 提供了不同层所需的键值。（用于 DBImpl:Get）&lt;/p>
&lt;h3 id="结构-1">结构&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// We construct a char array of the form:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// klength varint32 &amp;lt;-- start_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// userkey char[klength] &amp;lt;-- kstart_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// tag uint64
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// &amp;lt;-- end_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// The array is a suitable MemTable key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// The suffix starting with &amp;#34;userkey&amp;#34; can be used as an InternalKey.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">start_&lt;/span>; &lt;span style="color:#177500">// user_key.size() + 8 变长编码后的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">kstart_&lt;/span>; &lt;span style="color:#177500">// userkey
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">end_&lt;/span>; &lt;span style="color:#177500">// 64位整型顺序号&amp;lt;&amp;lt;8+值类型 64位定长编码后的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">char&lt;/span> &lt;span style="color:#000">space_&lt;/span>[&lt;span style="color:#1c01ce">200&lt;/span>]; &lt;span style="color:#177500">// Avoid allocation for short keys
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>memtable_key = start_ + kstart_ + end_&lt;/p>
&lt;p>internal_key = kstart_ + end_&lt;/p>
&lt;p>user_key = kstart_&lt;/p>
&lt;h2 id="parsedinternalkey">ParsedInternalKey&lt;/h2>
&lt;h3 id="作用-3">作用&lt;/h3>
&lt;p>对 InternalKey 的解析，InternalKey 是一个字符串&lt;/p>
&lt;h3 id="结构-2">结构&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>struct ParsedInternalKey {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Slice user_key;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SequenceNumber sequence;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ValueType type;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="skiplist">SkipList&lt;/h1>
&lt;h2 id="定义">定义&lt;/h2>
&lt;p>跳跃表：可以代替平衡树的数据结构，可以看成并联的有序链表。跳跃表通过概率保证平衡，而平衡树通过严格的旋转来保证平衡，因此跳跃表实现比较容易，相比平衡树有较高的运行效率。&lt;/p>
&lt;blockquote>
&lt;p>Redis 中默认的最大 level 为 64。&lt;/p>
&lt;/blockquote>
&lt;h2 id="实现">实现&lt;/h2>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// skiplist.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">template&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">SkipList&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">Node&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">SkipList&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">list_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">node_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Intentionally copyable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">enum&lt;/span> { &lt;span style="color:#000">kMaxHeight&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">12&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">inline&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">GetMaxHeight&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">max_height_&lt;/span>.&lt;span style="color:#000">load&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_relaxed&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">NewNode&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">height&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">RandomHeight&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">Equal&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">a&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">b&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> (&lt;span style="color:#000">compare_&lt;/span>(&lt;span style="color:#000">a&lt;/span>, &lt;span style="color:#000">b&lt;/span>) &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return true if key is greater than the data stored in &amp;#34;n&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">KeyIsAfterNode&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">n&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return the earliest node that comes at or after key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Return nullptr if there is no such node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// If prev is non-null, fills prev[level] with pointer to previous
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// node at &amp;#34;level&amp;#34; for every level in [0..max_height_-1].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">FindGreaterOrEqual&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">**&lt;/span> &lt;span style="color:#000">prev&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return the latest node with a key &amp;lt; key.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Return head_ if there is no such node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">FindLessThan&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Return the last node in the list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Return head_ if list is empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">FindLast&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Immutable after construction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Comparator&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">compare_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">arena_&lt;/span>; &lt;span style="color:#177500">// Arena used for allocations of nodes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">head_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Modified only by Insert(). Read racily by readers, but stale
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// values are ok.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">int&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">max_height_&lt;/span>; &lt;span style="color:#177500">// Height of the entire list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Read/written only by Insert().
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Random&lt;/span> &lt;span style="color:#000">rnd_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Implementation details follow
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">template&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">SkipList&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#000">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;::&lt;/span>&lt;span style="color:#000">Node&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">explicit&lt;/span> &lt;span style="color:#000">Node&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">k&lt;/span>) &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#000">key&lt;/span>(&lt;span style="color:#000">k&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Key&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">key&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Accessors/mutators for links. Wrapped in methods so we can
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// add the appropriate barriers as necessary.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Next&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Use an &amp;#39;acquire load&amp;#39; so that we observe a fully initialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// version of the returned Node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">load&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_acquire&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">SetNext&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">x&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Use a &amp;#39;release store&amp;#39; so that anybody who reads through this
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// pointer observes a fully initialized version of the inserted node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">store&lt;/span>(&lt;span style="color:#000">x&lt;/span>, &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_release&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// No-barrier variants that can be safely used in a few locations.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">NoBarrier_Next&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">load&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_relaxed&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">NoBarrier_SetNext&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">n&lt;/span>, &lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">x&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#000">n&lt;/span>].&lt;span style="color:#000">store&lt;/span>(&lt;span style="color:#000">x&lt;/span>, &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_relaxed&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Array of length equal to the node height. next_[0] is lowest level link.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 提前使用声明分配1个对象的内存，因为第0层数据肯定都有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 使用数组的方式，后续分配的内存都是连续的，atomic 保证原子性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span> &lt;span style="color:#000">next_&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">template&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">typename&lt;/span> &lt;span style="color:#000">SkipList&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#000">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;::&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">SkipList&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>, &lt;span style="color:#000">Comparator&lt;/span>&lt;span style="color:#000">&amp;gt;::&lt;/span>&lt;span style="color:#000">NewNode&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">height&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 前面已经分配了一层，所以 level-1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">node_memory&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">arena_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AllocateAligned&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">sizeof&lt;/span>(&lt;span style="color:#000">Node&lt;/span>) &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#a90d91">sizeof&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>) &lt;span style="color:#000">*&lt;/span> (&lt;span style="color:#000">height&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">new&lt;/span> (&lt;span style="color:#000">node_memory&lt;/span>) &lt;span style="color:#000">Node&lt;/span>(&lt;span style="color:#000">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h1 id="compare">Compare&lt;/h1>
&lt;h2 id="作用-4">作用&lt;/h2>
&lt;p>LevelDB 抽象了一个基类 Comparator 用于各种 key 之间的比较，毕竟数据是按照键有序存储的。且必须要支持线程安全。&lt;/p>
&lt;h2 id="源码-1">源码&lt;/h2>
&lt;p>在 include/leveldb/comparator.h 中&lt;/p>
&lt;h2 id="结构-3">结构&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">Comparator&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">Comparator&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Three-way comparison. Returns value:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// &amp;lt; 0 iff &amp;#34;a&amp;#34; &amp;lt; &amp;#34;b&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// == 0 iff &amp;#34;a&amp;#34; == &amp;#34;b&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// &amp;gt; 0 iff &amp;#34;a&amp;#34; &amp;gt; &amp;#34;b&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 支持 &amp;gt;、=、&amp;lt; 三种操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">Compare&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">a&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">b&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 比较器名字，以 leveldb. 开头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">char&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Name&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果 *start &amp;lt; limit, 将 *start 更改为 [start,limit) 中的短字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 简单的比较器实现可能以 *start 不变返回。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">FindShortestSeparator&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">start&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">limit&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 将 *key 更改为 string &amp;gt;= *key.Simple 比较器实现可能会在 *key 不变的情况下返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">FindShortSuccessor&lt;/span>(&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>具体实现有：&lt;/p>
&lt;ul>
&lt;li>BytewiseComparatorImpl&lt;/li>
&lt;li>InternalKeyComparator&lt;/li>
&lt;/ul>
&lt;h2 id="bytewisecomparatorimpl">BytewiseComparatorImpl&lt;/h2>
&lt;h3 id="作用-5">作用&lt;/h3>
&lt;ul>
&lt;li>Slice并没有规定Key具体类型，LevelDB 支持用户自定义比较器，创建数据库对象时可以通过Option 指定。&lt;/li>
&lt;li>默认的比较器，基于二进制比较&lt;/li>
&lt;/ul>
&lt;h3 id="源码-2">源码&lt;/h3>
&lt;p>在 util/comparator.cc 中。&lt;/p>
&lt;h2 id="internalkeycomparator">InternalKeyComparator&lt;/h2>
&lt;h3 id="作用-6">作用&lt;/h3>
&lt;ul>
&lt;li>用于内部的Key比较器。&lt;/li>
&lt;li>内部调用的也是 BytewiseComparatorImpl&lt;/li>
&lt;li>cmp原则：
&lt;ul>
&lt;li>userkey&lt;/li>
&lt;li>seq 越大越新&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FindShortestSeparator / FindShortSuccessor
&lt;ul>
&lt;li>提取 userkey，通过 userkey 查找&lt;/li>
&lt;li>追加 kMaxSequenceNumber + kValueTypeForSeek&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="源码-3">源码&lt;/h3>
&lt;p>在 db/dbformat.h 中。&lt;/p>
&lt;h1 id="env">Env&lt;/h1>
&lt;p>LevelDB 是跨平台的，因此 Env 封装了跨平台的内容。&lt;/p>
&lt;p>Env 是一个纯虚类，有三个实现版本：&lt;/p>
&lt;ul>
&lt;li>PosixEnv：封装了 &lt;a href="https://zhuanlan.zhihu.com/p/526876127">posix&lt;/a> 标准下所有接口&lt;/li>
&lt;li>WindowsEnv：封装了 win 相关接口&lt;/li>
&lt;li>EnvWrapper：对 Env 的扩展，将所有调用转发到其他的 Env 实现&lt;/li>
&lt;/ul>
&lt;h2 id="envwrapper">EnvWrapper&lt;/h2>
&lt;p>EnvWrapper 可以理解成对 Env 的扩展，使用了代理模式来实现扩展。&lt;/p></description></item><item><title>Docs: LevelDB-03Log</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-03Log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-03Log/</guid><description>
&lt;h2 id="log作用">Log作用&lt;/h2>
&lt;p>对于DB最怕的就是数据的丢失。当服务挂掉时，应尽可能的减少数据丢失。在 leveldb 中引入了 WAL 日志。&lt;/p>
&lt;h2 id="基本组成">基本组成&lt;/h2>
&lt;p>每个 Log 被划分成了很多 32K 大小的物理 block，写入、读取操作都是以 block 为单位进行。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// log_format.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">enum&lt;/span> &lt;span style="color:#3f6e75">RecordType&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Zero is reserved for preallocated files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">kZeroType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kFullType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// For fragments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">kFirstType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kMiddleType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kLastType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">kMaxRecordType&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kLastType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">32768&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Header is checksum (4 bytes), length (2 bytes), type (1 byte).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">4&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="写入流程">写入流程&lt;/h2>
&lt;p>入口：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// db_impl.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Status DBImpl::Write(const WriteOptions&amp;amp; options, WriteBatch* updates)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">log_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">AddRecord&lt;/span>(&lt;span style="color:#000">WriteBatchInternal&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Contents&lt;/span>(&lt;span style="color:#000">write_batch&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">sync_error&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">status&lt;/span>.&lt;span style="color:#000">ok&lt;/span>() &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">sync&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">logfile_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Sync&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">status&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sync_error&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">status&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">WriteBatchInternal&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">InsertInto&lt;/span>(&lt;span style="color:#000">write_batch&lt;/span>, &lt;span style="color:#000">mem_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Lock&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="addrecord">AddRecord&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// log_writer.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Status Writer::AddRecord(const Slice&amp;amp; slice)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">begin&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 检查剩余可以写的空间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 小于kHeaderSize，则需要开启新的block，因为kHeaderSize是必须要写的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Switch to a new block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 剩余空间使用0填充
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">leftover&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Fill the trailer (literal below relies on kHeaderSize being 7)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">static_assert&lt;/span>(&lt;span style="color:#000">kHeaderSize&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">7&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">dest_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Append&lt;/span>(&lt;span style="color:#000">Slice&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;&lt;/span>&lt;span style="color:#c41a16">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#c41a16">&amp;#34;&lt;/span>, &lt;span style="color:#000">leftover&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 开启新的block，重置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Invariant: we never leave &amp;lt; kHeaderSize bytes in a block.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">avail&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kBlockSize&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">block_offset_&lt;/span> &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#000">kHeaderSize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span> &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">&amp;lt;&lt;/span> &lt;span style="color:#000">avail&lt;/span>) &lt;span style="color:#000">?&lt;/span> &lt;span style="color:#000">left&lt;/span> : &lt;span style="color:#000">avail&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RecordType&lt;/span> &lt;span style="color:#000">type&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 计算是否刚好填满该block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">end&lt;/span> &lt;span style="color:#000">=&lt;/span> (&lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">begin&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">end&lt;/span>) { &lt;span style="color:#177500">// 新block且刚好装下
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kFullType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> &lt;span style="color:#000">if&lt;/span> (&lt;span style="color:#000">begin&lt;/span>) { &lt;span style="color:#177500">// 新block，一个装不下
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kFirstType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> &lt;span style="color:#000">if&lt;/span> (&lt;span style="color:#000">end&lt;/span>) { &lt;span style="color:#177500">// 上一份数据到该block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kLastType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> { &lt;span style="color:#177500">// 其它场景
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">kMiddleType&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">EmitPhysicalRecord&lt;/span>(&lt;span style="color:#000">type&lt;/span>, &lt;span style="color:#000">ptr&lt;/span>, &lt;span style="color:#000">fragment_length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ptr&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">-=&lt;/span> &lt;span style="color:#000">fragment_length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">begin&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>() &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">left&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="emitphysicalrecord">EmitPhysicalRecord&lt;/h3>
&lt;p>接着查看 EmitPhysicalRecord 函数&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size_t length) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(length &amp;lt;= 0xffff); // Must fit in two bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(block_offset_ + kHeaderSize + length &amp;lt;= kBlockSize);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Format the header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char buf[kHeaderSize];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 序列化长度和recordtype信息
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[4] = static_cast&amp;lt;char&amp;gt;(length &amp;amp; 0xff);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[5] = static_cast&amp;lt;char&amp;gt;(length &amp;gt;&amp;gt; 8);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[6] = static_cast&amp;lt;char&amp;gt;(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Compute the crc of the record type and the payload.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint32_t crc = crc32c::Extend(type_crc_[t], ptr, length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> crc = crc32c::Mask(crc); // Adjust for storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EncodeFixed32(buf, crc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Write the header and the payload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Status s = dest_-&amp;gt;Append(Slice(buf, kHeaderSize));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (s.ok()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s = dest_-&amp;gt;Append(Slice(ptr, length));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (s.ok()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s = dest_-&amp;gt;Flush();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> block_offset_ += kHeaderSize + length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="sync">Sync&lt;/h3>
&lt;p>注意 DBImpl::Write 函数中调用完 AddRecord 后立马调用了 Sync 函数进行了同步。&lt;/p>
&lt;h2 id="删除日志">删除日志&lt;/h2>
&lt;p>doc(&lt;strong>doc/impl.md&lt;/strong>)文档里面讲解了，在打开数据库以及compact之后，会将不再使用的文件删除，使用的函数是 RemoveObsoleteFiles。可以通过添加日志或者 gdb 来查看。&lt;/p>
&lt;h3 id="打开数据库">打开数据库&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// db_impl.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Status DB::Open(const Options&amp;amp; options, const std::string&amp;amp; dbname, DB** dbptr)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">RemoveObsoleteFiles&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">MaybeScheduleCompaction&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="数据压缩">数据压缩&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// void DBImpl::CompactMemTable()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Commit to the new state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">imm_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">imm_&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">has_imm_&lt;/span>.&lt;span style="color:#000">store&lt;/span>(&lt;span style="color:#a90d91">false&lt;/span>, &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memory_order_release&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RemoveObsoleteFiles&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#a90d91">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">RecordBackgroundError&lt;/span>(&lt;span style="color:#000">s&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: LevelDB-04数据读写</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-04%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-04%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/</guid><description>
&lt;h1 id="数据写入">数据写入&lt;/h1>
&lt;h2 id="基本原理">基本原理&lt;/h2>
&lt;h3 id="新增记录">新增记录&lt;/h3>
&lt;p>一个插入操作 Put(key, value) 包含两个具体步骤：&lt;/p>
&lt;ol>
&lt;li>追加写入 log&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>以顺序写的方式追加到 log 文件末尾。磁盘顺序写的方式效率很高，不会导致写入速度的急剧降低。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>写入 memtable&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果写入 log 文件成功，那么记录也会插入内存的 Memtable 中，Memtable 是一个 key 有序的跳表。&lt;/p>
&lt;/blockquote>
&lt;p>正是因为一个插入操作涉及一次磁盘文件追加写和内存跳表的插入操作，所以 LevelDB 写入速度很高效。&lt;/p>
&lt;h3 id="删除记录">删除记录&lt;/h3>
&lt;p>删除一条记录并不是立即执行删除操作，而是与插入操作相同，只不过插入操作是插入 key:value 值，而删除操作是插入 key:删除标记，等后台 Compaction 时才执行真正的删除操作。&lt;/p>
&lt;h2 id="writebatch">WriteBatch&lt;/h2>
&lt;p>WriteBatch 使用批量写来提高性能，支持 put 和 delete。&lt;/p>
&lt;h3 id="结构">结构&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// include/leveldb/write_batch.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">WriteBatch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Store the mapping &amp;#34;key-&amp;gt;value&amp;#34; in the database.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// If the database contains a mapping for &amp;#34;key&amp;#34;, erase it. Else do nothing.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Clear all updates buffered in this batch.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 内存状态信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">ApproximateSize&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 多个 WriteBatch 还可以继续合并
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Append&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">source&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Support for iterating over the contents of a batch.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Iterate&lt;/span>(&lt;span style="color:#000">Handler&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handler&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">//内部工具性质的辅助类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">friend&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">WriteBatchInternal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 具体数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">rep_&lt;/span>; &lt;span style="color:#177500">// See comment in write_batch.cc for the format of rep_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#177500">// namespace leveldb
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// db/write_batch.cc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// WriteBatch header has an 8-byte sequence number followed by a 4-byte count.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">kHeader&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">12&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="写入数据">写入数据&lt;/h3>
&lt;p>代码：include/leveldb/write_batch.h；db/write_batch_internal.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">ReadOptions&lt;/span>(), &lt;span style="color:#000">key1&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteOptions&lt;/span>(), &lt;span style="color:#000">key2&lt;/span>, &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteOptions&lt;/span>(), &lt;span style="color:#000">key1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>调用 db-&amp;gt;Put(WriteOptions(),&amp;amp;key,&amp;amp;value); 写入数据。WriteOptions 只有一个变量 sync，默认初始值为 false，因此默认写数据方式是异步。即每次写操作只要将数据写入到内存中就返回，而将数据从内存写到磁盘的方式是异步的。
异步写的效率比同步写高很多，问题是系统故障时可能会导致最近的写入丢失。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#633820">#include&lt;/span> &lt;span style="color:#633820">&amp;#34;leveldb/write_batch.h&amp;#34;&lt;/span>&lt;span style="color:#633820">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#633820">&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">ReadOptions&lt;/span>(), &lt;span style="color:#000">key1&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">s&lt;/span>.&lt;span style="color:#000">ok&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteBatch&lt;/span> &lt;span style="color:#000">batch&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch&lt;/span>.&lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#000">key1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">batch&lt;/span>.&lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#000">key2&lt;/span>, &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#000">leveldb&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">WriteOptions&lt;/span>(), &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">batch&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>LevelDB 使用 WriteBatch 替代简单的异步写操作。首先将所有的写操作记录到一个 batch 中，然后执行同步写，这样同步写的开销就被分散到多个写操作中。&lt;/p>
&lt;h2 id="写操作">写操作&lt;/h2>
&lt;h3 id="写接口">写接口&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Open the database with the specified &amp;#34;name&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Stores a pointer to a heap-allocated database in *dbptr and returns
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// OK on success.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Stores nullptr in *dbptr and returns a non-OK status on error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Caller should delete *dbptr when it is no longer needed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">static&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Open&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Options&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">**&lt;/span> &lt;span style="color:#000">dbptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>() &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#a90d91">operator&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">DB&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">DB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Set the database entry for &amp;#34;key&amp;#34; to &amp;#34;value&amp;#34;. Returns OK on success,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// and a non-OK status on error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Note: consider setting options.sync = true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">updates&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="写实现">写实现&lt;/h3>
&lt;p>代码：db/db_impl.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">DBImpl&lt;/span> &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#000">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 更新一条记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// leveldb::DBImpl::Put =&amp;gt; leveldb::DB::Put =&amp;gt; leveldb::DBImpl::Write
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Put&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除一条记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// leveldb::DBImpl::Delete =&amp;gt; leveldb::DB::Delete =&amp;gt; leveldb::DBImpl::Write
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Delete&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 更新多条记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">updates&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>注意调用流程：leveldb::DBImpl::Put =&amp;gt; leveldb::DB::Put =&amp;gt; leveldb::DBImpl::Write&lt;/p>
&lt;h3 id="dbimpl-write">DBImpl::Write&lt;/h3>
&lt;p>代码：db/db_impl.cc&lt;/p>
&lt;p>基本流程：&lt;/p>
&lt;ul>
&lt;li>构造 Writer&lt;/li>
&lt;li>将 writebatch 存入到一个 Writer 中，&lt;/li>
&lt;li>将 Writer 存入 deque 中。（levedb支持多线程，需要加互斥锁保护writers_）&lt;/li>
&lt;li>每个生产者在向 writers_ 队列中添加任务之后，都会进入一个 while 循环在里面等待。只有当该生产者加入的任务已经被处理或位于队列的头部，线程才会被唤醒。注意线程被唤醒后会继续检查循环条件，满足条件会继续睡眠。
&lt;ul>
&lt;li>加入的任务被其他任务处理，线程直接退出。&lt;/li>
&lt;li>加入的任务排在了队列的头部且未处理，当前线程将消费者进行后续处理。
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Writer 结构
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Writer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">explicit&lt;/span> &lt;span style="color:#000">Writer&lt;/span>(&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">mu&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#000">batch&lt;/span>(&lt;span style="color:#a90d91">nullptr&lt;/span>), &lt;span style="color:#000">sync&lt;/span>(&lt;span style="color:#a90d91">false&lt;/span>), &lt;span style="color:#000">done&lt;/span>(&lt;span style="color:#a90d91">false&lt;/span>), &lt;span style="color:#000">cv&lt;/span>(&lt;span style="color:#000">mu&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">batch&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">sync&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">done&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">CondVar&lt;/span> &lt;span style="color:#000">cv&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Write&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">WriteOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">WriteBatch&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">updates&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 构造 Writer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Writer&lt;/span> &lt;span style="color:#000">w&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">batch&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">updates&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">sync&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">sync&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">done&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 将 Writer push 到 deque 中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">push_back&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">w&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 构造 Writer 未执行完时(如合并操作，可能会被其它线程执行完成)，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 且未到队列头(没有获得调度)时，则等待
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">done&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">front&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">cv&lt;/span>.&lt;span style="color:#000">Wait&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果Writer任务被其它writer执行完成，则返回。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">done&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">w&lt;/span>.&lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 真正执行调度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 将处理完的任务从队列中取出，设置状态为 true，然后通知对应的 port::CondVar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#a90d91">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Writer&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">ready&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">front&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">pop_front&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">ready&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">w&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ready&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ready&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">done&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ready&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">cv&lt;/span>.&lt;span style="color:#000">Signal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">ready&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#000">last_writer&lt;/span>) &lt;span style="color:#a90d91">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 通知队列中的首 Writer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">empty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">writers_&lt;/span>.&lt;span style="color:#000">front&lt;/span>()&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">cv&lt;/span>.&lt;span style="color:#000">Signal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">status&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="数据读取">数据读取&lt;/h1>
&lt;h2 id="数据读取流程">数据读取流程&lt;/h2>
&lt;ul>
&lt;li>Memtable 查找：首先会去查看内存中的 Memtable，如果 Memtable 中包含key及其对应的value，则直接返回；&lt;/li>
&lt;li>Immutable Memtable 查找：接下来会到内存中的 Immutable Memtable 中查找，读到则返回；&lt;/li>
&lt;li>SSTable 查找：SSTable数量较多且分成多个 level。首先从属于 level 0 的文件中查找，如果找到则直接返回，如果没有找到则到下一个 level 的文件中查找，如此循环往复直到找到或查遍所有 level 没有仍然找到返回不存在为止。&lt;/li>
&lt;/ul>
&lt;h2 id="sst">SST&lt;/h2>
&lt;h3 id="数据分布">数据分布&lt;/h3>
&lt;ul>
&lt;li>level 0下的不同文件可能key的范围有重叠，某个要查询的key有可能多个文件都包含。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>策略是先找出 level 0 中哪些文件包含这个key（manifest文件中记载了level和对应的文件及文件里key的范围信息，内存中保存该映射表），之后按照文件的新鲜程度排序，新的文件排在前面，之后依次查找，读出key对应的value。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>非level 0下的不同文件之间key是不重叠的，所以只从一个文件就可以找到key对应的value。&lt;/li>
&lt;/ul>
&lt;h3 id="查询过程">查询过程&lt;/h3>
&lt;p>如果命中了 SST，那么查询过程如下：&lt;/p>
&lt;ul>
&lt;li>一般先在内存中的 Cache 中查找是否包含这个文件的缓存记录，找到则从缓存中读取；&lt;/li>
&lt;li>然后打开 SSTable 文件，同时将文件的索引部分加载到内存中存入 Cache（只有索引部分在 Cache中）；&lt;/li>
&lt;li>根据索引定位到哪个 Block 包含 key，从文件中读出 Block 的内容，然后根据记录逐一比较，找到则返回，没有找到则到下一级别的 SSTable 中查找。&lt;/li>
&lt;/ul>
&lt;h2 id="读操作">读操作&lt;/h2>
&lt;h3 id="读接口">读接口&lt;/h3>
&lt;p>代码：include/leveldb/db.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">ReadOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="读实现">读实现&lt;/h3>
&lt;p>代码：db/db_impl.h&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">DBImpl&lt;/span> &lt;span style="color:#000">:&lt;/span> &lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#000">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 读取记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">ReadOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>) &lt;span style="color:#a90d91">override&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="dbimpl-get">DBImpl::Get&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">ReadOptions&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#000">s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取互斥锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取本地读操作的 Sequence Number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">SequenceNumber&lt;/span> &lt;span style="color:#000">snapshot&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果 ReadOptions 的 snapshot 不为空，则使用这个 Sequence Number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 否则，默认使用 LastSequence
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#000">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">static_cast&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">SnapshotImpl&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>(&lt;span style="color:#000">options&lt;/span>.&lt;span style="color:#000">snapshot&lt;/span>)&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">sequence_number&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">versions_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">LastSequence&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// MemTable、Immutable Memtable 和 Current Version 增加引用计数，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 避免在读取过程中被后台线程 Compaction 时垃圾回收
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">MemTable&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">mem&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">mem_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MemTable&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">imm_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Version 主要用来维护 SST 文件的版本信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">current&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">versions_&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">current&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mem&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Ref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>) &lt;span style="color:#000">imm&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Ref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Ref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">have_stat_update&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">GetStats&lt;/span> &lt;span style="color:#000">stats&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Unlock while reading from files and memtables
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Unlock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// First look in the memtable, then in the immutable memtable (if any).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LookupKey&lt;/span> &lt;span style="color:#000">lkey&lt;/span>(&lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#000">snapshot&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 查找过程：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 1、从 MemTable 查找
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">mem&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">lkey&lt;/span>, &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">s&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 从 Immutable Memtable 查找
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> } &lt;span style="color:#a90d91">else&lt;/span> &lt;span style="color:#000">if&lt;/span> (&lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">imm&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">lkey&lt;/span>, &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">s&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 从 SSTable 文件中查找
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> } &lt;span style="color:#a90d91">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Get&lt;/span>(&lt;span style="color:#000">options&lt;/span>, &lt;span style="color:#000">lkey&lt;/span>, &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">stats&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">have_stat_update&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mutex_&lt;/span>.&lt;span style="color:#000">Lock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 更新 SST 文件的统计信息，根据统计结果决定是否调度后台 Compaction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">have_stat_update&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">UpdateStats&lt;/span>(&lt;span style="color:#000">stats&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MaybeScheduleCompaction&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// MemTable、Immutable Memtable 和 Current Version 减少引用计数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">mem&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">imm&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>) &lt;span style="color:#000">imm&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">current&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">Unref&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">s&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>注意：MemTable、Immutable Memtable 和 Current Version 查找不需要加锁，因为前两个是 SkipList，其读操作是线程安全的，只需要通过引用计数保证数据结构不被回收即可。Current Version 内部是 SSTable 文件，都是只读操作，也无需加锁。&lt;/p></description></item><item><title>Docs: LevelDB-05Cache</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-05Cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-05Cache/</guid><description>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>为了读取效率使用了 Cache 机制。主要是 Table Cache 和 Block Cache 两类。&lt;/p>
&lt;p>Table Cache 主要是缓存 SST 文件的 data block index，Block Cache 主要是缓存 data block。&lt;/p>
&lt;h2 id="通用接口">通用接口&lt;/h2>
&lt;p>代码：include/leveldb/cache.h&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LEVELDB_EXPORT&lt;/span> &lt;span style="color:#000">Cache&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cache&lt;/span>() &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">default&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cache&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#a90d91">operator&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Destroys all existing entries by calling the &amp;#34;deleter&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 调用 deleter 删除所有 entries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">Cache&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Opaque handle to an entry stored in the cache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 存储的 entry，除了kv还有一些维护信息，这里是通用接口所以没有定义
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">Handle&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 插入kv，charge 表示本次插入操作对cache容量的消耗
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// entry 被淘汰是，使用 deleter 进行删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>, &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>)) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 查找接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 释放 handle
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Release&lt;/span>(&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handle&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取 handle 的 value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Value&lt;/span>(&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handle&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除对应 key 记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 真正的存储记录，所有相关的 handles 都释放了才会被删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Erase&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 生成 cacheid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">uint64_t&lt;/span> &lt;span style="color:#000">NewId&lt;/span>() &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除 lru_ 链上的记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Prune&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// cache 的开销，Insert 接口传入 charge 之和
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">virtual&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">TotalCharge&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="lruhandle">LRUHandle&lt;/h2>
&lt;p>代码：util/cache.cc&lt;/p>
&lt;p>LRUHandle 类主要用于自定义的 hashtable 和 LRU 中的节点。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">struct&lt;/span> &lt;span style="color:#3f6e75">LRUHandle&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 删除器，refs==0 调用deleter完成value对象释放
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// HashTable 节点，指向hash值相同的节点（采用链地址法解决hash冲突）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">next_hash&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// LRUCache 节点，指向后继
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// LRUCache 节点，指向前驱
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">prev&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 用户指定占用缓存的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>; &lt;span style="color:#177500">// TODO(opt): Only allow uint32_t?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">key_length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">in_cache&lt;/span>; &lt;span style="color:#177500">// Whether entry is in the cache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">refs&lt;/span>; &lt;span style="color:#177500">// References, including cache reference, if present.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>; &lt;span style="color:#177500">// Hash of key(); used for fast sharding and comparisons
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">char&lt;/span> &lt;span style="color:#000">key_data&lt;/span>[&lt;span style="color:#1c01ce">1&lt;/span>]; &lt;span style="color:#177500">// Beginning of key
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="lrucache">LRUCache&lt;/h2>
&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">LRUCache&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">public&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">LRUCache&lt;/span>(); &lt;span style="color:#177500">// 初始化双向链表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">~&lt;/span>&lt;span style="color:#000">LRUCache&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Separate from constructor so caller can easily make an array of LRUCache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">SetCapacity&lt;/span>(&lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">capacity&lt;/span>) { &lt;span style="color:#000">capacity_&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">capacity&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Like Cache methods, but with an extra &amp;#34;hash&amp;#34; parameter.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 插入数据到 Cache 中，这里保存节点的 hash 值，方便快速比对
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 查询目标节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 释放句柄(操作引用)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Release&lt;/span>(&lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">handle&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 从缓存中删除节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Erase&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 手动检测是否有需要删除的节点，发生在节点超过容量之后
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Prune&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 当前缓存中数据所占用的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">TotalCharge&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">usage_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">private&lt;/span>&lt;span style="color:#000">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">LRU_Remove&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">LRU_Append&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">list&lt;/span>, &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 增加引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Ref&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 节点引用为0，调用 free 函数，否则只能移动
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">Unref&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">FinishErase&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>) &lt;span style="color:#000">EXCLUSIVE_LOCKS_REQUIRED&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Initialized before use.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// LRU 容量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">capacity_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// mutex_ protects the following state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// id 生成锁，保护 LRUCache 操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">mutable&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Mutex&lt;/span> &lt;span style="color:#000">mutex_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 获取 LRUCache 已经使用的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">usage_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Dummy head of LRU list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// lru.prev is newest entry, lru.next is oldest entry.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Entries have refs==1 and in_cache==true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 只存在缓存中的节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span> &lt;span style="color:#000">lru_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// Dummy head of in-use list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// Entries are in use by clients, and have refs &amp;gt;= 2 and in_cache==true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 既存在缓存中，又被外部引用的节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span> &lt;span style="color:#000">in_use_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 用户快速获取某个节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">HandleTable&lt;/span> &lt;span style="color:#000">table_&lt;/span> &lt;span style="color:#000">GUARDED_BY&lt;/span>(&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>LRU 中元素不仅在 cache 中，也可能会被外部引用，不能直接删除节点&lt;/li>
&lt;li>某个节点被修改或引用，空间不足不能参与 LRU 计算&lt;/li>
&lt;li>in_use 表示既在 cache 中，也被外部引用&lt;/li>
&lt;li>table_ 记录 key 和节点的映射关系，通过key可以快速定位到某个节点&lt;/li>
&lt;li>调用 insert/LookUp 之后，必须使用 Release 释放句柄&lt;/li>
&lt;/ul>
&lt;h3 id="insert函数">Insert函数&lt;/h3>
&lt;p>代码：util/cache.cc&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">LRUCache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>, &lt;span style="color:#a90d91">uint32_t&lt;/span> &lt;span style="color:#000">hash&lt;/span>, &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">charge&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span> (&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">deleter&lt;/span>)(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">void&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">value&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 加锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">MutexLock&lt;/span> &lt;span style="color:#000">l&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">mutex_&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 创建节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">reinterpret_cast&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>(&lt;span style="color:#000">malloc&lt;/span>(&lt;span style="color:#a90d91">sizeof&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>) &lt;span style="color:#000">-&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">size&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">deleter&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">deleter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">charge&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">charge&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">key_length&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">size&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">hash&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">hash&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">in_cache&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 引用数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>; &lt;span style="color:#177500">// for the returned handle.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">memcpy&lt;/span>(&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">key_data&lt;/span>, &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">data&lt;/span>(), &lt;span style="color:#000">key&lt;/span>.&lt;span style="color:#000">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 容量大于0时开启缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">capacity_&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 会放入缓存中，因此存在两个地方，引用数加1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span>&lt;span style="color:#000">++&lt;/span>; &lt;span style="color:#177500">// for the cache&amp;#39;s reference.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">in_cache&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 外部会引用，所以节点需要放在 in_use_ 链上
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRU_Append&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">in_use_&lt;/span>, &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 加上新增的字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">usage_&lt;/span> &lt;span style="color:#000">+=&lt;/span> &lt;span style="color:#000">charge&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 如果存在该节点，需要将老的节点释放
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">FinishErase&lt;/span>(&lt;span style="color:#000">table_&lt;/span>.&lt;span style="color:#000">Insert&lt;/span>(&lt;span style="color:#000">e&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a90d91">else&lt;/span> { &lt;span style="color:#177500">// don&amp;#39;t cache. (capacity_==0 is supported and turns off caching.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// next is read by key() in an assert, so it must be initialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">next&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#177500">// 当cache容量不够，有空余的节点需要进行 LRU 策略淘汰
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// 注意 in_use_ 中的节点不能被淘汰，因为被外部引用了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">usage_&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">capacity_&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">lru_&lt;/span>.&lt;span style="color:#000">next&lt;/span> &lt;span style="color:#000">!=&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">lru_&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">old&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">lru_&lt;/span>.&lt;span style="color:#000">next&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">erased&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">FinishErase&lt;/span>(&lt;span style="color:#000">table_&lt;/span>.&lt;span style="color:#000">Remove&lt;/span>(&lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">key&lt;/span>(), &lt;span style="color:#000">old&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">hash&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">erased&lt;/span>) { &lt;span style="color:#177500">// to avoid unused variable when compiled NDEBUG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">assert&lt;/span>(&lt;span style="color:#000">erased&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#a90d91">reinterpret_cast&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">Cache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Handle&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span>(&lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="ref-unref函数">ref/Unref函数&lt;/h3>
&lt;p>代码：util/cache.cc&lt;/p>
&lt;p>Ref&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">LRUCache&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Ref&lt;/span>(&lt;span style="color:#000">LRUHandle&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">if&lt;/span> (&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span> &lt;span style="color:#000">==&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">in_cache&lt;/span>) { &lt;span style="color:#177500">// If on lru_ list, move to in_use_ list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#000">LRU_Remove&lt;/span>(&lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">LRU_Append&lt;/span>(&lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">in_use_&lt;/span>, &lt;span style="color:#000">e&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000">-&amp;gt;&lt;/span>&lt;span style="color:#000">refs&lt;/span>&lt;span style="color:#000">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Unref
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>void LRUCache::Unref(LRUHandle* e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(e-&amp;gt;refs &amp;gt; 0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 引用减1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e-&amp;gt;refs--;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if (e-&amp;gt;refs == 0) { // Deallocate.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(!e-&amp;gt;in_cache);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (*e-&amp;gt;deleter)(e-&amp;gt;key(), e-&amp;gt;value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } else if (e-&amp;gt;in_cache &amp;amp;&amp;amp; e-&amp;gt;refs == 1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // No longer in use; move to lru_ list.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 仅在缓存中且引用数为1，将其从 in_use_ 中删除，放到 LRU 中
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LRU_Remove(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LRU_Append(&amp;amp;lru_, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p></description></item><item><title>Docs: LevelDB-06Compaction</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-06Compaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/LevelDB-06Compaction/</guid><description>
&lt;h2 id="分类">分类&lt;/h2>
&lt;p>LevelDB 中，compaction 有两种：&lt;/p>
&lt;ul>
&lt;li>minor compaction&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>immutable memtable 持久化为 sst 文件&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>major compaction&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>sst 文件之间的 compaction&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>* Manual Compaction：人工触发，外部接口调用产生
* Size Compaction：每个 level 文件大小超过一定阈值就会触发
* Seek Compaction：一个文件的 seek miss 次数超过阈值就会触发
&lt;/code>&lt;/pre>
&lt;p>优先级：Minor &amp;gt; Manual &amp;gt; Size &amp;gt; Seek&lt;/p>
&lt;h2 id="成员变量">成员变量&lt;/h2>
&lt;p>代码：&lt;/p>
&lt;p>db/version_set.h&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 需要压缩的 level
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">level_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 压缩之后最大的文件大小，等于 options-&amp;gt;max_file_size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">uint64_t&lt;/span> &lt;span style="color:#000">max_output_file_size_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 当前操作的版本
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">Version&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">input_version_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 版本变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">VersionEdit&lt;/span> &lt;span style="color:#000">edit_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Each compaction reads inputs from &amp;#34;level_&amp;#34; and &amp;#34;level_+1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// level 和 level 两层需要参与压缩的文件元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">vector&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">FileMetaData&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span> &lt;span style="color:#000">inputs_&lt;/span>[&lt;span style="color:#1c01ce">2&lt;/span>]; &lt;span style="color:#177500">// The two sets of inputs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// State used to check for number of overlapping grandparent files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// (parent == level_ + 1, grandparent == level_ + 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// grandparents元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">vector&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#000">FileMetaData&lt;/span>&lt;span style="color:#000">*&amp;gt;&lt;/span> &lt;span style="color:#000">grandparents_&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// grandparent下标索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">grandparent_index_&lt;/span>; &lt;span style="color:#177500">// Index in grandparent_starts_
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">seen_key_&lt;/span>; &lt;span style="color:#177500">// Some output key has been seen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 当前压缩与grandparent元数据重叠的字节数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int64_t&lt;/span> &lt;span style="color:#000">overlapped_bytes_&lt;/span>; &lt;span style="color:#177500">// Bytes of overlap between current output
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span> &lt;span style="color:#177500">// and grandparent files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// State for implementing IsBaseLevelForKey
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// level_ptrs_ holds indices into input_version_-&amp;gt;levels_: our state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// is that we are positioned at one of the file ranges for each
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// higher level than the ones involved in this compaction (i.e. for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// all L &amp;gt;= level_ + 2).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 记录某个 user_key 与 &amp;gt;= level+2 中每一层不重叠的文件个数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">level_ptrs_&lt;/span>[&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">kNumLevels&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="主要函数">主要函数&lt;/h2>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Return the level that is being compacted. Inputs from &amp;#34;level&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// and &amp;#34;level+1&amp;#34; will be merged to produce a set of &amp;#34;level+1&amp;#34; files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 返回将要压缩的 level 文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">level&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">level_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Return the object that holds the edits to the descriptor done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// by this compaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">VersionEdit&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">edit&lt;/span>() { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">&amp;amp;&lt;/span>&lt;span style="color:#000">edit_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// &amp;#34;which&amp;#34; must be either 0 or 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 返回对应层级参与压缩的文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">num_input_files&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">which&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">inputs_&lt;/span>[&lt;span style="color:#000">which&lt;/span>].&lt;span style="color:#000">size&lt;/span>(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Return the ith input file at &amp;#34;level()+which&amp;#34; (&amp;#34;which&amp;#34; must be 0 or 1).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 获取某一层第 i 个文件的 sst 元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">FileMetaData&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">input&lt;/span>(&lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">which&lt;/span>, &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">i&lt;/span>) &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">inputs_&lt;/span>[&lt;span style="color:#000">which&lt;/span>][&lt;span style="color:#000">i&lt;/span>]; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Maximum size of files to build during this compaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 本次压缩产生的最大文件大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">uint64_t&lt;/span> &lt;span style="color:#000">MaxOutputFileSize&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span> { &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">max_output_file_size_&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Is this a trivial compaction that can be implemented by just
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// moving a single input file to the next level (no merging or splitting)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 表示本地是否可以将本次 sst 直接移动到上一层
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">IsTrivialMove&lt;/span>() &lt;span style="color:#a90d91">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Add all inputs to this compaction as delete operations to *edit.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 添加所有需要删除 sst 文件到 *edit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// input 经过变化生成 output，input对应 deleted_file 容器，output进入 added_file 容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// add时先忽略 deleted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">AddInputDeletions&lt;/span>(&lt;span style="color:#000">VersionEdit&lt;/span>&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">edit&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Returns true if the information we have available guarantees that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// the compaction is producing data in &amp;#34;level+1&amp;#34; for which no data exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// in levels greater than &amp;#34;level+1&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 判断当前user_key在 &amp;gt;=(level+2) 层中是否存在。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 主要用于key的 type=deletion 时是否将该 key 删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">IsBaseLevelForKey&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">user_key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Returns true iff we should stop building the current output
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// before processing &amp;#34;internal_key&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 是否需要停止输出，生成新的SST，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 避免合并到 level+1 层之后和 level+2 层重叠太多，导致下次合并level+1时间太久
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">bool&lt;/span> &lt;span style="color:#000">ShouldStopBefore&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span>&lt;span style="color:#000">&amp;amp;&lt;/span> &lt;span style="color:#000">internal_key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// Release the input version for the compaction, once the compaction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// is successful.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// 释放内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">ReleaseInputs&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h2 id="minor-compaction">Minor Compaction&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>immutable memtable 持久化为 sst 文件。&lt;/p>
&lt;h3 id="触发条件">触发条件&lt;/h3>
&lt;p>Wirte 新数据进入 LevelDB 时，会在适当的时机检查内存中 Memtable 占用内存大小，一旦超过 options_.write_buffer_size (默认4M)，就会尝试 Minor Compaction。&lt;/p>
&lt;h3 id="执行过程">执行过程&lt;/h3>
&lt;ul>
&lt;li>DBImpl::BackgroundCompaction -&amp;gt; DBImpl::CompactMemTable -&amp;gt; DBImpl::WriteLevel0Table
&lt;ul>
&lt;li>BuildTable：将 immutable memtable 格式化成 sstable 文件。&lt;/li>
&lt;li>PickLevelForMemTableOutput：计算新生成的sstable所属的层级。&lt;/li>
&lt;li>edit-&amp;gt;AddFile()：将新sst文件放置到第2步选出的level中。
策略上尽量将新 compact 文件推至高 level。因为如果 level0 需要控制的文件过多，compaction IO 和查找都比较耗费。另一方面也不能推至过高level，某些范围的key更新比较频繁，后续往高层 compaction IO 消耗也很大。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="层级选择">层级选择&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>新 sst key 范围和 level0 的某个或某几个 sst 文件是否有重叠&lt;/p>
&lt;ul>
&lt;li>是，level = 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，新 sst key 范围和 level1 的某个或某几个 sst 文件是否有重叠&lt;/p>
&lt;ul>
&lt;li>是，level = 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，level2 文件中与新 sst 有重叠文件个数过多，size之和是否超过阈值&lt;/p>
&lt;ul>
&lt;li>是，level = 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，新 sst key 范围和 level2 的某个或某几个 sst 文件是否有重叠&lt;/p>
&lt;ul>
&lt;li>是，level = 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，level3 文件与新 sst 重叠文件个数过多，size之和是否超过阈值&lt;/p>
&lt;ul>
&lt;li>是，level = 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>否，level = 2
基本判断原则：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当前level n，推向下一层level的条件是：与 level n+1 不能重叠，与 level n+2 重叠的文件大小不能超过阈值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>level 最大不超过2&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="major-compaction">Major Compaction&lt;/h2>
&lt;p>Major compaction 是将不同层级的 sst 的文件进行合并。&lt;/p>
&lt;p>作用：&lt;/p>
&lt;ul>
&lt;li>将不活跃的数据下沉，均衡各个level的数据，保证 read 的性能&lt;/li>
&lt;li>合并 delete 数据，释放磁盘空间，因为删除是标记删除&lt;/li>
&lt;li>合并 update 数据，例如put同一个key，类似于 delete，是采用的标记插入新的数据，实际的update是在compact中完成，并实现空间的释放&lt;/li>
&lt;/ul>
&lt;h3 id="size-compaction">Size Compaction&lt;/h3>
&lt;h4 id="定义-1">定义&lt;/h4>
&lt;p>LevelDB 的核心 Compact 过程，其主要是为了均衡各个level的数据，从而保证读写的性能均衡。&lt;/p>
&lt;p>主要是指某一层 sst 文件不能太大，这个大对 level0 层来说是 sst 文件过多，因为 level0 层会被频繁访问，而对于其他层表示字节数太大，具体见Builder类的Finalize函数。&lt;/p>
&lt;h4 id="触发条件-1">触发条件&lt;/h4>
&lt;p>LevelDB 会计算每个level的总的文件大小，并根据此计算出一个score，最后会根据这个score来选择合适level和文件进行Compact。具体得分原则见：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">VersionSet&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">Finalize&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>进行 Compation 时，判断得分是否大于 1，是则进行 Size Compaction。代码见：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">VersionSet&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">PickCompaction&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h4 id="执行过程-1">执行过程&lt;/h4>
&lt;ul>
&lt;li>score计算：各 level 触发得分，得到 compaction 层级（VersionSet::Finalize）
&lt;ul>
&lt;li>level0: level0文件总数 / 4&lt;/li>
&lt;li>其它 level：当前level所有文件size之和 / 当前 level 阈值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>寻找 compaction 的文件，如 level n：
&lt;ul>
&lt;li>确定 level n 参与 compation 的文件列表 ，存入inputs_[0] （核心函数：VersionSet::PickCompaction）&lt;/li>
&lt;li>确定 level n+1 参与 compation 的文件列表，存入inputs_[1]（核心函数：VersionSet::SetupOtherInputs）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="seek-compaction">Seek Compaction&lt;/h3>
&lt;h4 id="定义-2">定义&lt;/h4>
&lt;p>主要记录的是某个 sst seek 次数到达阈值之后，将会参与下一次压缩。&lt;/p>
&lt;p>LevelDB 认为如果一个 sst 文件在 level i 中总是没总到，而是在 level i+1 中找到，这说明两层之间key的范围重叠很严重。当这种 seek miss 积累到一定次数之后，就考虑将其从 level i 中合并到 level i+1 中，这样可以避免不必要的 seek miss 消耗 read I/O。&lt;/p>
&lt;h4 id="触发条件-2">触发条件&lt;/h4>
&lt;p>当 allowed_seeks 递减到小于0了，将标记为需要 compation 的文件。但是由于 Size Compaction 优先级高于 Seek Compaction，所以在不存在 Size Compaction 时且触发了Compaction，Seek Compaction 就能执行。&lt;/p>
&lt;h4 id="执行过程-2">执行过程&lt;/h4>
&lt;ul>
&lt;li>获取 compaction 文件（Version::UpdateStats）&lt;/li>
&lt;li>寻找 compaction 的文件，如 level n：
&lt;ul>
&lt;li>确定 level n 参与 compation 的文件列表 ，存入inputs_[0] （核心函数：VersionSet::PickCompaction）&lt;/li>
&lt;li>确定 level n+1 参与 compation 的文件列表，存入inputs_[1]（核心函数：VersionSet::SetupOtherInputs）
具体代码见：DBImpl::DoCompactionWork&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="manual-compact">Manual Compact&lt;/h3>
&lt;h4 id="定义-3">定义&lt;/h4>
&lt;p>人工触发的Compaction，由外部接口调用产生。实际内部触发调用的接口是 DBImpl 中的&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// begin/end 表示 compaction 的范围
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">// begin/end 为 null 时，表示尝试 compact 所有文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#a90d91">void&lt;/span> &lt;span style="color:#000">DBImpl&lt;/span>&lt;span style="color:#000">::&lt;/span>&lt;span style="color:#000">CompactRange&lt;/span>(&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">begin&lt;/span>, &lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">Slice&lt;/span> &lt;span style="color:#000">end&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Manual Compaction 中会指定 begin 和 end。它将会逐个 level 分次的 Compact 所有level 中与 begin 和 end 有重叠（overlap）的 sst 文件。&lt;/p>
&lt;h4 id="触发条件-3">触发条件&lt;/h4>
&lt;p>人工触发，由外部调用。&lt;/p>
&lt;h4 id="执行过程-3">执行过程&lt;/h4>
&lt;ul>
&lt;li>遍历所有level，获取到最大重叠的层级（核心函数：OverlapInLevel）&lt;/li>
&lt;li>强制将当前的 memtable 进行 minor compation。（核心函数：TEST_CompactMemTable）&lt;/li>
&lt;li>遍历重叠的层级进行 major compation（核心函数：TEST_CompactRange）&lt;/li>
&lt;li>真正的 compation（核心函数：VersionSet::CompactRange）&lt;/li>
&lt;/ul></description></item><item><title>Docs: LevelDB</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/LevelDB/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>LevelDB&lt;/p></description></item></channel></rss>