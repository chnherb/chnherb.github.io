<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Herbdocs – Hbase</title><link>/tags/Hbase/</link><description>Recent content in Hbase on Herbdocs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/Hbase/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 初探Hbase</title><link>/docs/52.%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%88%9D%E6%8E%A2Hbase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/52.%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%88%9D%E6%8E%A2Hbase/</guid><description>
&lt;h1 id="hbase是什么">HBase是什么&lt;/h1>
&lt;p>HBase是一种构建在HDFS之上的分布式键值存储系统。&lt;/p>
&lt;p>HBase 是Google Bigtable 的开源实现。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。&lt;/p>
&lt;p>另一个不同的是HBase基于列的而不是基于行的模式。&lt;/p>
&lt;p>&lt;strong>适用场景&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>存储大量数据(PB级数据)。&lt;/li>
&lt;li>高并发写入，瞬间写入量很大（写多，读少）。&lt;/li>
&lt;li>业务场景简单(无jion，事务), 按单一维度查询（基于rowkey）。&lt;/li>
&lt;li>非结构化的数据存储，列可以优雅扩展。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不适用场景&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>事务。&lt;/li>
&lt;li>join、group by。&lt;/li>
&lt;li>除了rowkey之外的复杂查询。&lt;/li>
&lt;li>高并发，低延迟随机读 。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>MT应用场景&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>MTtrace&lt;/li>
&lt;li>云搜&lt;/li>
&lt;/ul>
&lt;h1 id="行存储vs列存储">&lt;strong>行存储VS列存储&lt;/strong>&lt;/h1>
&lt;p>&lt;img src="../imgs/hbase_basic_211212_1.png" alt="hbase_basic_211212_1.png">&lt;/p>
&lt;p>**行式存储：**一张表的数据都是放在一起&lt;/p>
&lt;p>**列式存储：**以列为单位聚合数据，不同的列分开存储&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">行式存储&lt;/th>
&lt;th style="text-align:left">列式存储&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>优点&lt;/strong>&lt;/td>
&lt;td style="text-align:left">一行记录的写入是一次完成,消耗的时间比列存储少。&lt;/td>
&lt;td style="text-align:left">读取过程，按列读取不会产生冗余数据。适合列很多，但每次只需查询少数列的场景。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>缺点&lt;/strong>&lt;/td>
&lt;td style="text-align:left">数据读取时，将一行数据完全读出。存在冗余列&lt;/td>
&lt;td style="text-align:left">需要将一行记录拆分成单列保存，写入次数更多，时间消耗会更大。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="hbase数据模型">&lt;strong>HBase数据模型&lt;/strong>&lt;/h1>
&lt;p>HBase 以列族为区分列式存储数据库。表可以被看成是一个稀疏的行的集合。一个列族是多个column的集合.&lt;/p>
&lt;p>&lt;img src="../imgs/hbase_basic_211212_2.png" alt="hbase_basic_211212_2.png">&lt;/p>
&lt;p>&lt;strong>物理视图&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../imgs/hbase_basic_211212_3.png" alt="hbase_basic_211212_3.png">&lt;/p>
&lt;ul>
&lt;li>anchor 、contents 分别为两个列族，区分存储。&lt;/li>
&lt;li>cnnsi.com 、my.look.ca为列族anchor两个列，html为列族contents的列。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>行键&lt;/strong>&lt;/p>
&lt;p>Row Key 是用来检索记录的主键。Row Key 可定义任意字符串，如订单id,事务id。&lt;/p>
&lt;p>在HBase 内部，Row Key 保存为字节数组。HBase表的行是按Row Key字典序存储的。&lt;/p>
&lt;p>&lt;strong>列族&lt;/strong>&lt;/p>
&lt;p>列族一些列的集合，列族必须在表建立的时候声明。column就不需要了，随时可以新建。&lt;/p>
&lt;p>在物理上，一个的列族成员在文件系统上都是存储在一起。因为存储优化都是针对列族级别的。&lt;/p>
&lt;p>这就意味着，在表设计的时候要考虑一个colimn family的所有成员的是否有相同的访问方式。&lt;/p>
&lt;p>&lt;strong>Cells和版本&lt;/strong>&lt;/p>
&lt;p>对于同一Row Key 的相同列的多次写操作，使用版本来区分。可以把版本理解每次写入的快照。&lt;/p>
&lt;p>A *{row, column, version}*元组就是一个HBase中的一个单元。Cell的内容是不可分割的字节数组，即我们存储和具体的值。&lt;/p>
&lt;p>可保存的版本数需要设定，读取这个文件的时候，默认是最近的版本。&lt;/p>
&lt;p>&lt;strong>操作&lt;/strong>&lt;/p>
&lt;p>主要操作有&lt;/p>
&lt;p>Get：指定Row Key查找，性能最高。&lt;/p>
&lt;p>Scan ：基于Row Key 前缀查找，或全表扫描。&lt;/p>
&lt;p>Put：向表增加新行 (如果key是新的) 或更新行 (如果key已经存在)。&lt;/p>
&lt;p>Bulk Loading：批量装载，批量装载特性采用 MapReduce 任务，将表数据输出为HBase的内部数据格式，然后可以将产生的存储文件直接装载到运行的集群中。&lt;/p>
&lt;p>Delete：从表中删除一行。&lt;/p>
&lt;p>&lt;strong>TTL&lt;/strong>&lt;/p>
&lt;p>存活时间——列族可以设置TTL秒数，HBase 在超时后将自动删除数据&lt;/p>
&lt;h1 id="hbase表设计">&lt;strong>HBase表设计&lt;/strong>&lt;/h1>
&lt;p>&lt;strong>rowkey&lt;/strong>&lt;/p>
&lt;p>HBase 的检索都是基于 rowkey，类似sql 里的like 操作，我们需要根据查询场景来合理设置rowkey。参考&lt;a href="https://km.sankuai.com/page/59718515">合理设计hbase rowkey&lt;/a>&lt;/p>
&lt;p>1：查询最左匹配原则&lt;/p>
&lt;p>假设查询包含3个维度：shopId，orderId ，如果将rowkey 定义为: shopId_orderId&lt;/p>
&lt;p>则以下维度的查询比较高效&lt;/p>
&lt;p>(1) 通过shopId查询&lt;/p>
&lt;p>(2) 通过shopId + orderId查询&lt;/p>
&lt;p>但通过orderId查询则比较低效，为全表扫描操作&lt;/p>
&lt;p>2：避免热点Region&lt;/p>
&lt;p>HBase 的行会根据rowkey 拆分到不同的 Region 中。&lt;/p>
&lt;p>如果是连续自增性质的rowkey，则相邻rowkey写入到了同一个Region里，产生热点Region。热点Region容易导致读写出现性能瓶颈。&lt;/p>
&lt;p>一般的做法是在rowkey 加一个hash前缀。比如hash(shopId)_shopId_orderId&lt;/p>
&lt;p>3：避免短键过长&lt;/p>
&lt;p>在满足需求的情况下，行键越短越好。&lt;/p>
&lt;p>&lt;strong>列簇&lt;/strong>&lt;/p>
&lt;p>建议列族不要超过3个，按照访问维度划分。&lt;/p>
&lt;p>尽量使列族名小，最好一个字符。(如 &amp;quot;d&amp;quot; 表示 data/default)。&lt;/p>
&lt;p>&lt;strong>列名&lt;/strong>&lt;/p>
&lt;p>最好还是用短属性名，节约存储空间。&lt;/p>
&lt;p>&lt;strong>版本数&lt;/strong>&lt;/p>
&lt;p>每个列族可以单独设置，默认是3。按业务需求要合理设置。&lt;/p>
&lt;p>&lt;strong>数据类型&lt;/strong>&lt;/p>
&lt;p>任何可被转为字节数组的东西可以作为值存入，输入可以是字符串，数字，复杂对象，甚至图像，只要他们能转为字节。&lt;/p>
&lt;p>&lt;strong>demo&lt;/strong>&lt;/p>
&lt;p>业务场景：评价审核日志收集。&lt;/p>
&lt;p>从新增（编辑）一条评价到 诚信审核反馈并储存审核结果完成，定义为一个&lt;strong>送审事务。&lt;/strong>&lt;/p>
&lt;p>每个送审事务都有一个&lt;strong>唯一标识&lt;/strong>（transId），在整个事务的各环节包括 :**评价信息存储-&amp;gt;评价送审-&amp;gt;****诚信审核-&amp;gt;审核反馈-&amp;gt;**&lt;strong>审核结果存储&lt;/strong>。&lt;/p>
&lt;p>针对每个送审事务的各环节，进行日志收集。&lt;/p>
&lt;p>查询场景1：根据评价id ，查询所有的审核日志。&lt;/p>
&lt;p>查询场景2：根据评价id 和事务id, 查询该事务的审核日志。&lt;/p>
&lt;p>表结构定义：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">参数&lt;/th>
&lt;th style="text-align:left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">表名&lt;/td>
&lt;td style="text-align:left">〜〜〜〜&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">TTL&lt;/td>
&lt;td style="text-align:left">永久&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Row Key&lt;/td>
&lt;td style="text-align:left">hash(BizType_BizID)_BizType_BizID_AuditTransID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">版本数&lt;/td>
&lt;td style="text-align:left">3（针对同一个审核事务，诚信会有多次反馈结果，可保留多个版本的反馈结果）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">列族&lt;/td>
&lt;td style="text-align:left">b:基础信息族&lt;br>e:扩展信息族&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Columns&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">列族&lt;/th>
&lt;th style="text-align:left">字段名&lt;/th>
&lt;th style="text-align:left">字段名缩写&lt;/th>
&lt;th style="text-align:left">&lt;strong>类型&lt;/strong>&lt;/th>
&lt;th style="text-align:left">&lt;strong>含义&lt;/strong>&lt;/th>
&lt;th style="text-align:left">&lt;strong>备注&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">基础信息族（b）&lt;/td>
&lt;td style="text-align:left">TransType&lt;/td>
&lt;td style="text-align:left">ty&lt;/td>
&lt;td style="text-align:left">tinyint(4)&lt;/td>
&lt;td style="text-align:left">事务类型&lt;/td>
&lt;td style="text-align:left">0：用户发起 1：诚信回扫 2：用户申诉 3：用户举报 4:ugc 发起&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Version&lt;/td>
&lt;td style="text-align:left">vs&lt;/td>
&lt;td style="text-align:left">bigint(20)&lt;/td>
&lt;td style="text-align:left">送审版本&lt;/td>
&lt;td style="text-align:left">内容生成时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">EventType0&lt;/td>
&lt;td style="text-align:left">et0&lt;/td>
&lt;td style="text-align:left">bigint(20)&lt;/td>
&lt;td style="text-align:left">事件0发生时间&lt;/td>
&lt;td style="text-align:left">新增完成事件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">EventType1&lt;/td>
&lt;td style="text-align:left">et1&lt;/td>
&lt;td style="text-align:left">bigint(20)&lt;/td>
&lt;td style="text-align:left">事件1发生时间&lt;/td>
&lt;td style="text-align:left">诚信送审完成事件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">EventType2&lt;/td>
&lt;td style="text-align:left">et2&lt;/td>
&lt;td style="text-align:left">bigint(20)&lt;/td>
&lt;td style="text-align:left">事件2发生时间&lt;/td>
&lt;td style="text-align:left">诚信审核反馈事件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">....&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;strong>AuditResult&lt;/strong>&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;strong>tinyint(4)&lt;/strong>&lt;/td>
&lt;td style="text-align:left">诚信审核结果&lt;/td>
&lt;td style="text-align:left">&lt;strong>0:无 1:通过 2: 违规&lt;/strong>&lt;br>&lt;strong>AuditResultEnum&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;strong>AuditDetail&lt;/strong>&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">string&lt;/td>
&lt;td style="text-align:left">诚信审核标签明细&lt;/td>
&lt;td style="text-align:left">{处理建议，多标签...}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;strong>AuditTime&lt;/strong>&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">bigint(20)&lt;/td>
&lt;td style="text-align:left">诚信审核时间&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">....&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="hbase系统架构">&lt;strong>HBase系统架构&lt;/strong>&lt;/h1>
&lt;p>&lt;img src="../imgs/hbase_basic_211212_4.png" alt="hbase_basic_211212_4.png">&lt;/p>
&lt;p>&lt;strong>Client&lt;/strong>&lt;/p>
&lt;p>包含访问HBase的接口，并维护cache来加快对HBase的访问。&lt;/p>
&lt;p>对于管理类操作，Client与HMaster进行RPC。&lt;/p>
&lt;p>对于数据读写操作，Client与HRegionServer进行RPC。&lt;/p>
&lt;p>&lt;strong>Zookeeper&lt;/strong>&lt;/p>
&lt;p>保证任何时候，集群中只有一个master。&lt;/p>
&lt;p>实时监控Region server的上线和下线信息。并实时通知给master。&lt;/p>
&lt;p>存储HBase的schema和table元数据。&lt;/p>
&lt;p>&lt;strong>Master&lt;/strong>&lt;/p>
&lt;p>为Region server分配region，负责Region server的负载均衡.&lt;/p>
&lt;p>发现失效的Region server并重新分配其上的region。&lt;/p>
&lt;p>处理表的建立，删除等操作。&lt;/p>
&lt;p>&lt;strong>Region Server&lt;/strong>&lt;/p>
&lt;p>维护master分配给他的region，处理对这些region的io请求。&lt;/p>
&lt;p>负责切分正在运行过程中变的过大的region。&lt;/p>
&lt;p>当用户需要对数据进行读写操作时，需要访问HRegionServer。&lt;/p>
&lt;p>&lt;strong>Region&lt;/strong>&lt;/p>
&lt;p>table在行的方向上分隔为多个Region。&lt;/p>
&lt;p>随着数据不断插入表，当region的某个列族达到一个阈值时就会拆分新的region。&lt;/p>
&lt;p>&lt;strong>Store&lt;/strong>&lt;/p>
&lt;p>每一个region由一个或多个store组成，hbase会为每个列族建一个store。&lt;/p>
&lt;p>HStore存储由两部分组成：MemStore和StoreFiles。 写入数据首先会放在MemStore,当MemStore满了以后会Flush成一个 StoreFile（实际存储在HDHS上的是HFile）。&lt;/p>
&lt;p>写操作只要进入内存中就可以立即返回，保证了HBase I/O的高性能。&lt;/p>
&lt;p>&lt;strong>HFile&lt;/strong>&lt;/p>
&lt;p>HFile就是实际的存储文件。HFile由多个Data Block组成，Data Block是HBase的最小存储单元。&lt;/p>
&lt;p>HBase 会基于Data Block的做缓存——BlockCache。&lt;/p>
&lt;p>客户的读请求会先到memstore中查数据，若查不到就到blockcache中查，再查不到就会从磁盘上读，并把读入的数据同时放入blockcahce。&lt;/p>
&lt;p>HBase的blockcache使用的是LRU（最近最少使用）淘汰策略，当BlockCache的大小达到上限后，会触发缓存淘汰机制，将最老的一批数据淘汰掉。&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://km.sankuai.com/page/164927192">https://km.sankuai.com/page/164927192&lt;/a>&lt;/p></description></item></channel></rss>