<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Herbdocs – MySQL</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/</link><description>Recent content in MySQL on Herbdocs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 01.SQL查询流程</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/01.SQL%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/01.SQL%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B/</guid><description>
&lt;blockquote>
&lt;p>本文介绍 MySQL 的逻辑架构。如一条 SQL 查询语句的执行过程等。&lt;/p>
&lt;/blockquote>
&lt;h1 id="逻辑架构">逻辑架构&lt;/h1>
&lt;p>MySQL 的逻辑架构图&lt;/p>
&lt;p>&lt;img src="../imgs/sql_process_20220409_1.png" alt="sql_process_20220409_1.png">&lt;/p>
&lt;p>大体来说，MySQL 可以分为&lt;strong>Server 层&lt;/strong>和&lt;strong>存储引擎层&lt;/strong>两部分。&lt;/p>
&lt;h2 id="server层">Server层&lt;/h2>
&lt;p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/p>
&lt;h2 id="存储引擎层">存储引擎层&lt;/h2>
&lt;p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。&lt;/p>
&lt;p>现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。创建表时如果不指定引擎类型，默认使用的就是 InnoDB。指定引擎：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>memory &lt;span style="color:#177500"># 指定使用内存引擎创建表&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>不同存储引擎的表数据存取方式不同，支持的功能也不同。&lt;/p>
&lt;h1 id="连接器">连接器&lt;/h1>
&lt;p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般写法：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql -h&lt;span style="color:#000">$ip&lt;/span> -P&lt;span style="color:#000">$port&lt;/span> -u&lt;span style="color:#000">$user&lt;/span> -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>连接命令 mysql 是客户端命令，完成 TCP 握手后，连接器会验证身份。如果身份不对会返回“Access denied for user”的错误。身份通过后，该连接的权限判断都依赖此时读取的权限（不会热更新权限）。
创建 2 个连接，如果都是空闲，使用其中一个连接 &lt;code>show processlist&lt;/code>&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show processlist;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------+------+---------+------+----------+------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Id | User | Host      | db   | Command | Time | State    | Info             |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------+------+---------+------+----------+------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> | root | localhost | NULL | Sleep   |   &lt;span style="color:#1c01ce">20&lt;/span> |          | NULL             |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">5&lt;/span> | root | localhost | NULL | Query   |    &lt;span style="color:#1c01ce">0&lt;/span> | starting | show processlist |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------+------+---------+------+----------+------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">2&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可以看到 Command 列显示“Sleep”的行是一个空闲的连接。&lt;/p>
&lt;h2 id="自动断开">自动断开&lt;/h2>
&lt;p>客户端长时间没有动静，连接器会自动断开。由参数 wait_timeout 控制，默认 8 小时。&lt;/p>
&lt;h2 id="长连接">长连接&lt;/h2>
&lt;p>长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。&lt;/p>
&lt;p>建立连接的过程通常是比较复杂的，建议使用中尽量减少建立连接的动作，也就是尽量使用长连接。&lt;/p>
&lt;p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;p>1、定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。&lt;/p>
&lt;p>2、使用 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。&lt;/p>
&lt;h1 id="查询缓存">查询缓存&lt;/h1>
&lt;p>连接建立完成后，就可以执行 select 语句。执行逻辑就会来到第二步：查询缓存。&lt;/p>
&lt;p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，这个 value 就会被直接返回给客户端。&lt;/p>
&lt;p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。如果查询命中缓存，MySQL 不需要执行后面的复杂操作，直接返回结果，效率会很高。&lt;/p>
&lt;p>但是建议不要使用查询缓存，往往弊大于利。&lt;/p>
&lt;p>1、缓存需要语句完全相等，包括参数。&lt;/p>
&lt;p>2、表更新后就会失效 因此，只有在表更新频率不高，查询语句完全一致的情况下，可以手动开启缓存，其他一律关闭。&lt;/p>
&lt;p>( 注意：mysql8之后，取消了缓存功能。)&lt;/p>
&lt;p>MySQL 也提供了这种“按需使用”的方式。将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> SQL_CACHE * from T where &lt;span style="color:#000">ID&lt;/span>&lt;span style="color:#000">=&lt;/span>10；
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="分析器">分析器&lt;/h1>
&lt;p>如果没有命中查询缓存，就要开始真正执行语句了。首先需要对 SQL 语句做解析。&lt;/p>
&lt;h2 id="词法分析">词法分析&lt;/h2>
&lt;p>分析器先会做“词法分析”。解析字符串分别是什么，代表什么。&lt;/p>
&lt;p>词法分析的特征：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">词性&lt;/th>
&lt;th style="text-align:left">内容&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">关键字&lt;/td>
&lt;td style="text-align:left">select、from、where&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">标志符&lt;/td>
&lt;td style="text-align:left">id、name、age&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">操作符&lt;/td>
&lt;td style="text-align:left">=、&amp;gt;、&amp;lt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">常量&lt;/td>
&lt;td style="text-align:left">1、2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="语法分析">语法分析&lt;/h2>
&lt;p>然后做“语法分析”。语法分析会根据词法分析获得的词来匹配语法规则，最终生成一个抽象语法树，每个词作为语法树的叶子节点出现。&lt;/p>
&lt;p>根据语法规则，判断 SQL 语句是否满足语法。如果语句不对，就会收到“You have an error in your SQL syntax”的错误提醒。&lt;/p>
&lt;h2 id="语义分析">语义分析&lt;/h2>
&lt;p>对语法树进行有效性检查，检查语法树中对应的表、列、函数、表达式是否有对应的元数据，将抽象语法树转换为逻辑执行计划（关系代数表达式）。&lt;/p>
&lt;p>抽象语法树表达的寓意还仅仅限制在能够保证应用的 SQL 语句符合 SQL 标准的规范，但是对于 SQL 语句的内在含义还需要做有效性检查。&lt;/p>
&lt;h1 id="优化器">优化器&lt;/h1>
&lt;p>经过了分析器，MySQL 就知道要做什么。在开始执行之前，还要先经过优化器的处理。&lt;/p>
&lt;p>优化器是在表里面有多个索引的时候，决定&lt;strong>使用哪个索引&lt;/strong>；或者在一个语句有多表关联（join）的时候，决定&lt;strong>各个表的连接顺序&lt;/strong>。&lt;/p>
&lt;h1 id="执行器">执行器&lt;/h1>
&lt;p>MySQL 通过分析器知道要做什么，通过优化器知道该怎么做，就进入了执行器阶段，开始执行语句。&lt;/p>
&lt;p>首先判断执行权限。&lt;/p>
&lt;p>然后继续执行。&lt;/p>
&lt;p>如果没有索引，慢查询日志会有一个 &lt;strong>row_examined 的字段，表示执行器获取到的数据行数，不是真正的扫描行数&lt;/strong>。&lt;/p></description></item><item><title>Docs: 02.日志</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/02.%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/02.%E6%97%A5%E5%BF%97/</guid><description>
&lt;blockquote>
&lt;p>本文介绍 MySQL 的日志，同时会介绍一个 SQL 更新语句的执行过程。&lt;/p>
&lt;/blockquote>
&lt;h1 id="背景">背景&lt;/h1>
&lt;p>SQL 更新语句和查询语句的大致流程类似，首先通过连接器连接数据库，然后分析器会通过词法和语法解析知道这是更新语句（跟这个表有关的查询缓存会失效）。&lt;/p>
&lt;p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块：redo log（重做日志）和 binlog（归档日志）&lt;/p>
&lt;h1 id="名词介绍">名词介绍&lt;/h1>
&lt;p>&lt;strong>物理/逻辑日志&lt;/strong>&lt;/p>
&lt;p>物理日志记录的是修改页的的详情，逻辑日志记录的是操作语句。物理日志恢复的速度快于逻辑日志。&lt;/p>
&lt;h1 id="redo-log">redo log&lt;/h1>
&lt;p>redo log 是&lt;strong>事务日志、物理机日志&lt;/strong>&lt;/p>
&lt;p>先写日志再写磁盘的过程就是 WAL 技术（Write-Ahead Logging）。&lt;/p>
&lt;p>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面，并更新内存，此时更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。&lt;/p>
&lt;p>InnoDB 的 redo log 是固定大小的。如果 redo log 满了，就会将 redo log 中一部分的记录更新到磁盘，然后将这些记录从 redo log 中删除腾出空间。&lt;/p>
&lt;p>redo log 大小固定，从头开始写，写到末尾会重头开始写。&lt;/p>
&lt;p>&lt;img src="../imgs/mysql_log_20220409_1.png" alt="mysql_log_20220409_1.png">&lt;/p>
&lt;p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。&lt;/p>
&lt;p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。&lt;/p>
&lt;h2 id="redo-log作用">redo log作用&lt;/h2>
&lt;p>保证事务的原子性和持久性。&lt;/p>
&lt;p>redo log 是重做日记，属于 InnoDB 引擎的日志。&lt;/p>
&lt;p>前滚操作：具备 crash-safe 能力，提供断电重启时解决事务丢失数据问题。&lt;/p>
&lt;p>提高性能：先写 redo log记录更新。当等到有空闲线程、内存不足、redo log 满了时刷脏。写 redo log 是顺序写入，刷脏是随机写，节省的是随机写磁盘的 IO 消耗（转成顺序写），所以性能得到提升。此技术称为 WAL 技术：Write-Ahead Logging，它的关键点就是先写日记磁盘，再写数据磁盘。&lt;/p>
&lt;h2 id="redo-log写入机制">redo log写入机制&lt;/h2>
&lt;p>redo log 可能存在的三种状态，对应下图中的三个颜色块：&lt;/p>
&lt;p>&lt;img src="../imgs/mysql_log_20220409_2.png" alt="mysql_log_20220409_2.png">&lt;/p>
&lt;p>[MySQL redo log 存储状态]&lt;/p>
&lt;p>这三种状态分别是：&lt;/p>
&lt;p>1、存在 redo log buffer 中，物理上是在 MySQL 进程内存中，就是图中的红色部分；&lt;/p>
&lt;p>2、写到磁盘 (write)，但是没有持久化（fsync)，物理上是在文件系统的 page cache 里面，也就是图中的黄色部分；&lt;/p>
&lt;p>3、持久化到磁盘，对应的是 hard disk，也就是图中的绿色部分。&lt;/p>
&lt;p>日志写到 redo log buffer 是很快的，wirte 到 page cache 也差不多，但是持久化到磁盘的速度就慢多了。&lt;/p>
&lt;h3 id="redo-log持久化">redo log持久化&lt;/h3>
&lt;p>为了控制 redo log 的写入策略，InnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值（默认为1）：&lt;/p>
&lt;p>0 表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;&lt;/p>
&lt;p>1 表示每次事务提交时都将 redo log 直接持久化到磁盘；&lt;/p>
&lt;p>2 表示每次事务提交时都只是把 redo log 写到 page cache。&lt;/p>
&lt;p>InnoDB 有一个后台线程，每隔 1 秒就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。&lt;/p>
&lt;p>注意，事务执行中间过程的 redo log 也是直接写在 redo log buffer 中的，这些 redo log 也会被后台线程一起持久化到磁盘。也就是一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。&lt;/p>
&lt;p>实际除了后台线程每秒一次的轮询操作外，还有两种场景会让一个没有提交的事务的 redo log 写入到磁盘中：&lt;/p>
&lt;p>1、&lt;strong>redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动写盘&lt;/strong>。&lt;/p>
&lt;p>注意，由于这个事务并没有提交，所以这个写盘动作只是 write，而没有调用 fsync，也就是只留在了文件系统的 page cache。&lt;/p>
&lt;p>2、&lt;strong>并行的事务提交的时候，顺带将这个事务的 redo log buffer 持久化到磁盘&lt;/strong>。&lt;/p>
&lt;p>假设一个事务 A 执行到一半，已经写了一些 redo log 到 buffer 中，这时候有另外一个线程的事务 B 提交，如果 innodb_flush_log_at_trx_commit 设置的是 1，那么按照这个参数的逻辑，事务 B 要把 redo log buffer 里的日志全部持久化到磁盘。这时候，就会带上事务 A 在 redo log buffer 里的日志一起持久化到磁盘。&lt;/p>
&lt;p>两阶段提交时序上 redo log 先 prepare， 再写 binlog，最后再把 redo log commit。如果把 innodb_flush_log_at_trx_commit 设置成 1，那么 redo log 在 prepare 阶段就要持久化一次，因为有一个崩溃恢复逻辑是要依赖于 prepare 的 redo log，再加上 binlog 来恢复的。&lt;/p>
&lt;p>每秒一次后台轮询刷盘，再加上崩溃恢复这个逻辑，InnoDB 就认为 redo log 在 commit 时就不需要 fsync 了，只会 write 到文件系统的 page cache 中就够了。&lt;/p>
&lt;p>通常 MySQL 的“双 1”配置，指 sync_binlog 和 innodb_flush_log_at_trx_commit 都设置成 1。也就是说，一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。&lt;/p>
&lt;h3 id="组提交-group-commit">组提交(group commit)&lt;/h3>
&lt;p>MySQL 看到的 TPS 是每秒两万的话，每秒就会写四万次磁盘。但用工具测试，磁盘能力也就两万左右，怎么能实现两万的 TPS？&lt;/p>
&lt;p>日志逻辑序列号（log sequence number，LSN）是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。&lt;/p>
&lt;p>LSN 也会写到 InnoDB 的数据页中，来确保数据页不会被多次执行重复的 redo log。&lt;/p>
&lt;p>&lt;img src="../imgs/mysql_log_20220409_3.png" alt="mysql_log_20220409_3.png">&lt;/p>
&lt;p>[redo log组提交]&lt;/p>
&lt;p>上图所示，三个并发事务 (trx1, trx2, trx3) 在 prepare 阶段，都写完 redo log buffer，持久化到磁盘的过程，对应的 LSN 分别是 50、120 和 160。&lt;/p>
&lt;p>由图得到：&lt;/p>
&lt;p>1、trx1 是第一个到达的，会被选为这组的 leader；&lt;/p>
&lt;p>2、等 trx1 要开始写盘的时候，这个组里面已经有了三个事务，这时候 LSN 也变成了 160；&lt;/p>
&lt;p>3、trx1 去写盘的时候，带的就是 LSN=160，因此等 trx1 返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；&lt;/p>
&lt;p>4、此时 trx2 和 trx3 就可以直接返回了。&lt;/p>
&lt;p>所以一次组提交里面，组员越多，节约磁盘 IOPS 的效果越好。但如果只有单线程压测，那就只能老老实实地一个事务对应一次持久化操作了。&lt;/p>
&lt;p>在并发更新场景下，第一个事务写完 redo log buffer 以后，接下来这个 fsync 越晚调用，组员可能越多，节约 IOPS 的效果就越好。&lt;/p>
&lt;p>为了让一次 fsync 带的组员更多，MySQL 有一个很有趣的优化：拖时间。&lt;/p>
&lt;p>两阶段提交的过程：&lt;/p>
&lt;p>1、写入 redo log，处于 prepare 阶段&lt;/p>
&lt;p>2、写 binlog&lt;/p>
&lt;p>3、提交事务，处于 commit 阶段&lt;/p>
&lt;p>实际上，第 2 步写 binlog 是分为两步的：&lt;/p>
&lt;p>1）先把 binlog 从 binlog cache 中写到磁盘上的 binlog 文件；&lt;/p>
&lt;p>2）调用 fsync 持久化。&lt;/p>
&lt;p>MySQL 为了让组提交的效果更好，把 redo log 做 fsync 的时间拖到了步骤 1 之后。也就是两阶段提交的细化过程：&lt;/p>
&lt;p>1、redo log prepare; write&lt;/p>
&lt;p>2、binlog; write&lt;/p>
&lt;p>3、redo log prepare; fsync&lt;/p>
&lt;p>4、binlog; fsync&lt;/p>
&lt;p>5、redo log commit; write&lt;/p>
&lt;p>不过通常情况下上面第 3 步执行得会很快，所以 binlog 的 write 和 fsync 间的间隔时间短，导致能集合到一起持久化的 binlog 比较少，因此 binlog 的组提交的效果通常不如 redo log 的效果那么好。&lt;/p>
&lt;p>如果想提升 binlog 组提交的效果，可以通过设置 binlog_group_commit_sync_delay 或 binlog_group_commit_sync_no_delay_count 来实现。&lt;/p>
&lt;p>1、binlog_group_commit_sync_delay 参数，表示延迟多少微秒后才调用 fsync;&lt;/p>
&lt;p>2、binlog_group_commit_sync_no_delay_count 参数，表示累积多少次以后才调用 fsync。&lt;/p>
&lt;p>每次提交事务都要写 redo log 和 binlog，WAL 机制主要得益于两个方面：&lt;/p>
&lt;p>1、redo log 和 binlog 都是顺序写，磁盘的顺序写比随机写速度要快；&lt;/p>
&lt;p>2、组提交机制，可以大幅度降低磁盘的 IOPS 消耗。&lt;/p>
&lt;p>如果出现了 IO 性能瓶颈，可以考虑以下几种方法：&lt;/p>
&lt;p>1、设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 参数，减少 binlog 的写盘次数。这个方法是基于“额外的故意等待”来实现的，因此可能会增加语句的响应时间，但没有丢失数据的风险。&lt;/p>
&lt;p>2、将 sync_binlog 设置为大于 1 的值（比较常见是 100~1000）。风险：主机掉电会丢 binlog 日志。&lt;/p>
&lt;p>3、将 innodb_flush_log_at_trx_commit 设置为 2。风险：主机掉电的时候会丢数据。&lt;/p>
&lt;p>（不建议把 innodb_flush_log_at_trx_commit 设置成 0。因为这表示 redo log 只保存在内存，MySQL 本身异常重启也会丢数据风险太大。而 redo log 写到文件系统的 page cache 的速度也是很快的，所以将这个参数设置成 2 跟设置成 0 其实性能差不多，但这样做 MySQL 异常重启时就不会丢数据，相比之下风险更小。）&lt;/p>
&lt;p>FAQ&lt;/p>
&lt;p>1、执行 update 语句以后，再去执行 hexdump 命令直接查看 ibd 文件内容，没有看到数据有改变？&lt;/p>
&lt;p>可能是因为 WAL 机制的原因。update 语句执行完成后，InnoDB 只保证写完了 redo log、内存，可能还没来得及将数据写到磁盘。&lt;/p>
&lt;p>2、为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的？&lt;/p>
&lt;p>这么设计的主要原因是，binlog 是不能“被打断的”。一个事务的 binlog 必须连续写，因此要整个事务完成后，再一起写到文件里。&lt;/p>
&lt;p>而 redo log 并没有这个要求，中间有生成的日志可以写到 redo log buffer 中。redo log buffer 中的内容还能“搭便车”，其他事务提交的时候可以被一起写到磁盘中。&lt;/p>
&lt;p>3、事务执行期间，没到提交阶段，如果发生 crash，redo log 丢了会不会导致主备不一致？&lt;/p>
&lt;p>不会。因为这时候 binlog 也还在 binlog cache 里，没发给备库。crash 以后 redo log 和 binlog 都没有了，从业务角度看这个事务也没有提交，所以数据是一致的。&lt;/p>
&lt;p>4、binlog 写完盘后发生 crash，这时还没给客户端答复就重启。等客户端再重连进来，发现事务已经提交成功了，是 bug？&lt;/p>
&lt;p>不是 bug。实际上数据库的 crash-safe 保证的是：&lt;/p>
&lt;p>1、如果客户端收到事务成功的消息，事务一定持久化了；&lt;/p>
&lt;p>2、如果客户端收到事务失败（比如主键冲突、回滚等）的消息，事务就一定失败了；&lt;/p>
&lt;p>3、如果客户端收到“执行异常”的消息，应用需要重连后通过查询当前状态来继续后续的逻辑。此时数据库只需要保证内部（数据和日志之间，主库和备库之间）一致就可以。&lt;/p>
&lt;p>联想更极端的情况，如果整个事务都提交了，从库也收到 binlog 并执行了，但主库和客户端网络断开，导致事务成功的包无法返回，那么这种也算事务成功执行的。&lt;/p>
&lt;h2 id="flush">flush&lt;/h2>
&lt;p>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。&lt;/p>
&lt;p>将脏页数据写到磁盘中。称作刷脏页（flush）。&lt;/p>
&lt;h3 id="触发flush">触发flush&lt;/h3>
&lt;p>1、redo log 空间满了。&lt;/p>
&lt;p>2、系统内存不足。&lt;/p>
&lt;p>需要淘汰一些数据页，空出内存给别的数据页使用。如果淘汰的是“脏页”，需要先将脏页写到磁盘&lt;/p>
&lt;p>3、系统“空闲”时。&lt;/p>
&lt;p>4、MySQL正常关闭时。&lt;/p>
&lt;p>下次启动时可以直接从磁盘读数据，启动速度更快。&lt;/p>
&lt;p>针对第 1 种情况，要尽量避免，对性能影响较大。&lt;/p>
&lt;p>针对第 2 种情况是常态。InnoDB 用缓冲池（buffer pool）管理内存，缓冲池中的内存页有三种状态：&lt;/p>
&lt;p>1、还没有使用的；&lt;/p>
&lt;p>2、使用了并且是干净页；&lt;/p>
&lt;p>3、使用了并且是脏页。&lt;/p>
&lt;p>InnoDB 的策略是尽量使用内存，因此对于一个长时间运行的库来说，未被使用的页面很少。&lt;/p>
&lt;p>但是出现以下两种情况，会明显影响性能。&lt;/p>
&lt;p>1、一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长；&lt;/p>
&lt;p>2、日志写满，更新全部堵住，写性能跌为 0。&lt;/p>
&lt;p>所以，InnoDB 需要有控制脏页比例的机制，来尽量避免上面的这两种情况。&lt;/p>
&lt;h3 id="flush控制策略">flush控制策略&lt;/h3>
&lt;p>1、设置磁盘 IO 能力&lt;/p>
&lt;p>通过 innodb_io_capacity 参数设置磁盘的 IO 能力，建议设置成磁盘的 IOPS。&lt;/p>
&lt;p>fio 工具可以测试磁盘的 IOPS&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>fio -filename&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$filename&lt;/span> -direct&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> -iodepth &lt;span style="color:#1c01ce">1&lt;/span> -thread -rw&lt;span style="color:#000">=&lt;/span>randrw -ioengine&lt;span style="color:#000">=&lt;/span>psync -bs&lt;span style="color:#000">=&lt;/span>16k -size&lt;span style="color:#000">=&lt;/span>500M -numjobs&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span> -runtime&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span> -group_reporting -name&lt;span style="color:#000">=&lt;/span>mytest 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>2、脏页比例&lt;/p>
&lt;p>参数 innodb_max_dirty_pages_pct 是脏页比例上限，默认值是 75%。&lt;/p>
&lt;p>&lt;strong>脏页比例&lt;/strong>是通过 Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total 得到的，命令参考：&lt;/p>
&lt;p>从mysql5.7.6开始information_schema.global_status已经开始被舍弃，为了兼容性，此时需要打开 show_compatibility_56&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">show&lt;/span> &lt;span style="color:#000">variables&lt;/span> &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#c41a16">&amp;#39;%show_compatibility_56%&amp;#39;&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">查看状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">方法&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>&lt;span style="color:#000">：临时打开&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#a90d91">global&lt;/span> &lt;span style="color:#000">show_compatibility_56&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">方法&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>&lt;span style="color:#000">：永久打开&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">vim&lt;/span> &lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">etc&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">my&lt;/span>.&lt;span style="color:#000">cnf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">show_compatibility_56&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">添加该行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>查看脏页比例命令：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">use&lt;/span> &lt;span style="color:#000">information_schema&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">VARIABLE_VALUE&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">global_status&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">VARIABLE_NAME&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;Innodb_buffer_pool_pages_dirty&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">VARIABLE_VALUE&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">global_status&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">VARIABLE_NAME&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;Innodb_buffer_pool_pages_total&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">/@&lt;/span>&lt;span style="color:#000">b&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>3、刷脏页速度&lt;/p>
&lt;p>InnoDB 会根据当前的脏页比例（假设为 M），算出一个范围在 0 到 100 之间的数字 F1(M)，计算这个数字的伪代码类似这样：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">F1&lt;/span>(&lt;span style="color:#000">M&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">if&lt;/span> &lt;span style="color:#000">M&lt;/span>&lt;span style="color:#000">&amp;gt;=&lt;/span>&lt;span style="color:#000">innodb_max_dirty_pages_pct&lt;/span> &lt;span style="color:#000">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>      &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#1c01ce">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#1c01ce">100&lt;/span>&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">M&lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#000">innodb_max_dirty_pages_pct&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>InnoDB 每次写入的日志都有一个序号，当前写入的序号跟 checkpoint 对应的序号之间的差值，假设为 N。InnoDB 根据 N 算出一个范围在 0 到 100 之间的数字，计算公式可以 F2(N)。这个算法比较复杂， N 越大值越大。&lt;/p>
&lt;p>根据上述算得的 F1(M) 和 F2(N) 两个值，取其中较大的值记为 R，之后引擎就可以按照 innodb_io_capacity 定义的能力乘以 R% 来控制刷脏页的速度。&lt;/p>
&lt;p>4、刷新相邻页面策略&lt;/p>
&lt;p>一旦一个查询请求需要在执行过程中先 flush 掉一个脏页时，该查询可能比平时慢。&lt;/p>
&lt;p>而 MySQL 中的一个机制，可能会让查询更慢：&lt;/p>
&lt;p>在准备刷一个脏页时，如果该数据页旁边的数据页刚好是脏页，就会把这个“邻居”一起刷掉；而且这个把“邻居”拖下水的逻辑还可以继续蔓延，即对于每个邻居数据页，如果跟它相邻的数据页也还是脏页的话，也会被放到一起刷。&lt;/p>
&lt;p>InnoDB 中，innodb_flush_neighbors 参数用来控制该行为，值为 1 时会有上述的“连坐”机制，开启脏页相邻淘汰，值为 0 时表示关闭脏页相邻淘汰。（MySQL 8.0中，默认 0）&lt;/p>
&lt;p>找“邻居”这个优化在机械硬盘时代是很有意义的，可以减少很多随机 IO。机械硬盘的随机 IOPS 一般只有几百，相同的逻辑操作减少随机 IO 就意味着系统性能的大幅度提升。&lt;/p>
&lt;p>SSD IOPS 值有上千，建议设置该参数为 0。&lt;/p>
&lt;h1 id="binlog">binlog&lt;/h1>
&lt;p>MySQL 整体来看分为两块：Server 层主要做的是功能层面的事情；引擎层负责存储相关的具体事宜。redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。&lt;/p>
&lt;h2 id="为什么会有两份日志">为什么会有两份日志&lt;/h2>
&lt;p>最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统，也就是 redo log 来实现 crash-safe 能力。&lt;/p>
&lt;h2 id="binlog写入机制">binlog写入机制&lt;/h2>
&lt;p>写入逻辑：事务执行过程中，先把日志写到 binlog cache，事务提交的时候，再把 binlog cache 写到 binlog 文件中。&lt;/p>
&lt;p>一个事务的 binlog 是不能被拆开的，因此不论这个事务多大，也要确保一次性写入。涉及到 binlog cache 的保存问题。&lt;/p>
&lt;p>系统给 binlog cache 分配了一片内存，每个线程一个，参数 binlog_cache_size 用于控制单个线程内 binlog cache 所占内存的大小。如果超过了这个参数规定的大小，就要暂存到磁盘。&lt;/p>
&lt;p>事务提交的时候，执行器把 binlog cache 里的完整事务写入到 binlog 中，并清空 binlog cache。&lt;/p>
&lt;p>&lt;img src="../imgs/mysql_log_20220409_4.png" alt="mysql_log_20220409_4.png">&lt;/p>
&lt;p>[binlog写盘状态]&lt;/p>
&lt;p>可以看到，每个线程有自己的 binlog cache，但是共用同一份 binlog 文件。上图中的 write，指的就是指把日志写入到文件系统的 page cache，并没有把数据持久化到磁盘，所以速度比较快。图中的 fsync，才是将数据持久化到磁盘的操作。一般情况下认为 fsync 才占磁盘的 IOPS。&lt;/p>
&lt;h3 id="binlog持久化">binlog持久化&lt;/h3>
&lt;p>write 和 fsync 的时机，是由参数 sync_binlog 控制的：&lt;/p>
&lt;p>1、sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；&lt;/p>
&lt;p>2、sync_binlog=1 的时候，表示每次提交事务都会执行 fsync；&lt;/p>
&lt;p>3、sync_binlog=N(N&amp;gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。&lt;/p>
&lt;p>出现 IO 瓶颈时，将 sync_binlog 设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成 0，常见将其设置为 100~1000 中的某个数值。&lt;/p>
&lt;p>将 sync_binlog 设置为 N，对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。&lt;/p>
&lt;h2 id="binlog日志格式">binlog日志格式&lt;/h2>
&lt;p>statement：记录执行的 SQL 语句。&lt;/p>
&lt;p>row：会记录行的内容（包括 id），记两条，更新前和更新后都有。&lt;/p>
&lt;p>mixed：以上两种混合，可以利用 statment 格式的优点，同时又避免了数据不一致的风险。&lt;/p>
&lt;p>mixed 格式存在的场景：&lt;/p>
&lt;p>1、有些 statement 格式的 binlog 可能会导致主备不一致，所以要使用 row 格式。原因：如果 where 条件中有多个索引，主备库在执行这条语句时，选择的索引可能不同执行结果也就不同。&lt;/p>
&lt;p>2、row 格式的缺点是很占空间。比如一个 delete 语句删掉 10 万行数据，用 statement 的话就是一个 SQL 语句被记录到 binlog 中，占用几十个字节的空间。但如果用 row 格式就要把这 10 万条记录都写到 binlog 中。这样不仅会占用更大的空间，同时写 binlog 也要耗费 IO 资源，影响执行速度。&lt;/p>
&lt;p>3、折中方案，MySQL 会判断 SQL 语句是否可能引起主备不一致，如果可能就用 row 格式，否则就用 statement 格式。&lt;/p>
&lt;p>现在越来越多的场景要求把 MySQL 的 binlog 格式设置成 row。比如恢复数据。row 格式记录了操作前后的数据，可以直接恢复。&lt;/p>
&lt;p>由 delete、insert 或者 update 语句导致的数据操作错误，需要恢复到操作之前状态的情况，也时有发生。MariaDB 的 &lt;a href="https://mariadb.com/kb/en/library/flashback">Flashback&lt;/a> 工具就是基于这种原理来回滚数据的。&lt;/p>
&lt;p>mix 格式举例：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>, &lt;span style="color:#000">now&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>查看 binlog 日志是 statement 格式。
mysqlbinlog 工具查看，原来 binlog 在记录 event 的时候，多记了一条命令：SET TIMESTAMP=1546103491。它用 SET TIMESTAMP 命令约定了接下来的 now() 函数的返回时间。&lt;/p>
&lt;p>因此，得出结论：重放 binlog 数据，将 statement 语句直接拷贝出来执行有很大风险。&lt;/p>
&lt;p>标准做法：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysqlbinlog master.000001  --start-position&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2738&lt;/span> --stop-position&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2973&lt;/span> | mysql -h127.0.0.1 -P13000 -u&lt;span style="color:#000">$user&lt;/span> -p&lt;span style="color:#000">$pwd&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>(将 master.000001 文件里面从第 2738 字节到第 2973 字节中间这段内容解析出来，放到 MySQL 去执行。)&lt;/p>
&lt;h1 id="undo-log">undo log&lt;/h1>
&lt;p>(逻辑日志)——记录相反的sql语句&lt;/p>
&lt;p>1、保证事务的一致性&lt;/p>
&lt;p>2、InnoDB的MVCC&lt;/p>
&lt;h2 id="存储结构">存储结构&lt;/h2>
&lt;h3 id="回滚段与undo页">回滚段与undo页&lt;/h3>
&lt;p>undo日志的结构由&lt;strong>回滚段&lt;/strong>和&lt;strong>undo页&lt;/strong>组成&lt;/p>
&lt;ul>
&lt;li>undo日志中的空间划分为一个个的段，称为回滚段（rollback segment），共有128个段，每个段中有1024个undo页&lt;/li>
&lt;li>undo页可以重复使用，如果当前事务写入的记录小于页空间的3/4，那其他事务可以继续写入。&lt;/li>
&lt;/ul>
&lt;h3 id="回滚段与事务">回滚段与事务&lt;/h3>
&lt;ul>
&lt;li>每个事务只能用一个回滚段，一个回滚段可以在同一时刻服务于多个事务&lt;/li>
&lt;li>事务开始时会制定一个回滚段，事务进行中当数据被修改时，原始数据会比复制到回滚段&lt;/li>
&lt;/ul>
&lt;h3 id="undo页重用">undo页重用&lt;/h3>
&lt;p>开启的事务需要写 undo log 时，先去 undo log segment 中申请 undo 页（MySQL中默认一页是16k），如果每个事务分配一个页非常浪费（除非事务写数据非常大），TPS为1000，每秒需要 1000*16k=16M 的空间，每分钟需要 1G，很多空间都被浪费了。所以undo页被设计成&lt;strong>重用&lt;/strong>的。&lt;/p>
&lt;p>事务提交时并不会立刻删除undo页，因为重用使得该undo页中可能混杂着其它事务的undo log，undo log在commit后会被放到一个链表中，undo页使用空间如果小于3/4，表示可以重用而不会被回收，其它事务的undo log可以记录在当前undo页之后。&lt;/p>
&lt;p>undo log是离散的，因此清理对应的磁盘空间效率不高。&lt;/p>
&lt;h2 id="类型">类型&lt;/h2>
&lt;p>&lt;strong>插入页&lt;/strong>：在进行insert操作时产生的日志记录，由于insert只有事务本身可见，其他事务不可见，所以事务提交后insert日志页可以直接删除，不需要purge操作。&lt;/p>
&lt;p>&lt;strong>更新页&lt;/strong>：在进行删除或更新时产生的日志记录。更新页需要参与多版本机制（MVCC）,所以事务提交后一般不会删除，会放入链表，等待purge线程清除。&lt;/p>
&lt;h2 id="数据更新流程">数据更新流程&lt;/h2>
&lt;p>Buffer Pool、Redo、Undo日志的情况下，更新一次数据流程：&lt;/p>
&lt;ol>
&lt;li>发起更新数据请求&lt;/li>
&lt;li>Buffer Pool中没有数据则从磁盘中加载&lt;/li>
&lt;li>记录undo log&lt;/li>
&lt;li>执行器更新数据&lt;/li>
&lt;li>写入 redo log Buffer&lt;/li>
&lt;li>写入 redo log 到文件&lt;/li>
&lt;li>写入 binlog 到文件&lt;/li>
&lt;/ol>
&lt;h1 id="日志对比">日志对比&lt;/h1>
&lt;h2 id="redo-log与binlog对比">redo log与binlog对比&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">redo log&lt;/th>
&lt;th style="text-align:left">binlog&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">日志类型&lt;/td>
&lt;td style="text-align:left">物理日志&lt;/td>
&lt;td style="text-align:left">逻辑日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">文件大小&lt;/td>
&lt;td style="text-align:left">大小固定&lt;/td>
&lt;td style="text-align:left">可通过参数max_binlog_size设置每个binlog文件的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">实现方式&lt;/td>
&lt;td style="text-align:left">由innodb引擎层实现，不是所有引擎都有&lt;/td>
&lt;td style="text-align:left">由service层实现，所有引擎都可以使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">记录&lt;/td>
&lt;td style="text-align:left">采用循环写的方式记录，当写到结尾时，会回到开头循坏写日志&lt;/td>
&lt;td style="text-align:left">通过追加的方式记录，当文件大小大于给定值后，后续的日志会记录到新的文件上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">适用场景&lt;/td>
&lt;td style="text-align:left">适用于崩溃恢复（crash-safe）&lt;/td>
&lt;td style="text-align:left">适用于主从复制和数据恢复&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="update语句执行流程">update语句执行流程&lt;/h1>
&lt;p>update 语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; update T &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000">=&lt;/span>c+1 where &lt;span style="color:#000">ID&lt;/span>&lt;span style="color:#000">=&lt;/span>2;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>1、执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。
2、执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。&lt;/p>
&lt;p>3、引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。&lt;/p>
&lt;p>4、执行器生成这个操作的 binlog，并把 binlog 写入磁盘。&lt;/p>
&lt;p>5、执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。&lt;/p>
&lt;p>update 语句执行流程图&lt;/p>
&lt;p>&lt;img src="../imgs/mysql_log_20220409_5.png" alt="mysql_log_20220409_5.png">
&lt;img src="../imgs/mysql_log_20220409_6.png" alt="mysql_log_20220409_6.png">&lt;/p>
&lt;h1 id="两阶段提交">两阶段提交&lt;/h1>
&lt;p>更新内存后引擎层写 Redo log 将状态改成 prepare 为预提交第一阶段，Server 层写 Binlog，将状态改成 commit为提交第二阶段。两阶段提交可以确保 Binlog 和 Redo log 数据一致性。&lt;/p>
&lt;h2 id="数据备份同步">数据备份同步&lt;/h2>
&lt;p>1、找到最近时间的全量备份；&lt;/p>
&lt;p>2、基于备份的时间点重放 binlog。&lt;/p>
&lt;h2 id="容灾恢复过程">容灾恢复过程&lt;/h2>
&lt;p>1、判断 redo log 是否完整，如果判断是完整（commit）的，直接用 Redo log 恢复&lt;/p>
&lt;p>2、如果 redo log 只是预提交 prepare 但不是 commit 状态，这个时候就会去判断 binlog 是否完整，如果完整就提交 Redo log，用 redo log 恢复，不完整就回滚事务，丢弃数据。&lt;/p>
&lt;p>&lt;strong>只有在 redo log 状态为 prepare 时，才会去检查 binlog 是否存在，否则只校验 redo log 是否是 commit 就可以啦。&lt;/strong>&lt;/p>
&lt;p>怎么检查 binlog：一个完整事务 binlog 结尾有固定的格式。&lt;/p>
&lt;p>1、statement 格式的 binlog，最后会有 COMMIT；&lt;/p>
&lt;p>2、row 格式的 binlog，最后会有一个 XID event。&lt;/p>
&lt;p>另外，在 MySQL 5.6.2 版本以后，还引入了 binlog-checksum 参数，用来验证 binlog 内容的正确性。&lt;/p>
&lt;h2 id="两阶段提交分析">两阶段提交分析&lt;/h2>
&lt;p>1、先写 redo log 后写 binlog。&lt;/p>
&lt;p>假设 redo log 写完，binlog 还没写完。系统异常重启，那么系统仍然可以根据 redo log 将数据恢复。&lt;/p>
&lt;p>但是 binlog 没有写完就 crash 了，没有该更新记录。因此之后备份数据恢复的时候，自然也没有该更新记录。使用 binlog 恢复临时库就会发生与原库数据不同的问题。&lt;/p>
&lt;p>2、先写 binlog 后写 redo log&lt;/p>
&lt;p>假设 binlog 写完，redo log 还没写完。系统异常重启，因为 redo log 中没有该更新记录，库中的记录还是原来的值。但是 binlog 已经存在更新记录，所以之后用 binlog 恢复临时库该记录就是新的值，与原库数据不同。&lt;/p>
&lt;p>鉴此，两阶段提交可以保证 redo log 和 binlog 数据的一致性。即两个日志都可以表示事物的提交状态。&lt;/p>
&lt;h1 id="change-buffer">change buffer&lt;/h1>
&lt;p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作直接缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页再更新了。&lt;/p>
&lt;p>&lt;strong>「change buffer 主要节省的则是随机读磁盘的 IO 消耗」&lt;/strong>，下次查询读取数据页时用上 change buffer 中的记录即可。&lt;/p>
&lt;p>change buffer 可以持久化，在内存中有拷贝，也会被写入到磁盘上。&lt;/p>
&lt;p>将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会明显提升。而且，数据读入内存是需要占用 buffer pool 的，所以还能够避免占用内存，提高内存利用率。&lt;/p>
&lt;h2 id="merge">merge&lt;/h2>
&lt;p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。&lt;/p>
&lt;h2 id="cb使用条件">cb使用条件&lt;/h2>
&lt;p>唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。&lt;/p>
&lt;p>因为对于唯一索引来说，所有的更新操作都要先判断操作是否违反唯一性约束。必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。&lt;/p>
&lt;h2 id="cb限制">cb限制&lt;/h2>
&lt;p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。&lt;/p>
&lt;p>change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。&lt;/p>
&lt;h2 id="cb插入数据流程">cb插入数据流程&lt;/h2>
&lt;h3 id="目标页在内存中">目标页在内存中&lt;/h3>
&lt;ul>
&lt;li>对于唯一索引，目标页在内存中，直接判断唯一索引值是否冲突，然后插入数据，语句执行结束&lt;/li>
&lt;li>对于普通索引，找到目标页中插入数据的位置，插入该记录，语句执行结束&lt;/li>
&lt;/ul>
&lt;h3 id="目标页不在内存中">目标页不在内存中&lt;/h3>
&lt;ul>
&lt;li>对于唯一索引，需要将数据页读入内存，判断是否冲突，然后插入数据，语句执行结束&lt;/li>
&lt;li>对于普通索引，将记录插入 change buffer，语句执行结束&lt;/li>
&lt;/ul>
&lt;h2 id="cb使用场景">cb使用场景&lt;/h2>
&lt;p>首先，change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。&lt;/p>
&lt;p>其次，因为 merge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 merge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。&lt;/p>
&lt;p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。&lt;/p>
&lt;p>相反，如果一个业务是写入数据后立即查询，会触发 merge 过程，随机访问 IO 的次数不会减少，且会增加 change buffer 的维护代价。这种业务下 change buffer 反而起到了副作用。&lt;/p>
&lt;h1 id="日志延伸">日志延伸&lt;/h1>
&lt;h2 id="change-buffer-和-redo-log">&lt;strong>change buffer 和 redo log&lt;/strong>&lt;/h2>
&lt;p>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。&lt;/p>
&lt;p>redo log 与 change buffer (含磁盘持久化) 这 2 个机制，不同之处在于优化了整个变更流程的不同阶段。&lt;/p>
&lt;p>先不考虑这二者机制，简化抽象一个更新 (insert、update、delete) 流程：&lt;/p>
&lt;p>1、从磁盘读取待变更的行所在的数据页，读入内存页中&lt;/p>
&lt;p>2、对内存页中的行，执行变更操作&lt;/p>
&lt;p>3、将变更后的数据页，写入至数据磁盘中&lt;/p>
&lt;p>其中，流程中的步骤 1 涉及随机读磁盘 IO；步骤 3 涉及随机写磁盘 IO；刚好对应 change buffer 和 redo log。&lt;/p>
&lt;p>根据以上流程得出结论：&lt;/p>
&lt;p>1、change buffer 机制，优化了步骤 1——避免了随机读磁盘 IO ，将不在内存中的数据页的操作写入 change buffer 中，而不是将数据页从磁盘读入内存页中&lt;/p>
&lt;p>2、redo log 机制， 优化了步骤 3——避免了随机写磁盘 IO，将随机写磁盘，优化为了顺序写磁盘(写 redo log，确保 crash-safe)&lt;/p>
&lt;p>change buffer 机制不是一直会被应用到，仅当待操作的数据页当前不在内存中，需要先读磁盘加载数据页时，change buffer 才有用武之地。而 redo log 机制，为了保证 crash-safe 会一直被用到。&lt;/p>
&lt;h2 id="checkpoint">checkpoint&lt;/h2>
&lt;p>redo log中带有checkpoint,用来高效的恢复数据.&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="flush案例">flush案例&lt;/h2>
&lt;p>一个内存配置为 128GB、innodb_io_capacity 设置为 20000 的大规格实例，正常会建议将 redo log 设置成 4 个 1GB 的文件。&lt;/p>
&lt;p>如果配置时不慎将 redo log 设置成了 1 个 100M 的文件，会发生的情况及原因？&lt;/p>
&lt;p>每次事务提交都要写 redo log，如果设置太小很快就会被写满，write pos 一直追着 checkpoint。&lt;/p>
&lt;p>此时系统不得不停止所有更新去推进 checkpoint。&lt;/p>
&lt;p>现象：磁盘压力很小，数据库出现间歇性的性能下跌。&lt;/p>
&lt;h2 id="生产库非双1场景">生产库非双1场景&lt;/h2>
&lt;p>通常 MySQL 的“双 1”配置，指的就是 sync_binlog 和 innodb_flush_log_at_trx_commit 都设置成 1。也就是一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。&lt;/p>
&lt;p>非双1场景有如下：&lt;/p>
&lt;p>1、业务高峰期。一般如果有预知的高峰期，DBA 会有预案，把主库设置成“非双 1”。&lt;/p>
&lt;p>2、备库延迟，为了让备库尽快赶上主库。&lt;/p>
&lt;p>3、用备份恢复主库的副本，应用 binlog 的过程，跟第 2 个场景类似。&lt;/p>
&lt;p>4、批量导入数据的时候。&lt;/p>
&lt;p>一般情况下，把生产库改成“非双 1”配置，是设置 innodb_flush_logs_at_trx_commit=2、sync_binlog=1000。&lt;/p>
&lt;h1 id="日志faq">日志FAQ&lt;/h1>
&lt;h2 id="red-log和binlog关联">red log和binlog关联&lt;/h2>
&lt;p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：&lt;/p>
&lt;p>1、如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；&lt;/p>
&lt;p>2、如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。&lt;/p>
&lt;h2 id="两阶段提交的必要性">两阶段提交的必要性&lt;/h2>
&lt;p>处于 prepare 阶段的 redo log 加上完整 binlog，重启就能恢复，为什么还要两阶段提交？&lt;/p>
&lt;p>两阶段提交是经典的分布式系统问题，并不是 MySQL 独有的。&lt;/p>
&lt;p>两阶段提交的必要性，是事务的持久性问题。&lt;/p>
&lt;p>对于 InnoDB 引擎来说，如果 redo log 提交完成了，事务就不能回滚（如果这还允许回滚，就可能覆盖掉别的事务的更新）。而如果 redo log 直接提交，然后 binlog 写入的时候失败，InnoDB 又回滚不了，数据和 binlog 日志又不一致了。两阶段提交就是为了进可攻退可守。&lt;/p>
&lt;h2 id="redo-log一般设置多大">redo log一般设置多大&lt;/h2>
&lt;p>redo log 太小会导致很快就被写满，不得不强行刷 redo log，这样 WAL 机制的能力就发挥不出来。&lt;/p>
&lt;p>现在常见的几个 TB 的磁盘的话，可以直接将 redo log 设置为 4 个文件、每个文件 1GB 。&lt;/p>
&lt;h2 id="redo-log最终落盘">redo log最终落盘&lt;/h2>
&lt;p>正常运行中的实例，数据写入后的最终落盘，是从 redo log 更新过来的还是从 buffer pool 更新过来的呢？&lt;/p>
&lt;p>涉及 redo log 里面是什么。&lt;/p>
&lt;p>redo log 记录了&amp;quot;在某个数据页上做了什么修改&amp;quot;，而不是&amp;quot;这个数据修改后最新的值&amp;quot;。因此是需要先把磁盘的数据读入内存再执行 redo log 中的内容。&lt;/p>
&lt;p>1、正常运行的实例的话，数据页被修改以后，跟磁盘的数据页不一致，称为脏页。最终数据落盘，就是把内存中的数据页写盘。这个过程，甚至与 redo log 毫无关系；&lt;/p>
&lt;p>2、崩溃恢复场景中，InnoDB 如果判断一个数据页可能在崩溃恢复时丢失了更新，会将它读到内存，然后让 redo log 更新内存内容。更新完成后，内存页变成脏页，就回到了第 1 种情况的状态。&lt;/p>
&lt;h2 id="redo-log-buffer是什么">redo log buffer是什么&lt;/h2>
&lt;p>先修改内存，还是先写 redo log 文件？&lt;/p>
&lt;p>插入数据的过程中，生成的日志都得先保存起来，但又不能在还没 commit 的时候就直接写到 redo log 文件里。&lt;/p>
&lt;p>所以 redo log buffer 就是一块内存，用来先存 redo 日志。即在执行更新操作时（未 commit），数据的内存被修改了，redo log buffer 也写入了日志。&lt;/p>
&lt;p>但是，真正把日志写到 redo log 文件（文件名是 ib_logfile+ 数字），是在执行 commit 语句的时候做的。&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://bbs.huaweicloud.com/blogs/200758">https://bbs.huaweicloud.com/blogs/200758&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/e082trAojq6wu_SvTVPrsg">https://mp.weixin.qq.com/s/e082trAojq6wu_SvTVPrsg&lt;/a>&lt;/p></description></item><item><title>Docs: 02.日志扩展-主从架构</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/02.%E6%97%A5%E5%BF%97%E6%89%A9%E5%B1%95-%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/02.%E6%97%A5%E5%BF%97%E6%89%A9%E5%B1%95-%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</guid><description>
&lt;blockquote>
&lt;p>本文介绍基于 MySQL 的日志的主从架构&lt;/p>
&lt;/blockquote>
&lt;h1 id="主从同步">主从同步&lt;/h1>
&lt;p>从库和备库在概念上其实差不多。有的地方会把在 HA 过程中被选成新主库的，称为备库，其他的称为从库。&lt;/p>
&lt;h2 id="从库readonly">从库readonly&lt;/h2>
&lt;p>建议把从库设置成只读（readonly）模式。有以下几个考虑：&lt;/p>
&lt;p>1、一些运营类查询语句可能会被放到从库上去查，设置为只读可以防止误操作；&lt;/p>
&lt;p>2、防止切换逻辑有 bug，比如切换过程中出现双写，造成主从不一致；&lt;/p>
&lt;p>3、可以用 readonly 状态，来判断节点的角色。&lt;/p>
&lt;p>把从库设置成只读了，如何跟主库保持同步更新？readonly 设置对超级 (super) 权限用户是无效的，而用于同步更新的线程拥有超级权限。&lt;/p>
&lt;h2 id="主从同步流程">主从同步流程&lt;/h2>
&lt;p>&lt;img src="../imgs/master_slave_20220409_1.png" alt="master_slave_20220409_1.png">&lt;/p>
&lt;p>[主从同步流程图]&lt;/p>
&lt;p>从库 B 跟主库 A 之间维持了一个长连接。主库 A 内部有一个线程，专门用于服务从库 B 的这个长连接。一个事务日志同步的完整过程是这样的：&lt;/p>
&lt;p>1、在从库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。&lt;/p>
&lt;p>2、在从库 B 上执行 start slave 命令，这时候从库会启动两个线程，就是图中的 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接。&lt;/p>
&lt;p>3、主库 A 校验完用户名、密码后，开始按照从库 B 传过来的位置，从本地读取 binlog，发给 B。&lt;/p>
&lt;p>4、从库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。&lt;/p>
&lt;p>5、sql_thread 读取中转日志，解析出日志里的命令，并执行。&lt;/p>
&lt;p>由于多线程复制方案的引入，sql_thread 后来演化成为了多个线程。&lt;/p>
&lt;h2 id="循环复制问题">循环复制问题&lt;/h2>
&lt;p>（建议把参数 log_slave_updates 设置为 on，表示从库执行 relay log 后生成 binlog）&lt;/p>
&lt;p>双节点双主库可能存在循环使用 binlog 同步数据的情况，可以通过 server id 解决，有如下规定：&lt;/p>
&lt;p>1、规定两个库的 server id 必须不同，如果相同，则它们之间不能设定为主从关系；&lt;/p>
&lt;p>2、一个从库接到 binlog 并在重放过程中，生成与原 binlog 的 server id 相同的新的 binlog；&lt;/p>
&lt;p>3、每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。&lt;/p>
&lt;p>但这个机制其实并不完备，在某些场景下还是有可能出现死循环。比如：&lt;/p>
&lt;p>1、在一个主库更新事务后，用命令 set global server_id=x 修改了 server_id。等日志再传回来的时候，发现 server_id 跟自己的 server_id 不同就只能执行了。&lt;/p>
&lt;p>2、三个节点复制的场景，如 server id 是 B 节点产生的，binlog 传给 A 执行，然后 A 又和 A1 形成双 M 结构，就会出现循环复制。&lt;/p>
&lt;p>数据迁移时会遇到这种三节点循环复制的问题，可以临时在迁移后的节点上（比如上面的 A 或 A1 ）执行：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">stop&lt;/span> &lt;span style="color:#000">slave&lt;/span>&lt;span style="color:#000">；&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">CHANGE&lt;/span> &lt;span style="color:#000">MASTER&lt;/span> &lt;span style="color:#a90d91">TO&lt;/span> &lt;span style="color:#000">IGNORE_SERVER_IDS&lt;/span>&lt;span style="color:#000">=&lt;/span>(&lt;span style="color:#000">server_id_of_B&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">start&lt;/span> &lt;span style="color:#000">slave&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这样这个节点收到日志后就不会再执行。数据迁移完后，再执行下面的命令把改回来：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">stop&lt;/span> &lt;span style="color:#000">slave&lt;/span>&lt;span style="color:#000">；&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">CHANGE&lt;/span> &lt;span style="color:#000">MASTER&lt;/span> &lt;span style="color:#a90d91">TO&lt;/span> &lt;span style="color:#000">IGNORE_SERVER_IDS&lt;/span>&lt;span style="color:#000">=&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">start&lt;/span> &lt;span style="color:#000">slave&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h1 id="主从延迟">主从延迟&lt;/h1>
&lt;p>MySQL 要提供高可用能力，只有最终一致性是不够的。&lt;/p>
&lt;p>主从切换可能是一个主动运维动作，比如软件升级、主库所在机器按计划下线等，也可能是被动操作，比如主库所在机器掉电。&lt;/p>
&lt;h2 id="延迟时间计算">延迟时间计算&lt;/h2>
&lt;p>与数据同步有关的时间点主要包括以下三个：&lt;/p>
&lt;p>1、主库 A 执行完成一个事务，写入 binlog，我们把这个时刻记为 T1；&lt;/p>
&lt;p>2、之后传给从库 B，我们把从库 B 接收完这个 binlog 的时刻记为 T2；&lt;/p>
&lt;p>3、从库 B 执行完成这个事务，我们把这个时刻记为 T3。&lt;/p>
&lt;p>主从延迟就是同一个事务，在从库执行完成的时间和主库执行完成的时间之间的差值，也就是 T3-T1。&lt;/p>
&lt;p>在从库上执行 &lt;code>show slave status&lt;/code> 命令，返回结果里面会显示 seconds_behind_master，用于表示当前从库延迟了多少秒。seconds_behind_master 的计算方法是这样的：&lt;/p>
&lt;p>1、每个事务的 binlog 里面都有一个时间字段，用于记录主库上写入的时间；&lt;/p>
&lt;p>2、从库取出当前正在执行的事务的时间字段的值，计算它与当前系统时间的差值，得到 seconds_behind_master。&lt;/p>
&lt;p>主从库机器的系统时间设置不一致，不会影响该值。因为，从库连接到主库时，会通过执行 SELECT UNIX_TIMESTAMP() 函数来获得当前主库的系统时间。如果发现主库的系统时间与自己不一致，从库在执行 seconds_behind_master 计算的时候会自动扣掉这个差值。&lt;/p>
&lt;h2 id="主从延迟原因">主从延迟原因&lt;/h2>
&lt;p>在网络正常的时候，日志从主库传给从库所需的时间是很短的，即 T2-T1 的值是非常小的。也就是说，网络正常情况下，主从延迟的主要来源是从库接收完 binlog 和执行完这个事务之间的时间差。&lt;/p>
&lt;p>主从延迟最直接的表现是，从库消费中转日志（relay log）的速度，比主库生产 binlog 的速度要慢。可能是由以下原因导致的。&lt;/p>
&lt;h3 id="从库机器性能差">从库机器性能差&lt;/h3>
&lt;p>比如将众多从库都放在同一台机器上。&lt;/p>
&lt;p>更新请求对 IOPS 的压力，在主库和从库上是无差别的。做这种部署时，一般都会将从库设置为“非双 1”的模式。&lt;/p>
&lt;p>但实际上更新过程中也会触发大量的读操作。所以，当从库主机上的多个从库都在争抢资源的时候，就可能会导致主从延迟了。&lt;/p>
&lt;p>一般比较常见是主从库机器相同，因为主从可能发生切换，从库随时可能变成主库，所以主从库选用相同规格的机器，并且做对称部署。&lt;/p>
&lt;h3 id="从库压力大">从库压力大&lt;/h3>
&lt;p>由于主库直接影响业务，使用起来会比较克制，反而忽视了从库的压力控制。结果就是，从库上的查询耗费了大量的 CPU 资源，影响了同步速度，造成主从延迟。如一些运营后台需要的分析语句。&lt;/p>
&lt;p>处理方法：&lt;/p>
&lt;p>1、一主多从。除了从库外，可以多接几个从库，让这些从库来分担读的压力。&lt;/p>
&lt;p>2、通过 binlog 输出到外部系统，比如 Hadoop 这类系统，让外部系统提供统计类查询的能力。&lt;/p>
&lt;h3 id="大事务">大事务&lt;/h3>
&lt;p>主库上必须等事务执行完成才会写入 binlog，再传给从库。所以如果一个主库上的语句执行 10 分钟，那这个事务很可能就会导致从库延迟 10 分钟。比如一个典型的大事务场景：不要一次性地用 delete 语句删除太多数据。&lt;/p>
&lt;h3 id="大表ddl">大表DDL&lt;/h3>
&lt;p>处理方案就是计划内的 DDL，建议使用 gh-ost 方案&lt;/p>
&lt;h3 id="从库并行复制能力">从库并行复制能力&lt;/h3>
&lt;h2 id="应对策略">应对策略&lt;/h2>
&lt;p>&lt;img src="../imgs/master_slave_20220409_2.png" alt="master_slave_20220409_2.png">&lt;/p>
&lt;p>[主从切换流程-双 M 结构]&lt;/p>
&lt;h3 id="可靠性优先策略">可靠性优先策略&lt;/h3>
&lt;p>在 [主从切换流程-双 M 结构] 下，从状态 1 到状态 2 切换的详细过程是这样的：&lt;/p>
&lt;p>1、判断从库 B 现在的 seconds_behind_master，如果小于某个值（比如 5 秒）继续下一步，否则持续重试这一步；&lt;/p>
&lt;p>2、把主库 A 改成只读状态，即把 readonly 设置为 true；&lt;/p>
&lt;p>3、判断从库 B 的 seconds_behind_master 的值，直到这个值变成 0 为止；&lt;/p>
&lt;p>4、把从库 B 改成可读写状态，也就是把 readonly 设置为 false；&lt;/p>
&lt;p>5、把业务请求切到从库 B。&lt;/p>
&lt;p>这个切换流程，一般是由专门的 HA 系统来完成的，暂时称之为可靠性优先流程。&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_3.png" alt="master_slave_20220409_3.png">&lt;/p>
&lt;p>[可靠性优先主从切换流程]&lt;/p>
&lt;p>这个切换流程中是有不可用时间的。因为在步骤 2 之后，主库 A 和从库 B 都处于 readonly 状态，也就是说这时系统处于不可写状态，直到步骤 5 完成后才能恢复。&lt;/p>
&lt;h3 id="可用性优先策略">可用性优先策略&lt;/h3>
&lt;p>如果强行把步骤 4、5 调整到最开始执行，也就是说不等主从数据同步，直接把连接切到从库 B，并且让从库 B 可以读写，那么系统几乎就没有不可用时间了。&lt;/p>
&lt;p>这个切换流程暂时称作可用性优先流程。这个切换流程的代价，就是可能出现数据不一致的情况。分析如下：&lt;/p>
&lt;p>表：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#000">unsigned&lt;/span> &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#000">unsigned&lt;/span> &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>),(&lt;span style="color:#1c01ce">2&lt;/span>),(&lt;span style="color:#1c01ce">3&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这个表定义了一个自增主键 id，初始化数据后，主库和从库上都是 3 行数据。接下来继续在表 t 上执行两条插入语句的命令，依次是：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>假设现在主库上其他的数据表有大量的更新，导致主从延迟达到 5 秒。在插入一条 c=4 的语句后，发起了主从切换。
&lt;strong>binlog 为 mixed 格式流程&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_4.png" alt="master_slave_20220409_4.png">&lt;/p>
&lt;p>[可用性优先策略流程] （binlog_format=mixed）&lt;/p>
&lt;p>切换流程：&lt;/p>
&lt;p>1、步骤 2 中，主库 A 执行完 insert 语句，插入了一行数据（4,4），之后开始进行主从切换。&lt;/p>
&lt;p>2、步骤 3 中，由于主从之间有 5 秒的延迟，所以从库 B 还没来得及应用“插入 c=4”这个中转日志，就开始接收客户端“插入 c=5”的命令。&lt;/p>
&lt;p>3、步骤 4 中，从库 B 插入了一行数据（4,5），并且把这个 binlog 发给主库 A。&lt;/p>
&lt;p>4、步骤 5 中，从库 B 执行“插入 c=4”这个中转日志，插入了一行数据（5,4）。而直接在从库 B 执行的“插入 c=5”这个语句，传到主库 A，就插入了一行新数据（5,5）。&lt;/p>
&lt;p>最后的结果就是，主库 A 和从库 B 上出现了两行不一致的数据。可以看到，这个数据不一致，是由可用性优先流程导致的。&lt;/p>
&lt;p>binlog 为 row 格式流程：&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_5.png" alt="master_slave_20220409_5.png">&lt;/p>
&lt;p>[可用性优先策略流程] （binlog_format=row）&lt;/p>
&lt;p>因为 row 格式在记录 binlog 的时候，会记录新插入的行的所有字段值，所以最后只会有一行不一致。而且，两边的主从同步的应用线程会报错 duplicate key error 并停止。也就是说，这种情况下，从库 B 的 (5,4) 和主库 A 的 (5,5) 这两行数据，都不会被对方执行。&lt;/p>
&lt;p>结论：&lt;/p>
&lt;p>1、使用 row 格式的 binlog 时，数据不一致的问题更容易被发现。而使用 mixed 或者 statement 格式的 binlog 时，数据不一致很难发现且随着时间推移可能会造成更多数据逻辑不一致。&lt;/p>
&lt;p>2、主从切换的可用性优先策略会导致数据不一致。大多数情况下建议使用可靠性优先策略。一般对数据服务来说，数据的可靠性一般优于可用性的。&lt;/p>
&lt;p>可用性优先级更高的场景：&lt;/p>
&lt;p>有个库的作用是记录操作日志。如果数据不一致可以通过 binlog 来修补，而这个短暂的不一致也不会引发业务问题。同时，业务系统依赖于这个日志写入逻辑，如果库不可写会导致线上的业务操作无法执行。&lt;/p>
&lt;p>MySQL 的高可用性，依赖于主从延迟。主从延迟的时间越小，出现故障的时候，服务需要恢复的时间就越短，可用性就越高。&lt;/p>
&lt;h1 id="从库并行复制">从库并行复制&lt;/h1>
&lt;p>&lt;img src="../imgs/master_slave_20220409_6.png" alt="master_slave_20220409_6.png">&lt;/p>
&lt;p>[主从同步流程图]&lt;/p>
&lt;p>谈到主从的并行复制能力，要关注上图中黑色的两个箭头。一个箭头代表了客户端写入主库，另一箭头代表的是从库上 sql_thread 执行中转日志（relay log）。如果用箭头的粗细来代表并行度的话，那么真实情况就如图所示，第一个箭头要明显粗于第二个箭头。&lt;/p>
&lt;p>主库影响并发度就是各种锁。由于 InnoDB 引擎支持行锁，除了所有并发事务都在更新同一行（热点行）这种极端场景外，对业务并发度的支持还是很友好。&lt;/p>
&lt;p>而日志在从库执行，就是图中从库上 sql_thread 更新数据的逻辑。如果用单线程就会导致从库应用日志不够快，造成主从延迟。&lt;/p>
&lt;h2 id="sql-thread多线程">sql_thread多线程&lt;/h2>
&lt;p>在官方的 5.6 版本之前，MySQL 只支持单线程复制，由此在主库并发高、TPS 高时就会出现严重的主从延迟问题。MySQL 多线程复制的演进过程经历了好几个版本。&lt;/p>
&lt;p>多线程复制机制，都是要把 [主从同步流程图] 中只有一个线程的 sql_thread，拆成多个线程，基本都符合下面的模型：&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_7.png" alt="master_slave_20220409_7.png">&lt;/p>
&lt;p>[sql_thread多线程模型]&lt;/p>
&lt;p>coordinator 就是原来的 sql_thread，它不再直接更新数据，只负责读取中转日志和分发事务。真正更新日志的变成了 worker 线程。而 work 线程的个数，就是由参数 slave_parallel_workers 决定。根据经验把参数设置为 8~16 之间最好（32 核物理机），毕竟从库还有可能要提供读查询，不要占用过多 CPU。&lt;/p>
&lt;p>事务能不能按照轮询的方式分发给各个 worker，否则 workder 独立执行速度快慢不一。同一个事物的多个 SQL 语句也不能分配给多个 worker 执行，否则破坏事务的隔离性（查询可能看到事务执行一半的结果）。&lt;/p>
&lt;p>所以coordinator 在分发时，需要满足以下两个基本要求：&lt;/p>
&lt;p>1、不能造成更新覆盖。这就要求更新同一行的两个事务，必须被分发到同一个 worker 中。&lt;/p>
&lt;p>2、同一个事务不能被拆开，必须放到同一个 worker 中。&lt;/p>
&lt;p>各个版本的多线程复制，都遵循了这两条基本原则。&lt;/p>
&lt;h2 id="通用并行复制策略">通用并行复制策略&lt;/h2>
&lt;p>官方 MySQL 5.5 版本是不支持并行复制的，第三方开发了按表分发策略和按行分发策略。&lt;/p>
&lt;h3 id="按表分发策略">按表分发策略&lt;/h3>
&lt;p>按表分发事务的基本思路是，如果两个事务更新不同的表，它们就可以并行。因为数据是存储在表里的，所以按表分发，可以保证两个 worker 不会更新同一行，如果有跨表的事务，要把两张表放在一起考虑。&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_8.png" alt="master_slave_20220409_8.png">&lt;/p>
&lt;p>[按表并行复制程模型]&lt;/p>
&lt;p>每个 worker 线程对应一个 hash 表，用于保存当前正在这个 worker 的“执行队列”里的事务所涉及的表。hash 表的 key 是“库名. 表名”，value 是一个数字，表示队列中有多少个事务修改这个表。&lt;/p>
&lt;p>在有事务分配给 worker 时，事务里面涉及的表会被加到对应的 hash 表中。worker 执行完成后，这个表会被从 hash 表中去掉。&lt;/p>
&lt;p>每个事务在分发的时候，跟所有 worker 的冲突关系包括以下三种情况：&lt;/p>
&lt;p>1、如果跟所有 worker 都不冲突，coordinator 线程就会把这个事务分配给最空闲的 woker；&lt;/p>
&lt;p>2、如果跟多于一个 worker 冲突，coordinator 线程就进入等待状态，直到和这个事务存在冲突关系的 worker 只剩下 1 个；&lt;/p>
&lt;p>3、如果只跟一个 worker 冲突，coordinator 线程就会把这个事务分配给这个存在冲突关系的 worker。&lt;/p>
&lt;p>这个按表分发的方案，在多个表负载均匀的场景里应用效果很好。但是，如果碰到热点表，比如所有的更新事务都会涉及到某一个表的时候，所有事务都会被分配到同一个 worker 中，就变成单线程复制了。&lt;/p>
&lt;h3 id="按行分发策略">按行分发策略&lt;/h3>
&lt;p>要解决热点表的并行复制问题，需要按行并行复制的方案。核心思路是：如果两个事务没有更新相同的行，它们在从库上可以并行执行。显然这个模式要求 binlog 格式必须是 row。&lt;/p>
&lt;p>判断一个事务 T 和 worker 是否冲突，用的就规则就不是“修改同一个表”，而是“修改同一行”。&lt;/p>
&lt;p>key，就必须是“库名 + 表名 + 唯一键的值”，考虑到唯一索引，基于行的策略，事务 hash 表中还需要考虑唯一键，即 key 应该是“库名 + 表名 + 索引名字 + 索引值”。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t6&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">UNIQUE&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t6&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>),(&lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>),(&lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>),(&lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>),(&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>SQL 语句：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">update t6 set a=6 where id=1;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t6 set a=1 where id=2;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这两个事务要更新的行的主键值不同，但是如果它们被分到不同的 worker，就有可能 Session B 的语句先执行。此时 id=1 的行的 a 的值还是 1，就会报唯一键冲突。&lt;/p>
&lt;p>表 t1 上执行 update t1 set a=1 where id=2 语句，binlog 里面记录了整行的数据修改前各个字段的值，和修改后各个字段的值。&lt;/p>
&lt;p>因此，coordinator 在解析这个语句的 binlog 的时候，这个事务的 hash 表就有三个项:&lt;/p>
&lt;p>1、key=hash_func(db1+t1+&amp;quot;PRIMARY&amp;quot;+2), value=2; 这里 value=2 是因为修改前后的行 id 值不变，出现了两次。&lt;/p>
&lt;p>2、key=hash_func(db1+t1+&amp;quot;a&amp;quot;+2), value=1，表示会影响到这个表 a=2 的行。（修改前 a=2）&lt;/p>
&lt;p>3、key=hash_func(db1+t1+&amp;quot;a&amp;quot;+1), value=1，表示会影响到这个表 a=1 的行。（修改后 a=1）&lt;/p>
&lt;p>相比于按表并行分发策略，按行并行策略在决定线程分发时，需要消耗更多的计算资源。两个方案其实都有一些约束条件：&lt;/p>
&lt;p>1、要能够从 binlog 里面解析出表名、主键值和唯一索引的值。也就是说，主库的 binlog 格式必须是 row；&lt;/p>
&lt;p>2、表必须有主键；不能有外键。表上如果有外键，级联更新的行不会记录在 binlog 中，这样冲突检测就不准确。&lt;/p>
&lt;p>按行分发的策略有两个问题：&lt;/p>
&lt;p>1、耗费内存。比如一个语句要删除 100 万行数据，这时 hash 表就要记录 100 万个项。&lt;/p>
&lt;p>2、耗费 CPU。解析 binlog，然后计算 hash 值，对于大事务成本很高。&lt;/p>
&lt;p>因此实现这个策略时会设置一个阈值，单个事务如果超过设置的行数阈值（比如，如果单个事务更新的行数超过 10 万行），就暂时退化为单线程模式，退化过程的逻辑如下：&lt;/p>
&lt;p>1、coordinator 暂时先 hold 住这个事务；&lt;/p>
&lt;p>2、等待所有 worker 都执行完成，变成空队列；&lt;/p>
&lt;p>3、coordinator 直接执行这个事务；&lt;/p>
&lt;p>4、恢复并行模式。&lt;/p>
&lt;h2 id="官方并行复制策略">官方并行复制策略&lt;/h2>
&lt;h3 id="mysql5-6并行复制策略">MySQL5.6并行复制策略&lt;/h3>
&lt;p>只是支持的粒度是按库并行，用于决定分发策略的 hash 表里，key 就是数据库名。&lt;/p>
&lt;p>这个策略的并行效果，取决于压力模型。如果在主库上有多个 DB，并且各个 DB 的压力均衡，使用这个策略的效果会很好。相比于按表和按行分发，这个策略有两个优势：&lt;/p>
&lt;p>1、构造 hash 值的时候很快，只需要库名；而且一个实例上 DB 数也不会很多，不会出现需要构造 100 万个项这种情况。&lt;/p>
&lt;p>2、不要求 binlog 的格式。因为 statement 格式的 binlog 也可以很容易拿到库名。&lt;/p>
&lt;p>但是，如果主库上的表都放在同一个 DB 里面，这个策略就没有效果；或者如果不同 DB 的热点不同，比如一个是业务逻辑库，一个是系统配置库，那也起不到并行的效果。&lt;/p>
&lt;h3 id="mariadb并行复制策略">MariaDB并行复制策略&lt;/h3>
&lt;p>MariaDB 的并行复制策略利用了 redo log 组提交 (group commit) 优化的特性 ：&lt;/p>
&lt;p>1、能够在同一组里提交的事务，一定不会修改同一行；&lt;/p>
&lt;p>2、主库上可以并行执行的事务，从库上也一定是可以并行执行的。&lt;/p>
&lt;p>实现上的流程：&lt;/p>
&lt;p>1、在一组里面一起提交的事务，有一个相同的 commit_id，下一组就是 commit_id+1；&lt;/p>
&lt;p>2、commit_id 直接写到 binlog 里面；&lt;/p>
&lt;p>3、传到从库应用的时候，相同 commit_id 的事务分发到多个 worker 执行；&lt;/p>
&lt;p>4、这一组全部执行完成后，coordinator 再去取下一批。&lt;/p>
&lt;p>这个策略出来的时候相当惊艳。因为之前业界的思路都是在“分析 binlog，并拆分到 worker”上。而 MariaDB 的这个策略，目标是“模拟主库的并行模式”。&lt;/p>
&lt;p>但是这个策略有一个问题，它并没有实现“真正的模拟主库并发度”这个目标。主库一组事务 commit 时，下一组事务是同时处于“执行中”状态的。从库上执行时，要等第一组事务完全执行完成后，第二组事务才能开始执行，这样系统的吞吐量就不够。&lt;/p>
&lt;p>另外，这个方案很容易被大事务拖后腿。假设 trx2 是一个超大事务，那么在从库应用的时候，trx1 和 trx3 执行完成后，就只能等 trx2 完全执行完成，下一组才能开始执行。这段时间只有一个 worker 线程在工作，是对资源的浪费。&lt;/p>
&lt;p>该策略仍然是一个很好的创新，对原系统的改造非常少，实现很优雅。&lt;/p>
&lt;h3 id="mysql5-7并行复制策略">MySQL5.7并行复制策略&lt;/h3>
&lt;p>参数 slave-parallel-type （ &lt;code>show variables like 'slave_parallel_type&lt;/code> ）来控制并行复制策略：&lt;/p>
&lt;p>1、配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；&lt;/p>
&lt;p>2、配置为 LOGICAL_CLOCK，表示类似 MariaDB 的策略。不过 MySQL 5.7 这个策略，针对并行度做了优化。&lt;/p>
&lt;p>首先，同时处于“执行状态”的所有事务，不能并行执行。因为里面可能有由于锁冲突而处于锁等待状态的事务。MariaDB 策略的核心是“所有处于 commit”状态的事务可以并行。事务处于 commit 状态，表示已经通过了锁冲突的检验了。&lt;/p>
&lt;p>两阶段提交过程中，其实不用等到 commit 阶段，只要能够到达 redo log prepare 阶段，就表示事务已经通过锁冲突的检验了。&lt;/p>
&lt;p>因此，MySQL 5.7 并行复制策略的思想是：&lt;/p>
&lt;p>1、同时处于 prepare 状态的事务，在从库执行时是可以并行的；&lt;/p>
&lt;p>2、处于 prepare 状态的事务，与处于 commit 状态的事务之间，在从库执行时也是可以并行的。&lt;/p>
&lt;p>binlog 的组提交有两个参数：&lt;/p>
&lt;p>1、binlog_group_commit_sync_delay 表示延迟多少微秒后才调用 fsync；&lt;/p>
&lt;p>2、binlog_group_commit_sync_no_delay_count 表示累积多少次以后才调用 fsync。&lt;/p>
&lt;p>这两个参数是用于故意拉长 binlog 从 write 到 fsync 的时间，以此减少 binlog 的写盘次数。在 MySQL 5.7 的并行复制策略里，它们可以用来制造更多的“同时处于 prepare 阶段的事务”。这样可以从库复制的并行度。&lt;/p>
&lt;p>即这两个参数，既可以“故意”让主库提交得慢些，又可以让从库执行得快些。在 MySQL 5.7 处理从库延迟时，可以考虑调整这两个参数值，来达到提升从库复制并发度的目的。&lt;/p>
&lt;h3 id="mysql5-7-22并行复制策略">MySQL5.7.22并行复制策略&lt;/h3>
&lt;p>这个版本增加了一个新的并行复制策略，基于 WRITESET 的并行复制。新增了一个参数 binlog-transaction-dependency-tracking，用来控制是否启用这个新策略，参数值：&lt;/p>
&lt;p>1、COMMIT_ORDER 表示根据同时进入 prepare 和 commit 来判断是否可以并行的策略。&lt;/p>
&lt;p>2、WRITESET 表示对于事务涉及更新的每一行，计算出这一行的 hash 值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。&lt;/p>
&lt;p>3、WRITESET_SESSION 表示在 WRITESET 的基础上多了一个约束，即在主库上同一个线程先后执行的两个事务，在从库执行的时候，要保证相同的先后顺序。&lt;/p>
&lt;p>为了唯一标识，这个 hash 值是通过“库名 + 表名 + 索引名 + 值”计算出来的。如果一个表上除了有主键索引外，还有其他唯一索引，那么对于每个唯一索引，insert 语句对应的 writeset 就要多增加一个 hash 值。&lt;/p>
&lt;p>跟前面介绍的基于 MySQL 5.5 版本的按行分发的策略差不多。不过 MySQL 官方的实现还是有很大的优势：&lt;/p>
&lt;p>1、writeset 是在主库生成后直接写入到 binlog 里面的，这样在从库执行的时候，不需要解析 binlog 内容（event 里的行数据），节省了很多计算量；&lt;/p>
&lt;p>2、不需要把整个事务的 binlog 都扫一遍才能决定分发到哪个 worker，更省内存；&lt;/p>
&lt;p>3、由于从库的分发策略不依赖于 binlog 内容，所以 binlog 是 statement 格式也是可以的。&lt;/p>
&lt;p>因此，MySQL 5.7.22 的并行复制策略在通用性上还是有保证的。当然对于“表上没主键”和“外键约束”的场景，WRITESET 策略也是没法并行的，也会暂时退化为单线程模型。&lt;/p>
&lt;h1 id="主备切换">主备切换&lt;/h1>
&lt;p>一主多从的架构下，假设 A 为主库，A1 为从库，B、C、D 为从库，当 A 断电后，A1 会成为新的主库，从库 B、C、D 也要重新指向 A1。&lt;/p>
&lt;h2 id="基于位点的主备切换">基于位点的主备切换&lt;/h2>
&lt;p>把节点 B 设置成节点 A’的从库的时候，需要执行一条 change master 命令：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">CHANGE&lt;/span> &lt;span style="color:#000">MASTER&lt;/span> &lt;span style="color:#a90d91">TO&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_HOST&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">host_name&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_PORT&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">port&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_USER&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">user_name&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_PASSWORD&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">password&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_LOG_FILE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">master_log_name&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_LOG_POS&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">master_log_pos&lt;/span>  
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>参数：
1、MASTER_HOST、MASTER_PORT、MASTER_USER 和 MASTER_PASSWORD 四个参数，分别代表了主库 A’的 IP、端口、用户名和密码。&lt;/p>
&lt;p>2、最后两个参数 MASTER_LOG_FILE 和 MASTER_LOG_POS 表示，要从主库的 master_log_name 文件的 master_log_pos 这个位置的日志继续同步。这个位置就是同步位点，也就是主库对应的文件名和日志偏移量。&lt;/p>
&lt;h3 id="同步位点">同步位点&lt;/h3>
&lt;p>原来节点 B 是 A 的从库，本地记录的也是 A 的位点。但是相同的日志，A 的位点和 A’的位点是不同的。因此从库 B 切换时，需要先“找同步位点”。&lt;/p>
&lt;p>本质是重放binlog，如果太靠后可能会丢记录，稍微往前点的可以经过判断跳过已经执行的。&lt;/p>
&lt;p>一种取同步位点的方法是这样的：&lt;/p>
&lt;p>1、等待新主库 A’把中转日志（relay log）全部同步完成；&lt;/p>
&lt;p>2、在 A’上执行 show master status 命令，得到当前 A’上最新的 File 和 Position；&lt;/p>
&lt;p>3、取原主库 A 故障的时刻 T；&lt;/p>
&lt;p>4、用 mysqlbinlog 工具解析 A’的 File，得到 T 时刻的位点。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysqlbinlog File --stop-datetime&lt;span style="color:#000">=&lt;/span>T --start-datetime&lt;span style="color:#000">=&lt;/span>T
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="../imgs/master_slave_20220409_9.png" alt="master_slave_20220409_9.png">&lt;/p>
&lt;p>[mysqlbinlog 部分输出结果]&lt;/p>
&lt;p>图中 end_log_pos 后面的值“123”，表示的就是 A1 这个实例，在 T 时刻写入新的 binlog 的位置。然后，我们就可以把 123 这个值作为 $master_log_pos ，用在节点 B 的 change master 命令里。&lt;/p>
&lt;p>该值不准确的原因：&lt;/p>
&lt;p>假设 T 时刻主库 A 已经执行完成了一个 insert 语句插入了一行数据 R，并且已经将 binlog 传给了 A1 和 B，然后在传完的瞬间主库 A 主机掉电。&lt;/p>
&lt;p>此时系统状态是：&lt;/p>
&lt;p>1、在从库 B 上，由于同步了 binlog， R 这一行已经存在；&lt;/p>
&lt;p>2、在新主库 A1上， R 这一行也已经存在，日志是写在 123 这个位置之后的；&lt;/p>
&lt;p>3、在从库 B 上执行 change master 命令，指向 A1 的 File 文件的 123 位置，就会把插入 R 这一行数据的 binlog 又同步到从库 B 去执行。&lt;/p>
&lt;p>从库 B 的同步线程就会提示主键冲突，然后停止同步。&lt;/p>
&lt;h3 id="主动跳过错误">主动跳过错误&lt;/h3>
&lt;p>通常情况下，在切换任务时，要先主动跳过这些错误，有两种常用的方法。一种做法是：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#a90d91">global&lt;/span> &lt;span style="color:#000">sql_slave_skip_counter&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">start&lt;/span> &lt;span style="color:#000">slave&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>切换过程中，可能会不止重复执行一个事务，需要在从库 B 刚开始接到新主库 A1 时，持续观察，每次碰到这些错误就停下来，执行一次跳过命令，直到不再出现停下来的情况，以此来跳过可能涉及的所有事务。
另一种方式是：设置 slave_skip_errors 参数，直接设置跳过指定的错误。&lt;/p>
&lt;p>执行主备切换时，有两类错误经常遇到：&lt;/p>
&lt;p>1、1062 错误是插入数据时唯一键冲突；&lt;/p>
&lt;p>2、1032 错误是删除数据时找不到行。&lt;/p>
&lt;p>因此可以把 slave_skip_errors 设置为 “1032,1062”。&lt;/p>
&lt;p>注意：主备间的同步关系建立完成，并稳定执行一段时间之后，需要把这个参数设置为空，以免之后真的出现了主从数据不一致也跳过。&lt;/p>
&lt;h2 id="gtid">GTID&lt;/h2>
&lt;p>虽然上面的方法最终可以建立从库 B 和新主库 A1 的主从关系，但操作都很复杂，而且容易出错。MySQL 5.6 版本引入了 GTID，彻底解决了这个困难。&lt;/p>
&lt;p>GTID 的全称是 Global Transaction Identifier，即全局事务 ID，是一个事务在提交的时候生成的唯一标识。由两部分组成，格式是：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>GTID=server_uuid:gno
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>1、server_uuid 是一个实例第一次启动时自动生成的，是一个全局唯一的值；
2、gno 是一个整数，初始值是 1，每次提交事务的时候分配给这个事务，并加 1。&lt;/p>
&lt;p>官方定义格式：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>GTID=source_id:transaction_id
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>source_id 就是 server_uuid，transaction_id 容易造成误解，两个都是递增，不同点是事务 id 自增但不一定连续，因为会被回滚，而 gno 在提交时分配，所以是连续递增的。
在 GTID 模式下，每个事务都会跟一个 GTID 一一对应。这个 GTID 有两种生成方式，而使用哪种方式取决于 session 变量 gtid_next 的值：&lt;/p>
&lt;p>1、默认值 automatic，MySQL 就会把 server_uuid:gno 分配给这个事务。&lt;/p>
&lt;p>1）记录 binlog 时，先记录一行 SET @@SESSION.GTID_NEXT=‘server_uuid:gno’；&lt;/p>
&lt;p>2）把这个 GTID 加入本实例的 GTID 集合。&lt;/p>
&lt;p>2、gtid_next 是一个指定的 GTID 的值，比如通过 set gtid_next='current_gtid’指定为 current_gtid，有两种可能：&lt;/p>
&lt;p>1）如果 current_gtid 已经存在于实例的 GTID 集合中，接下来执行的这个事务会直接被系统忽略；&lt;/p>
&lt;p>2）如果 current_gtid 没有存在于实例的 GTID 集合中，就将这个 current_gtid 分配给接下来要执行的事务，也就是说系统不需要给这个事务生成新的 GTID，因此 gno 也不用加 1。&lt;/p>
&lt;p>注意，一个 current_gtid 只能给一个事务使用。事务提交后要执行下一个事务，就要执行 set 命令，把 gtid_next 设置成另外一个 gtid 或者 automatic。这样每个 MySQL 实例都维护了一个 GTID 集合，用来对应“这个实例执行过的所有事务”。&lt;/p>
&lt;p>举例说明：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="../imgs/master_slave_20220409_10.png" alt="master_slave_20220409_10.png">&lt;/p>
&lt;p>[初始化数据的binlog]&lt;/p>
&lt;p>查看 binlog，事务的 BEGIN 之前有一条 SET @@SESSION.GTID_NEXT 命令。这时，如果实例 X 有从库，那么将 CREATE TABLE 和 insert 语句的 binlog 同步过去执行的话，执行事务之前就会先执行这两个 SET 命令， 这样被加入从库的 GTID 集合的，就是上图的这两个 GTID。&lt;/p>
&lt;p>如果从库主键冲突，可以执行：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">gtid_next&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;aaaaaaaa-cccc-dddd-eeee-ffffffffffff:10&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">commit&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">gtid_next&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">automatic&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">start&lt;/span> &lt;span style="color:#000">slave&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>前三条语句的作用，是通过提交一个空事务，把这个 GTID 加到实例 X 的 GTID 集合中。然后 &lt;code>show master status&lt;/code> 可以看到 Executed_Gtid_set 已经加入了这个 GTID。
再执行 &lt;code>start slave&lt;/code> 命令让同步线程执行起来时，虽然实例 X 上还是会继续执行实例 Y 传过来的事务，但是由于“xxxx:10”已经存在于实例的 GTID 集合中了，就会直接跳过这个事务，也就不会再出现主键冲突的错误。&lt;/p>
&lt;p>&lt;code>set gtid_next=automatic&lt;/code> 的作用是“恢复 GTID 的默认分配行为”，如果之后有新的事务再执行，就还是按照原来的分配方式，继续分配 gno=3。&lt;/p>
&lt;h2 id="基于gtid的主备切换">基于GTID的主备切换&lt;/h2>
&lt;p>GTID 模式下，从库 B 要设置为新主库 A1 的从库的语法如下：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">CHANGE&lt;/span> &lt;span style="color:#000">MASTER&lt;/span> &lt;span style="color:#a90d91">TO&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_HOST&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">host_name&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_PORT&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">port&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_USER&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">user_name&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MASTER_PASSWORD&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">password&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">master_auto_position&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>master_auto_position=1 就表示这个主备关系使用的是 GTID 协议。可以看到难以指定的 MASTER_LOG_FILE 和 MASTER_LOG_POS 参数，已经不需要指定了。
实例 A1 的 GTID 集合记为 set_a，实例 B 的 GTID 集合记为 set_b。&lt;/p>
&lt;p>实例 B 上执行 start slave 命令，取 binlog 的逻辑：&lt;/p>
&lt;p>1、实例 B 指定主库 A1，基于主备协议建立连接。&lt;/p>
&lt;p>2、实例 B 把 set_b 发给主库 A1。&lt;/p>
&lt;p>3、实例 A1 算出 set_a 与 set_b 的差集，也就是所有存在于 set_a 但不存在于 set_b 的 GTID 集合，判断 A1 本地是否包含了这个差集需要的所有 binlog 事务。&lt;/p>
&lt;p>1）如果不包含，表示 A1 已经把实例 B 需要的 binlog 给删掉了，直接返回错误；&lt;/p>
&lt;p>2）如果确认全部包含，A1 从自己的 binlog 文件中找出第一个不在 set_b 的事务，发给 B；&lt;/p>
&lt;p>4、之后就从这个事务开始，往后读文件，按顺序取 binlog 发给 B 去执行。&lt;/p>
&lt;p>主备切换，若选择 A1 作为新的主库，必须要包含从库 B 的全部内容；如果存在事务 B 中有，A1 没有，则 A1 不能成为新的主库。&lt;/p>
&lt;p>主备切换的流程：&lt;/p>
&lt;p>由于不需要找位点了，从库 B、C、D 只需要分别执行 change master 命令指向实例 A1 即可。（找位点在 A1 内部完成了）&lt;/p>
&lt;p>之后系统就由新主库 A1 写入，主库 A1 生成的 binlog 中的 GTID 集合格式是：server_uuid_of_A1:1-M。&lt;/p>
&lt;h2 id="gtid和在线ddl">GTID和在线DDL&lt;/h2>
&lt;p>假设两个互为主备关系的库是实例 X 和实例 Y，且当前主库是 X，并且都打开了 GTID 模式。这时的主备切换流程可以变成下面这样：&lt;/p>
&lt;p>1、在实例 X 上执行 stop slave。&lt;/p>
&lt;p>2、在实例 Y 上执行 DDL 语句。注意，这里并不需要关闭 binlog。&lt;/p>
&lt;p>3、执行完成后，查出这个 DDL 语句对应的 GTID，并记为 server_uuid_of_Y:gno。&lt;/p>
&lt;p>4、到实例 X 上执行以下语句序列：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">GTID_NEXT&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;server_uuid_of_Y:gno&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">commit&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">gtid_next&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">automatic&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">start&lt;/span> &lt;span style="color:#000">slave&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>目的：既可以让实例 Y 的更新有 binlog 记录，同时也可以确保不会在实例 X 上执行这条更新。
5、按照之前的流程继续执行。&lt;/p>
&lt;h1 id="读写分离">读写分离&lt;/h1>
&lt;p>读写分离的主要目标就是分摊主库的压力。一般有两种架构：&lt;/p>
&lt;p>1、客户端直连方案&lt;/p>
&lt;p>需要了解后端部署细节，在出现主备切换、库迁移等操作的时候，客户端都会感知到，并且需要调整数据库连接信息。一般采用这样的架构，一定会伴随一个负责管理后端的组件，比如 Zookeeper，尽量让业务端只专注于业务逻辑开发。&lt;/p>
&lt;p>2、Proxy&lt;/p>
&lt;p>客户端不需要关注后端细节，连接维护、后端信息维护等工作，都是由 proxy 完成的。对后端维护团队的要求会更高。Proxy 需要有高可用架构。整体相对比较复杂。&lt;/p>
&lt;p>不论使用哪种架构，都会碰到由于主从可能存在延迟，客户端执行完一个更新事务后马上发起查询，如果查询选择的是从库，就有可能读到刚刚的事务更新之前的状态。本文称作“过期读”。&lt;/p>
&lt;p>主从延迟不能 100% 避免的。下面介绍一下处理“过期读”的方案&lt;/p>
&lt;h2 id="强制走主库方案">强制走主库方案&lt;/h2>
&lt;p>强制走主库方案其实就是，将查询请求做分类：&lt;/p>
&lt;p>1、对于必须要拿到最新结果的请求，强制将其发到主库上。&lt;/p>
&lt;p>2、对于可以读到旧数据的请求，才将其发到从库上。&lt;/p>
&lt;h2 id="sleep方案">sleep方案&lt;/h2>
&lt;p>主库更新后，读从库之前先 sleep 一下。&lt;/p>
&lt;p>具体的方案就是，类似于执行一条 select sleep(1) 命令。这个方案的假设是：大多数情况下主备延迟在 1 秒之内，做一个 sleep 可以有很大概率拿到最新的数据。&lt;/p>
&lt;p>更靠谱的方案&lt;/p>
&lt;p>客户端将用户数据的数据直接展示在页面上，而不是真正的去请求后端数据库。等到卖家再刷新页面去查询时，已经过了一段时间，相当于 sleep 了。&lt;/p>
&lt;h2 id="判断无延迟方案">判断无延迟方案&lt;/h2>
&lt;p>确保从库无延迟，通常有三种做法：&lt;/p>
&lt;p>1、 &lt;code>show slave status&lt;/code> 结果里的 seconds_behind_master 参数的值（秒级），可以用来衡量主备延迟时间的长短。&lt;/p>
&lt;p>每次从库执行查询请求前，先判断 seconds_behind_master 是否已经等于 0。如果不等于，就必须等到为 0 才能执行查询请求。&lt;/p>
&lt;p>2、对比位点确保主从无延迟&lt;/p>
&lt;p>1）Master_Log_File 和 Read_Master_Log_Pos，表示的是读到的主库的最新位点；&lt;/p>
&lt;p>2）Relay_Master_Log_File 和 Exec_Master_Log_Pos，表示的是从库执行的最新位点。&lt;/p>
&lt;p>如果 Master_Log_File 和 Relay_Master_Log_File、Read_Master_Log_Pos 和 Exec_Master_Log_Pos 这两组值完全相同，就表示接收到的日志已经同步完成。&lt;/p>
&lt;p>3、对比 GTID 集合确保主备无延迟&lt;/p>
&lt;p>1）Auto_Position=1 ，表示这对主从关系使用了 GTID 协议。&lt;/p>
&lt;p>2）Retrieved_Gtid_Set，是从库收到的所有日志的 GTID 集合&lt;/p>
&lt;p>3）Executed_Gtid_Set，是从库所有已经执行完成的 GTID 集合。&lt;/p>
&lt;p>如果这两个集合相同，也表示从库接收到的日志都已经同步完成。&lt;/p>
&lt;p>对比位点和对比 GTID 这两种方法，都要比判断 seconds_behind_master 是否为 0 更准确。&lt;/p>
&lt;h2 id="配合semi-sync方案">配合semi-sync方案&lt;/h2>
&lt;p>引入半同步复制，也就是 semi-sync replication。semi-sync 做了这样的设计：&lt;/p>
&lt;p>1、事务提交的时候，主库把 binlog 发给从库；&lt;/p>
&lt;p>2、从库收到 binlog 后，发回给主库一个 ack，表示收到了；&lt;/p>
&lt;p>3、主库收到 ack 后，才能给客户端返回“事务完成”的确认。&lt;/p>
&lt;p>如果启用了 semi-sync，就表示所有给客户端发送过确认的事务，都确保了从库已经收到了这个日志。&lt;/p>
&lt;p>semi-sync 配合前面关于位点的判断，能够确定在从库上执行的查询请求，可以避免过期读。&lt;/p>
&lt;p>但是，semi-sync+ 位点判断的方案，只对一主一从的场景是成立的。在一主多从场景中，主库只要等到一个从库的 ack，就开始给客户端返回确认。&lt;/p>
&lt;p>判断同步位点的方案还有另外一个潜在问题，即：如果在业务更新的高峰期，主库的位点或者 GTID 集合更新很快，那么上面的两个位点等值判断就会一直不成立，很可能出现从库上迟迟无法响应查询请求的情况。&lt;/p>
&lt;p>semi-sync 配合判断主备无延迟的方案，存在两个问题：&lt;/p>
&lt;p>1、一主多从的时候，在某些从库执行查询请求会存在过期读的现象；&lt;/p>
&lt;p>2、在持续延迟的情况下，可能出现过度等待的问题。&lt;/p>
&lt;p>扩展延伸&lt;/p>
&lt;p>如果主库掉电时，有些 binlog 还来不及发给从库，会不会导致系统数据丢失？&lt;/p>
&lt;p>如果使用的是普通的异步复制模式，就可能会丢失，但 semi-sync 就可以解决这个问题。&lt;/p>
&lt;h2 id="等主库位点方案">等主库位点方案&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">master_pos_wait&lt;/span>(&lt;span style="color:#000">file&lt;/span>, &lt;span style="color:#000">pos&lt;/span>[, &lt;span style="color:#000">timeout&lt;/span>]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这条命令的逻辑：
1、它是在从库执行的；&lt;/p>
&lt;p>2、参数 file 和 pos 指的是主库上的文件名和位置；&lt;/p>
&lt;p>3、timeout 可选，设置为正整数 N 表示这个函数最多等待 N 秒。&lt;/p>
&lt;p>这个命令正常返回的结果是一个正整数 M，表示从命令开始执行，到应用完 file 和 pos 表示的 binlog 位置，执行了多少事务。&lt;/p>
&lt;p>还会返回一些其他结果，包括：&lt;/p>
&lt;p>1、如果执行期间，从库同步线程发生异常则返回 NULL；&lt;/p>
&lt;p>2、如果等待超过 N 秒，就返回 -1；&lt;/p>
&lt;p>3、如果刚开始执行时，发现已经执行过这个位置则返回 0。&lt;/p>
&lt;p>如果主库频繁写入事务，并不需要获取当前事务对应的pos，执行完事务之后，获取的pos肯定是要比当前事务的pos的位置要大，只要在从库上面执行，master_pos_wait 返回大于等于 0 的值就说明事务已经在从库执行了。查询的结果就是正确的。&lt;/p>
&lt;p>等位点执行流程如下：&lt;/p>
&lt;p>1、trx1 事务更新完成后，马上执行 show master status 得到当前主库执行到的 File 和 Position；&lt;/p>
&lt;p>2、选定一个从库执行查询语句；&lt;/p>
&lt;p>3、在从库上执行 select master_pos_wait(File, Position, 1)；&lt;/p>
&lt;p>4、如果返回值是 &amp;gt;=0 的正整数，则在这个从库执行查询语句；&lt;/p>
&lt;p>5、否则，到主库执行查询语句。&lt;/p>
&lt;h2 id="等gtid方案">等GTID方案&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">wait_for_executed_gtid_set&lt;/span>(&lt;span style="color:#000">gtid_set&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这条命令的逻辑是：
1、等待，直到这个库执行的事务中包含传入的 gtid_set，返回 0；&lt;/p>
&lt;p>2、超时返回 1。&lt;/p>
&lt;p>等位点的方案中，执行完事务后要主动去主库执行 show master status。而 MySQL 5.7.6 版本开始，允许在执行完更新类事务后，把这个事务的 GTID 返回给客户端，这样等 GTID 的方案就可以减少一次查询。&lt;/p>
&lt;p>等 GTID 执行流程如下：&lt;/p>
&lt;p>1、trx1 事务更新完成后，从返回包直接获取这个事务的 GTID，记为 gtid1；&lt;/p>
&lt;p>2、选定一个从库执行查询语句；&lt;/p>
&lt;p>3、在从库上执行 select wait_for_executed_gtid_set(gtid1, 1)；&lt;/p>
&lt;p>4、如果返回值是 0，则在这个从库执行查询语句；&lt;/p>
&lt;p>5、否则，到主库执行查询语句。&lt;/p>
&lt;p>将参数 session_track_gtids 设置为 OWN_GTID，MySQL 在执行事务后，就会在返回包中带上 GTID，然后通过 API 接口 mysql_session_track_get_first 从返回包解析出 GTID 的值即可。&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/c-api-functions.html">API 接口&lt;/a>&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="从库45度延迟">从库45度延迟&lt;/h2>
&lt;p>一般现在的数据库运维系统都有从库延迟监控，其实就是在从库上执行 show slave status，采集 seconds_behind_master 的值。&lt;/p>
&lt;p>假设维护的一个从库，它的延迟监控的图像类似下图，是一个 45°斜向上的线段，可能是什么原因导致呢？如何确认？&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_11.png" alt="master_slave_20220409_11.png">&lt;/p>
&lt;p>从库的同步在这段时间完全被堵住了。产生这种现象典型的场景主要包括两种：&lt;/p>
&lt;p>1、大事务（包括大表 DDL、一个事务操作很多行）；&lt;/p>
&lt;p>2、从库起了一个长事务，比如&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>然后就不动了。这时候主库对表 t 做了一个加字段操作，即使这个表很小，这个 DDL 在从库应用的时候也会被堵住，也不能看到这个现象。
注意：从库跟不上主库的更新速度（并行复制）会导致主从延迟，但不会表现为这种标准的呈 45 度的直线。&lt;/p>
&lt;h2 id="从库并行复制策略选择">从库并行复制策略选择&lt;/h2>
&lt;p>如果主库都是单线程压力模式，在从库追主库的过程中，binlog-transaction-dependency-tracking 应该选用什么参数？&lt;/p>
&lt;p>应该将这个参数设置为 WRITESET。&lt;/p>
&lt;p>由于主库是单线程压力模式，所以每个事务的 commit_id 都不同，那么设置为 COMMIT_ORDER 模式的话，从库也只能单线程执行。&lt;/p>
&lt;p>同样地，由于 WRITESET_SESSION 模式要求在从库应用日志的时候，同一个线程的日志必须与主库上执行的先后顺序相同，也会导致主库单线程压力模式下退化成单线程复制。所以，应该将 binlog-transaction-dependency-tracking 设置为 WRITESET。&lt;/p>
&lt;h2 id="gtid下主库binlog丢失">GTID下主库binlog丢失&lt;/h2>
&lt;p>GTID 模式下，从库执行 start slave 命令后，主库发现需要的 binlog 已经被没了，导致主备创建不成功，如何处理？&lt;/p>
&lt;p>1、如果业务允许主从不一致的情况，那么可以在主库上先执行 show global variables like ‘gtid_purged’，得到主库已经删除的 GTID 集合，假设是 gtid_purged1；然后先在从库上执行 reset master，再执行 set global gtid_purged =‘gtid_purged1’；最后执行 start slave，就会从主库现存的 binlog 开始同步。binlog 缺失的那一部分，数据在从库上就可能会有丢失，造成主从不一致。&lt;/p>
&lt;p>2、如果需要主从数据一致，最好还是通过重新搭建从库来做。&lt;/p>
&lt;p>3、如果有其他的从库保留有全量的 binlog ，可以把新的从库先接到这个保留了全量 binlog 的从库，追上日志后，如果有需要再接回主库。&lt;/p>
&lt;p>4、如果 binlog 有备份的情况，可以先在从库上应用缺失的 binlog，然后再执行 start slave。&lt;/p>
&lt;h2 id="gtid等位点读写分离做ddl">GTID等位点读写分离做DDL&lt;/h2>
&lt;p>如果使用 GTID 等位点的方案做读写分离，在对大表做 DDL 的时候会怎么样？&lt;/p>
&lt;p>假设，这条语句在主库上要执行 10 分钟，提交后传到从库就要 10 分钟（典型的大事务）。那么，在主库 DDL 之后再提交的事务的 GTID，去从库查的时候，就会等 10 分钟才出现。这样，这个读写分离机制在这 10 分钟之内都会超时，然后走主库。&lt;/p>
&lt;p>这种预期内的操作，应该在业务低峰期的时候，确保主库能够支持所有业务查询，然后把读请求都切到主库，再在主库上做 DDL。等从库延迟追上以后，再把读请求切回从库。&lt;/p>
&lt;p>需要关注大事务对等位点方案的影响。另外使用 gh-ost 方案来解决这个问题也是不错的选择。&lt;/p>
&lt;h2 id="判断主库故障">判断主库故障&lt;/h2>
&lt;p>主从切换有两种场景，一种是主动切换，一种是被动切换。而其中被动切换往往是因为主库出问题了，由 HA 系统发起的。&lt;/p>
&lt;p>判断主库故障的方法：&lt;/p>
&lt;h3 id="select-1-判断">select 1 判断&lt;/h3>
&lt;p>select 1 成功返回，只能说明这个库的进程还在，并不能说明主库没问题。&lt;/p>
&lt;p>可以通过设置 innodb_thread_concurrency 参数控制 InnoDB 的并发线程上限，使用多个语句如 &lt;code>select sleep(100) from t;&lt;/code> 占用查询，新建会话发现 select 1 可以返回，但是其他 SQL 语句却因为分配不到连接线程被阻塞。&lt;/p>
&lt;p>该参数默认为 0，表示不限制并发线程数量。建议设置为 64~128。&lt;/p>
&lt;p>注意并发连接和并发查询，并不是同一个概念。show processlist 中看到的几千个连接，指的就是并发连接。而“当前正在执行”的语句，才是并发查询。并发连接数达到几千个影响并不大，就是多占一些内存而已。并发查询太高才是 CPU 杀手。&lt;/p>
&lt;p>线程进入锁等待以后，并发线程的计数会减一，也就是等行锁（也包括间隙锁）的线程是不算在这个参数里面的。&lt;/p>
&lt;h3 id="查表判断">查表判断&lt;/h3>
&lt;p>为了能够检测 InnoDB 并发线程数过多导致的系统不可用情况，我们需要找一个访问 InnoDB 的场景。一般做法是在系统库（mysql 库）里创建一个表，比如命名为 health_check，里面只放一行数据，然后定期执行：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">mysql&lt;/span>.&lt;span style="color:#000">health_check&lt;/span>; 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>问题：更新事务要写 binlog，而一旦 binlog 所在磁盘的空间占用率达到 100%，那么所有的更新语句和事务提交的 commit 语句就都会被堵住。但是，系统这时候还是可以正常读数据的。&lt;/p>
&lt;h3 id="更新判断">更新判断&lt;/h3>
&lt;p>既然要更新，就要放个有意义的字段，常见做法是放一个 timestamp 字段，用来表示最后一次执行检测的时间。这条更新语句类似于：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">mysql&lt;/span>.&lt;span style="color:#000">health_check&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">now&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>节点可用性的检测都应该包含主库和从库。如果用更新来检测主库的话，那么从库也要进行更新检测。
但从库的检测也是要写 binlog 的。因为一般会把数据库 A 和 B 的主备关系设计为双 M 结构，所以在备库 B 上执行的检测命令，也要发回给主库 A。&lt;/p>
&lt;p>但是如果主库 A 和备库 B 都用相同的更新命令，就可能出现行冲突，也就是可能会导致主备同步停止。所以现在看来 mysql.health_check 这个表就不能只有一行数据了。&lt;/p>
&lt;p>为了让主备之间的更新不产生冲突，可以在 mysql.health_check 表上存入多行数据，并用 A、B 的 server_id 做主键。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">health_check&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">timestamp&lt;/span> &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">CURRENT_TIMESTAMP&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 检测命令 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">mysql&lt;/span>.&lt;span style="color:#000">health_check&lt;/span>(&lt;span style="color:#000">id&lt;/span>, &lt;span style="color:#000">t_modified&lt;/span>) &lt;span style="color:#a90d91">values&lt;/span> (&lt;span style="color:#000">@@&lt;/span>&lt;span style="color:#000">server_id&lt;/span>, &lt;span style="color:#000">now&lt;/span>()) &lt;span style="color:#a90d91">on&lt;/span> &lt;span style="color:#000">duplicate&lt;/span> &lt;span style="color:#a90d91">key&lt;/span> &lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">now&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>由于 MySQL 规定了主库和备库的 server_id 必须不同（否则创建主备关系的时候就会报错），这样就可以保证主从库各自的检测命令不会发生冲突。
但是更新判断还是有“判定慢”的问题。根本原因是上面说的所有方法，都是基于外部检测的，有一个随机性的天然问题。外部检测都需要定时轮询，可能需要等到下一个检测发起执行语句时，才有可能发现问题。&lt;/p>
&lt;p>比如 IO 利用率 100% 表示系统的 IO 是在工作的，每个请求都有机会获得 IO 资源，执行自己的任务。而检测使用的 update 命令，需要的资源很少，所以可能在拿到 IO 资源的时候就可以提交成功，并且在超时时间 N 秒未到达之前就返回给了检测系统。&lt;/p>
&lt;h3 id="内部统计">内部统计&lt;/h3>
&lt;p>针对磁盘利用率，如果 MySQL 可以告诉我们内部每一次 IO 请求的时间，那判断数据库是否出问题的方法就很可靠。&lt;/p>
&lt;p>MySQL 5.6 版本以后提供的 performance_schema 库，就在 file_summary_by_event_name 表里统计了每次 IO 请求的时间。&lt;/p>
&lt;p>file_summary_by_event_name 表里有很多行数据，先看看 event_name='wait/io/file/innodb/innodb_log_file’这一行。&lt;/p>
&lt;p>&lt;img src="../imgs/master_slave_20220409_12.png" alt="master_slave_20220409_12.png">&lt;/p>
&lt;p>这一行表示统计的是 redo log 的写入时间，第一列 EVENT_NAME 表示统计的类型。&lt;/p>
&lt;p>接下来的三组数据，显示的是 redo log 操作的时间统计。&lt;/p>
&lt;p>第一组五列，是所有 IO 类型的统计。其中，COUNT_STAR 是所有 IO 的总次数，接下来四列是具体的统计项， 单位是皮秒；前缀 SUM、MIN、AVG、MAX，顾名思义指的就是总和、最小值、平均值和最大值。&lt;/p>
&lt;p>第二组六列，是读操作的统计。最后一列 SUM_NUMBER_OF_BYTES_READ 统计的是，总共从 redo log 里读了多少个字节。&lt;/p>
&lt;p>第三组六列，统计的是写操作。&lt;/p>
&lt;p>最后的第四组数据，是对其他类型数据的统计。在 redo log 里，可以认为就是对 fsync 的统计。&lt;/p>
&lt;p>在 performance_schema 库的 file_summary_by_event_name 表里，binlog 对应的是 event_name = &amp;quot;wait/io/file/sql/binlog&amp;quot;这一行。各个字段的统计逻辑，与 redo log 的各个字段完全相同。&lt;/p>
&lt;p>如果打开所有的 performance_schema 项，性能大概会下降 10% 左右。&lt;/p>
&lt;p>如果要打开 redo log 的时间监控，可以执行这个语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">setup_instruments&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">ENABLED&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;YES&amp;#39;&lt;/span>, &lt;span style="color:#000">Timed&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;YES&amp;#39;&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#c41a16">&amp;#39;%wait/io/file/innodb/innodb_log_file%&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可以通过 MAX_TIMER 的值来判断数据库是否出问题。比如可以设定阈值，单次 IO 请求时间超过 200 毫秒属于异常，然后使用类似下面这条语句作为检测逻辑：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">event_name&lt;/span>,&lt;span style="color:#000">MAX_TIMER_WAIT&lt;/span>  &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">performance_schema&lt;/span>.&lt;span style="color:#000">file_summary_by_event_name&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">event_name&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> (&lt;span style="color:#c41a16">&amp;#39;wait/io/file/innodb/innodb_log_file&amp;#39;&lt;/span>,&lt;span style="color:#c41a16">&amp;#39;wait/io/file/sql/binlog&amp;#39;&lt;/span>) &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">MAX_TIMER_WAIT&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>&lt;span style="color:#1c01ce">200&lt;/span>&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#1c01ce">1000000000&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>发现异常后获取到需要的信息。可通过下面这条语句把之前的统计信息清空：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">truncate&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">performance_schema&lt;/span>.&lt;span style="color:#000">file_summary_by_event_name&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h3 id="判断主库故障小结">判断主库故障小结&lt;/h3>
&lt;p>使用非常广泛的 MHA（Master High Availability），默认使用 select 1 方法。&lt;/p>
&lt;p>MHA 中的另一个可选方法是只做连接，就是 “如果连接成功就认为主库没问题”。但选择这个方法的很少。&lt;/p>
&lt;p>建议是优先考虑 update 系统表，然后再配合增加检测 performance_schema 的信息。&lt;/p></description></item><item><title>Docs: 03.表</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/03.%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/03.%E8%A1%A8/</guid><description>
&lt;h1 id="表">表&lt;/h1>
&lt;h2 id="表的组成">表的组成&lt;/h2>
&lt;p>一个 InnoDB 表包含两部分，即：表结构定义和数据。&lt;/p>
&lt;p>在 MySQL 8.0 版本以前，表结构是存在以.frm 为后缀的文件里。而 MySQL 8.0 版本，则已经允许把表结构定义放在系统数据表中了。表结构定义占用的空间很小。&lt;/p>
&lt;h2 id="表数据">表数据&lt;/h2>
&lt;p>表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的：&lt;/p>
&lt;p>1、设置为 OFF 表示：表的数据放在系统共享表空间，也就是跟数据字典放在一起；&lt;/p>
&lt;p>2、设置为 ON 表示：每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。&lt;/p>
&lt;p>从 MySQL 5.6.6 版本开始，默认值就是 ON 。&lt;/p>
&lt;p>建议无论哪个版本都将这个值设置为 ON。因为一个表单独存储为一个文件更容易管理，而且不需要这个表时，通过 drop table 命令，系统就会直接删除这个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的。&lt;/p>
&lt;h2 id="数据删除流程">数据删除流程&lt;/h2>
&lt;p>InnoDB 里的数据都是用 B+ 树的结构组织的。&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_1.png" alt="table_20220409_1.png">&lt;/p>
&lt;p>[B+ 树索引示意图]&lt;/p>
&lt;p>假设删除 R4 记录，InnoDB 引擎只会把 R4 记录标记为删除。如果之后要插入一个 ID 在 300 和 600 之间的记录时，可能会复用该位置。但是，磁盘文件的大小并不会缩小。&lt;/p>
&lt;p>InnoDB 的数据是按页存储的，如果删除了一个数据页上的所有记录，那么整个数据页就可以被复用了。&lt;/p>
&lt;p>注意：&lt;strong>数据页的复用和记录的复用是不同的！&lt;/strong>&lt;/p>
&lt;p>记录的复用，只限于符合范围条件的数据。而整个页从 B+ 树里面摘掉以后，可以复用到任何位置。&lt;/p>
&lt;p>如果相邻的两个数据页利用率都很小，系统就会把两个页上的数据合到其中一个页上，另外一个数据页就被标记为可复用。&lt;/p>
&lt;p>如果用 delete 命令将整个表的数据删除，所有的数据页都会被标记为可复用。但是磁盘上文件不会变小。这些可以复用，而没有被使用的空间，看起来就像是“空洞”。&lt;/p>
&lt;p>实际上，插入数据也会造成这种“空洞”。&lt;/p>
&lt;p>比如上图中的 page A 已满，插入一条数据（如 ID 为 550）会造成页分类，page A 和新增的 page B 都会留下“空洞”。&lt;/p>
&lt;p>以此类推，更新索引上的值，可以理解为删除一个旧的值，再插入一个新的值，也是会造成空洞的。&lt;/p>
&lt;p>因此，重建表可以达到去掉空洞、收缩表空间的目的。&lt;/p>
&lt;h2 id="重建表">重建表&lt;/h2>
&lt;p>把表 B 作为临时表，数据从表 A 导入表 B 的操作完成后，用表 B 替换 A，从效果上看，就起到了收缩表 A 空间的作用。&lt;/p>
&lt;p>可以使用 &lt;code>alter table A engine=InnoDB&lt;/code> 命令来重建表，MySQL 会自动完成转存数据、交换表名、删除旧表的操作。&lt;/p>
&lt;p>在整个 DDL 过程中，表 A 中不能有更新。即这个 DDL 不是 Online 的。&lt;/p>
&lt;p>MySQL 5.6 版本开始引入的 Online DDL，对该操作流程做了优化。&lt;/p>
&lt;p>引入了 Online DDL 之后，重建表的流程：&lt;/p>
&lt;p>1、建立一个临时文件，扫描表 A 主键的所有数据页；&lt;/p>
&lt;p>2、用数据页中表 A 的记录生成 B+ 树，存储到临时文件中；&lt;/p>
&lt;p>3、生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中；&lt;/p>
&lt;p>4、临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同的数据文件；&lt;/p>
&lt;p>5、用临时文件替换表 A 的数据文件。&lt;/p>
&lt;p>总结不同之处在于，由于日志文件记录和重放操作功能的存在，方案在重建表的过程中，允许对表 A 做增删改操作。这也就是 Online DDL 名字的来源。&lt;/p>
&lt;p>（关于获取写锁，然后降级成读锁不阻塞更新过程，可参考“锁”章节 Online DDL）&lt;/p>
&lt;p>Online DDL 可以考虑在业务低峰期使用，线上服务如果想要更安全的操作的话，建议使用 GitHub 开源的 gh-ost 来操作。&lt;/p>
&lt;h2 id="online和inplace">Online和inplace&lt;/h2>
&lt;p>DDL 中把表 A 中的数据导出来的存放位置叫作 tmp_table。这是一个临时表，在 server 层创建。&lt;/p>
&lt;p>Online DDL 中根据表 A 重建出来的数据是放在“tmp_file”里的，这个临时文件是 InnoDB 在内部创建出来的。整个 DDL 过程都在 InnoDB 内部完成。对于 server 层来说，没有把数据挪动到临时表，是一个“原地”操作，这就是“inplace”名称的来源。&lt;/p>
&lt;p>所以 inplace 的 DDL 受到磁盘空间约束，如果额外的空间不够 tmp_file 使用，则无法执行。&lt;/p>
&lt;p>重建表的语句 &lt;code>alter table A engine=InnoDB&lt;/code> ，隐含的意思就是：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">A&lt;/span> &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>,&lt;span style="color:#000">ALGORITHM&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">inplace&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>跟 inplace 对应的就是拷贝表的方式，用法是：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">A&lt;/span> &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>,&lt;span style="color:#000">ALGORITHM&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">copy&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>当使用 ALGORITHM=copy 时表示强制拷贝表，对应的流程就是 非 Online 的 DDL。
上面的逻辑看起来 inplace 跟 Online 是一个意思？其实并不是。&lt;/p>
&lt;p>比如，给 InnoDB 表的一个字段加全文索引：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#000">FULLTEXT&lt;/span>(&lt;span style="color:#000">field_name&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>该过程是 inplace 的，但是会阻塞 增删改 操作，是非 Online 的。
二者之间的关系概括：&lt;/p>
&lt;p>1、DDL 过程如果是 Online 的，那么一定是 inplace 的；&lt;/p>
&lt;p>2、反之不一定，inplace 的 DDL 有可能不是 Online 的。&lt;/p>
&lt;p>（MySQL 8.0 添加全文索引（FULLTEXT index）和空间索引（SPATIAL index）就属于这种情况。&lt;/p>
&lt;p>&lt;strong>optimize table、analyze table 和 alter table 区别&lt;/strong>&lt;/p>
&lt;p>1、从 MySQL 5.6 版本开始，alter table t engine = InnoDB（也就是 recreate）默认的 Online DDL&lt;/p>
&lt;p>2、analyze table t 其实不是重建表，只是对表的索引信息做重新统计，没有修改数据，这个过程中加了 MDL 读锁；&lt;/p>
&lt;p>3、optimize table t 等于 recreate+analyze。&lt;/p>
&lt;p>&lt;strong>表重建后占用空间更大是什么原因？&lt;/strong>&lt;/p>
&lt;p>本身已经没有“空洞”了，DDL 期间，刚好有外部的 DML 正在执行，可能引入一些“空洞”。&lt;/p>
&lt;p>更深层次的，在重建表的时候，InnoDB 不会把整张表占满，每个页留了 1/16 给后续的更新用。也就是说，其实重建表之后不是最紧凑的。&lt;/p>
&lt;h1 id="临时表">临时表&lt;/h1>
&lt;h2 id="内存临时表">内存临时表&lt;/h2>
&lt;p>如 MEMORY 内存临时表，当使用 order by rand() 查询语句时会自动生成。或者 &lt;code>create table … engine=memory&lt;/code>&lt;/p>
&lt;h2 id="磁盘临时表">磁盘临时表&lt;/h2>
&lt;p>mp_table_size 这个配置限制了内存临时表的大小，默认值是 16M。如果临时表大小超过了 tmp_table_size，那么内存临时表就会转成磁盘临时表。&lt;/p>
&lt;p>磁盘临时表使用的引擎默认是 InnoDB，是由参数 internal_tmp_disk_storage_engine 控制的。&lt;/p>
&lt;h3 id="排序过程">排序过程&lt;/h3>
&lt;p>当使用磁盘临时表的时候，对应的就是一个没有显式索引的 InnoDB 表的排序过程。&lt;/p>
&lt;p>验证过程，将 tmp_table_size 设置成 1024，把 sort_buffer_size 设置成 32768, 把 max_length_for_sort_data 设置成 16。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">tmp_table_size&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1024&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">sort_buffer_size&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">32768&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">max_length_for_sort_data&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 打开 optimizer_trace，只对本线程有效 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SET&lt;/span> &lt;span style="color:#000">optimizer_trace&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;enabled=on&amp;#39;&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 执行语句 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">word&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">words&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">rand&lt;/span>() &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 查看 OPTIMIZER_TRACE 输出 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">information_schema&lt;/span>&lt;span style="color:#000">`&lt;/span>.&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">OPTIMIZER_TRACE&lt;/span>&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">\&lt;/span>&lt;span style="color:#a90d91">G&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="../imgs/table_20220409_2.png" alt="table_20220409_2.png">&lt;/p>
&lt;p>[OPTIMIZER_TRACE 部分结果]&lt;/p>
&lt;p>因为将 max_length_for_sort_data 设置成 16，小于 word 字段的长度定义，所以 sort_mode 里面显示的是 rowid 排序。&lt;/p>
&lt;p>rand 字段存放的随机值就 8 个字节，rowid 是 6 个字节，数据总行数是 10000，有 140000 字节，超过了 sort_buffer_size 定义的 32768 字节。但是，number_of_tmp_files 的值是 0。因为这里没有用到临时文件，采用是 MySQL 5.6 版本引入的优先队列排序而不是归并排序（不需要将所有数据都排序）。&lt;/p>
&lt;p>优先队列算法可以精确地只得到三个最小值，执行流程如下：&lt;/p>
&lt;p>1、对于这 10000 个准备排序的 (rand,rowid)，先取前三行，构造成一个堆；&lt;/p>
&lt;p>2、取下一个行 (rand’,rowid’)，跟当前堆里面最大的 rand 比较，如果 rand’小于 rand，把这个 (rand,rowid) 从堆中去掉，换成 (rand’,rowid’)；&lt;/p>
&lt;p>3、重复第 2 步，直到第 10000 个 (rand’,rowid’) 完成比较。&lt;/p>
&lt;h2 id="临时表特性">临时表特性&lt;/h2>
&lt;p>1、建表语法是 create temporary table …。&lt;/p>
&lt;p>2、&lt;strong>临时表只能被创建它的 session 访问，对其他线程不可见&lt;/strong>。&lt;/p>
&lt;p>3、临时表可以与普通表同名。&lt;/p>
&lt;p>4、session 内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表。&lt;/p>
&lt;p>5、show tables 命令不显示临时表。&lt;/p>
&lt;p>由于临时表只能被创建它的 session 访问，所以 session 结束时会自动删除临时表。也正是由于这个特性，临时表就特别适合 join 优化场景。原因主要包括以下两个方面：&lt;/p>
&lt;p>1、不同 session 的临时表是可以重名的，如果有多个 session 同时执行 join 优化，不需要担心表名重复导致建表失败的问题。&lt;/p>
&lt;p>2、不需要担心数据删除问题。如果使用普通表，在流程执行过程中客户端发生了异常断开，或者数据库发生异常重启，还需要专门来清理中间过程中生成的数据表。而临时表由于会自动回收，所以不需要这个额外的操作。&lt;/p>
&lt;h2 id="临时表应用">临时表应用&lt;/h2>
&lt;p>由于不用担心线程之间的重名冲突，临时表经常会被用在复杂查询的优化过程中。其中，分库分表系统的跨库查询就是一个典型的使用场景。&lt;/p>
&lt;h2 id="临时表数据">临时表数据&lt;/h2>
&lt;p>frm 文件放在临时文件目录下，文件名的后缀是.frm，前缀是进程id_线程id_序列号，每个线程的线程 id 不同，所以不同线程可以创建同名的临时表。可以使用 select @@tmpdir 命令，来显示实例的临时文件目录。&lt;/p>
&lt;p>临时表中数据的存放方式，在不同的 MySQL 版本中有着不同的处理方式：&lt;/p>
&lt;p>1、在 5.6 以及之前的版本里，MySQL 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；&lt;/p>
&lt;p>2、从 5.7 版本开始，MySQL 引入了一个临时文件表空间，专门用来存放临时文件的数据。因此不需要再创建 ibd 文件。&lt;/p>
&lt;p>MySQL 维护数据表，除了物理上要有文件外，内存里面也有一套机制区别不同的表，每个表都对应一个 table_def_key。&lt;/p>
&lt;p>1、一个普通表的 table_def_key 的值是由“库名 + 表名”得到，所以如果要在同一个库下创建两个同名的普通表，创建第二个表的过程中就会发现 table_def_key 已经存在了。&lt;/p>
&lt;p>2、而对于临时表，table_def_key 在“库名 + 表名”基础上，又加入了“server_id+thread_id”。&lt;/p>
&lt;h2 id="临时表与主从同步">临时表与主从同步&lt;/h2>
&lt;p>如果当前的 binlog_format=row，那么跟临时表有关的语句，不会记录到 binlog 里。也就是只在 binlog_format=statment/mixed 的时候，binlog 中才会记录临时表的操作。&lt;/p>
&lt;p>这种情况下，创建临时表的语句会传到从库执行，因此从库的同步线程就会创建这个临时表。主库在线程退出的时候，会自动删除临时表，但是从库同步线程是持续在运行的。所以这时候就需要在主库上再写一个 DROP TEMPORARY TABLE 传给从库执行。&lt;/p>
&lt;p>MySQL 在记录 binlog 的时候，不论是 create table 还是 alter table 语句都是原样记录，甚至于连空格都不变。但是如果执行 drop table t_normal，系统记录 binlog 就会改成了标准的格式：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">DROP&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t_normal&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#177500">/* generated by server */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>drop table 命令是可以一次删除多个表的。比如设置 binlog_format=row，如果主库上执行 &amp;quot;drop table t_normal, temp_t&amp;quot;这个命令，那么 binlog 中就只能记录上面改写的语句。因为从库上并没有表 temp_t，将这个命令重写后再传到从库执行，才不会导致从库同步线程停止。&lt;/p>
&lt;p>主库上不同的线程创建同名的临时表是没关系的，传到从库执行要把这两个同名的临时表当做两个不同的临时表来处理。MySQL 记录 binlog 时，会把主库执行语句的线程 id 写到 binlog 中。这样从库的应用线程就能够知道执行每个语句的主库线程 id，并利用这个线程 id 来构造临时表的 table_def_key（库名 + 表名 + serverid + thread_id）。&lt;/p>
&lt;h2 id="临时表faq">临时表FAQ&lt;/h2>
&lt;p>&lt;strong>MySQL 什么时候使用内部临时表？&lt;/strong>&lt;/p>
&lt;p>1、如果语句执行过程可以一边读数据，一边直接得到结果，不需要额外内存，否则就需要额外的内存，来保存中间结果；&lt;/p>
&lt;p>2、join_buffer 是无序数组，sort_buffer 是有序数组，临时表是二维表结构；&lt;/p>
&lt;p>三者的区别&lt;/p>
&lt;p>joinBuffer: 用于在join语句中对驱动表进行暂存用，是无序数组；所以为什么BKA算法在用了JoinBuffer后不能原地排序只好借由MRR算法排序；&lt;/p>
&lt;p>sortBuffer: order by 语句时，会将排序列进行暂存。sortBuffer不够的情况下，则是分段排序最后整合；&lt;/p>
&lt;p>临时表：一种二维表结构，有主键，有field。所以如果中间数据需要用到二维表特性，那么就需要使用临时表，且内存临时表不够的前提下，会转为使用磁盘临时表&lt;/p>
&lt;p>3、如果执行逻辑需要用到二维表特性，就会优先考虑使用临时表。union 需要用到唯一索引约束， group by 还需要用到另外一个字段来存累积计数。&lt;/p>
&lt;p>排序，分组，去重等可能会使用内存临时表。&lt;/p>
&lt;p>&lt;strong>为什么不能用 rename 修改临时表的改名？&lt;/strong>&lt;/p>
&lt;p>在实现上执行 rename table 语句时，要求按照“库名 / 表名.frm”的规则去磁盘找文件，但是临时表在磁盘上的 frm 文件是放在 tmpdir 目录下的，并且文件名的规则是“#sql{进程 id}&lt;em>{线程 id}&lt;/em> 序列号.frm”，因此会报“找不到文件名”的错误。&lt;/p>
&lt;h1 id="内存表">内存表&lt;/h1>
&lt;p>两个 group by 语句都用了 order by null，使用内存临时表得到的语句结果里，0 在最后一行；而使用磁盘临时表得到的结果里，0 在第一行。这与内存的数据组织结构有关。&lt;/p>
&lt;h2 id="内存表数据组织结构">内存表数据组织结构&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t21&lt;/span>(&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>, &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>) &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">Memory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t22&lt;/span>(&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>, &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>) &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">innodb&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t21&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>),(&lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>),(&lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>),(&lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>),(&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>),(&lt;span style="color:#1c01ce">6&lt;/span>,&lt;span style="color:#1c01ce">6&lt;/span>),(&lt;span style="color:#1c01ce">7&lt;/span>,&lt;span style="color:#1c01ce">7&lt;/span>),(&lt;span style="color:#1c01ce">8&lt;/span>,&lt;span style="color:#1c01ce">8&lt;/span>),(&lt;span style="color:#1c01ce">9&lt;/span>,&lt;span style="color:#1c01ce">9&lt;/span>),(&lt;span style="color:#1c01ce">0&lt;/span>,&lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t22&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>),(&lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>),(&lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>),(&lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>),(&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>),(&lt;span style="color:#1c01ce">6&lt;/span>,&lt;span style="color:#1c01ce">6&lt;/span>),(&lt;span style="color:#1c01ce">7&lt;/span>,&lt;span style="color:#1c01ce">7&lt;/span>),(&lt;span style="color:#1c01ce">8&lt;/span>,&lt;span style="color:#1c01ce">8&lt;/span>),(&lt;span style="color:#1c01ce">9&lt;/span>,&lt;span style="color:#1c01ce">9&lt;/span>),(&lt;span style="color:#1c01ce">0&lt;/span>,&lt;span style="color:#1c01ce">0&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>分别执行：
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from t21;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | c    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> |    &lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> |    &lt;span style="color:#1c01ce">2&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">3&lt;/span> |    &lt;span style="color:#1c01ce">3&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> |    &lt;span style="color:#1c01ce">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">5&lt;/span> |    &lt;span style="color:#1c01ce">5&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">6&lt;/span> |    &lt;span style="color:#1c01ce">6&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">7&lt;/span> |    &lt;span style="color:#1c01ce">7&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">8&lt;/span> |    &lt;span style="color:#1c01ce">8&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">9&lt;/span> |    &lt;span style="color:#1c01ce">9&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">0&lt;/span> |    &lt;span style="color:#1c01ce">0&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">10&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.02 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from t22;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | c    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">0&lt;/span> |    &lt;span style="color:#1c01ce">0&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> |    &lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> |    &lt;span style="color:#1c01ce">2&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">3&lt;/span> |    &lt;span style="color:#1c01ce">3&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> |    &lt;span style="color:#1c01ce">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">5&lt;/span> |    &lt;span style="color:#1c01ce">5&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">6&lt;/span> |    &lt;span style="color:#1c01ce">6&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">7&lt;/span> |    &lt;span style="color:#1c01ce">7&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">8&lt;/span> |    &lt;span style="color:#1c01ce">8&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">9&lt;/span> |    &lt;span style="color:#1c01ce">9&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">10&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>&lt;/p>
&lt;p>可以看到，内存表 t21 的返回结果里面 0 在最后一行，而 InnoDB 表 t22 的返回结果里 0 在第一行。
InnoDB 表的数据就放在主键索引树上，主键索引是 B+ 树。主键索引上的值是有序存储的。在执行 select * 的时候，就会按照叶子节点从左到右扫描，所以得到的结果里，0 就出现在第一行。&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_3.png" alt="table_20220409_3.png">&lt;/p>
&lt;p>[t22 表的组织结构]&lt;/p>
&lt;p>与 InnoDB 引擎不同，Memory 引擎的数据和索引是分开的。下图可以看到，内存表的数据部分以数组的方式单独存放，而主键 id 索引里，存的是每个数据的位置。主键 id 是 hash 索引，索引上的 key 并不是有序的。在内存表 t21 中执行 select * 的时候，走的是全表扫描，也就是顺序扫描这个数组。因此 0 就是最后一个被读到，并放入结果集的数据。&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_4.png" alt="table_20220409_4.png">&lt;/p>
&lt;p>[t21 表的组织结构]&lt;/p>
&lt;p>InnoDB 和 Memory 引擎的数据组织方式是不同的：&lt;/p>
&lt;p>1、InnoDB 引擎把数据放在主键索引上，其他索引上保存的是主键 id。这种方式称之为索引组织表（Index Organizied Table）。&lt;/p>
&lt;p>2、而 Memory 引擎采用的是把数据单独存放，索引上保存数据位置的数据组织形式，称之为堆组织表（Heap Organizied Table）。&lt;/p>
&lt;p>两个引擎的一些典型不同：&lt;/p>
&lt;p>1、InnoDB 表的数据总是有序存放的，而内存表的数据就是按照写入顺序存放的；&lt;/p>
&lt;p>2、当数据文件有空洞时，InnoDB 表在插入新数据为了保证数据有序性，只能在固定的位置写入新值，而内存表找到空位就可以插入新值；&lt;/p>
&lt;p>3、数据位置发生变化时，InnoDB 表只需要修改主键索引，而内存表需要修改所有索引；&lt;/p>
&lt;p>4、InnoDB 表用主键索引查询时需要走一次索引查找，用普通索引查询的时候，需要走两次索引查找。而内存表没有这个区别，所有索引的“地位”都是相同的。&lt;/p>
&lt;p>5、InnoDB 支持变长数据类型，不同记录的长度可能不同；内存表不支持 Blob 和 Text 字段，并且即使定义了 varchar(N)，实际也当作 char(N)，也就是固定长度字符串来存储，因此内存表的每行数据长度相同。&lt;/p>
&lt;p>由于内存表的这些特性，每个数据行被删除以后，空出的这个位置都可以被接下来要插入的数据复用。比如，在表 t21 中执行：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delete&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t21&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t21&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t21&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>就会看到返回结果里，id=10 这一行出现在 id=4 之后，也就是原来 id=5 这行数据的位置。
表 t21 的这个主键索引是哈希索引，因此如果执行范围查询，如 &lt;code>select * from t1 where id&amp;lt;5;&lt;/code> ，是用不上索引的，需要走全表扫描。&lt;/p>
&lt;h2 id="hash索引和b-tree索引">hash索引和B-Tree索引&lt;/h2>
&lt;p>内存表也是支持 B-Tree 索引的。在 id 列上创建一个 B-Tree 索引，SQL 语句可以这么写：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t21&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">a_btree_index&lt;/span> &lt;span style="color:#a90d91">using&lt;/span> &lt;span style="color:#000">btree&lt;/span> (&lt;span style="color:#000">id&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>表 t1 的数据组织形式就变成了下图，跟 InnoDB 的 b+ 树索引组织形式类似：
&lt;img src="../imgs/table_20220409_5.png" alt="table_20220409_5.png">&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from t21 where id&amp;lt;5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | c    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">0&lt;/span> |    &lt;span style="color:#1c01ce">0&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> |    &lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> |    &lt;span style="color:#1c01ce">2&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">3&lt;/span> |    &lt;span style="color:#1c01ce">3&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> |    &lt;span style="color:#1c01ce">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">5&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.01 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from t21 force index&lt;span style="color:#000">(&lt;/span>primary&lt;span style="color:#000">)&lt;/span> where id&amp;lt;5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | c    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> |    &lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> |    &lt;span style="color:#1c01ce">2&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">3&lt;/span> |    &lt;span style="color:#1c01ce">3&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> |    &lt;span style="color:#1c01ce">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">0&lt;/span> |    &lt;span style="color:#1c01ce">0&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">5&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>可以看到，执行 &lt;code>select * from t21 where id&amp;lt;5&lt;/code> 的时候，优化器会选择 B-Tree 索引，所以返回结果是 0 到 4。 使用 force index 强行使用主键 id 这个索引，id=0 这一行就在结果集的最末尾了。
不建议在生产环境上使用内存表。原因主要包括两个方面：&lt;/p>
&lt;p>1、锁粒度问题；&lt;/p>
&lt;p>2、数据持久化问题。&lt;/p>
&lt;h2 id="内存表的锁">内存表的锁&lt;/h2>
&lt;p>内存表的锁粒度：内存表不支持行锁，只支持表锁。一张表只要有更新，就会堵住其他所有在这张表上的读写操作。&lt;/p>
&lt;p>需要注意的是，这里的表锁跟之前介绍过的 MDL 锁不同，但都是表级的锁。&lt;/p>
&lt;p>模拟内存表的表级锁&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">update t21 set id=sleep(50) where id=1;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">select * from t21 where id=2;&lt;br>(wait 50s)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">show processlist;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在这个执行序列里，Session A 的 update 语句要执行 50 秒，在这个语句执行期间 Session B 的查询会进入锁等待状态。Session C 的 show processlist 结果输出如下：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>+----+------+-----------------+--------------------+---------+------+------------------------------+----------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Id | User | Host            | db                 | Command | Time | State                        | Info                                   |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------------+--------------------+---------+------+------------------------------+----------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#1c01ce">41&lt;/span> | root | localhost       | &lt;span style="color:#a90d91">test&lt;/span>               | Query   |   &lt;span style="color:#1c01ce">21&lt;/span> | User sleep                   | update t21 &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>sleep&lt;span style="color:#000">(&lt;/span>50&lt;span style="color:#000">)&lt;/span> where &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#1c01ce">43&lt;/span> | root | localhost       | &lt;span style="color:#a90d91">test&lt;/span>               | Query   |    &lt;span style="color:#1c01ce">6&lt;/span> | Waiting &lt;span style="color:#a90d91">for&lt;/span> table level lock | &lt;span style="color:#a90d91">select&lt;/span> * from t21 where &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>2           |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#1c01ce">45&lt;/span> | root | localhost       | &lt;span style="color:#a90d91">test&lt;/span>               | Query   |    &lt;span style="color:#1c01ce">0&lt;/span> | starting                     | show processlist                       |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------------+--------------------+---------+------+------------------------------+----------------------------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="内存表数据持久性">内存表数据持久性&lt;/h2>
&lt;p>数据放在内存中，是内存表的优势，但也是一个劣势。因为，数据库重启的时候，所有的内存表都会被清空。&lt;/p>
&lt;p>从库重启，内存表数据会被清空，接收客户端 update 语句后会执行失败，这样就会导致主备同步停止。如果这时候发生主备切换的话，客户端会看到表中数据“丢失”了。&lt;/p>
&lt;p>MySQL 在实现上做了这样一件事儿：在数据库重启之后，（主库）往 binlog 里面写入一行 DELETE FROM t1。&lt;/p>
&lt;p>由于重启会丢数据，如果一个备库重启，会导致主备同步线程停止；如果主库跟这个备库是双 M 架构，还可能导致主库的内存表数据被删掉。&lt;/p>
&lt;p>建议把普通内存表都用 InnoDB 表来代替。有一个场景例外，就是临时表。&lt;/p>
&lt;p>内存临时表刚好可以无视内存表的两个不足，主要是下面的三个原因：&lt;/p>
&lt;p>1、临时表不会被其他线程访问，没有并发性的问题；&lt;/p>
&lt;p>2、临时表重启后也是需要删除的，清空数据这个问题不存在；&lt;/p>
&lt;p>3、备库的临时表也不会影响主库的用户线程。&lt;/p>
&lt;p>扩展延伸&lt;/p>
&lt;p>从库重启之后肯定是会导致从库的内存表数据被清空，进而导致主从同步停止。最好的做法是将它修改成 InnoDB 引擎表。如果业务场景暂时不允许修改引擎如何处理从库重启？&lt;/p>
&lt;p>假设的是主库暂时不能修改引擎，那么就把从库的内存表引擎先都改成 InnoDB。对于每个内存表，执行&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">sql_log_bin&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">off&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">tbl_name&lt;/span> &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">innodb&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这样就能避免从库重启时数据丢失的问题。
由于主库重启后，会往 binlog 里面写“delete from tbl_name”，这个命令传到从库，从库的同名的表数据也会被清空。因此，就不会出现主从同步停止的问题。&lt;/p>
&lt;p>如果由于主库异常重启触发了 HA，这时之前修改过引擎的备库变成了主库。而原来的主库变成了新备库，在新备库上把所有的内存表（这时候表里没数据因为重启了）都改成 InnoDB 表。所以如果不能直接修改主库上的表引擎，可以配置一个自动巡检的工具，在备库上发现内存表就把引擎改了。&lt;/p>
&lt;h1 id="union">union&lt;/h1>
&lt;p>sort buffer、内存临时表和 join buffer 这三个数据结构都是用来存放语句执行过程中的中间数据，以辅助 SQL 语句的执行的。其中，排序时用到了 sort buffer，在使用 join 语句的时候用到了 join buffer。&lt;/p>
&lt;h2 id="union执行流程">union执行流程&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; explain  &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span> as f&lt;span style="color:#000">)&lt;/span> union &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">select&lt;/span> id from t11 order by id desc limit 2&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | select_type  | table      | partitions | &lt;span style="color:#a90d91">type&lt;/span>  | possible_keys | key     | key_len | ref  | rows | filtered | Extra           |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> | PRIMARY      | NULL       | NULL       | NULL  | NULL          | NULL    | NULL    | NULL | NULL |     NULL | No tables used  |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> | UNION        | t11       | NULL       | index | NULL          | PRIMARY | 4       | NULL |    &lt;span style="color:#1c01ce">2&lt;/span> |   100.00 | Using index     |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| NULL | UNION RESULT | &amp;lt;union1,2&amp;gt; | NULL       | ALL   | NULL          | NULL    | NULL    | NULL | NULL |     NULL | Using temporary |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">3&lt;/span> rows in set, &lt;span style="color:#1c01ce">1&lt;/span> warning &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>第三行的 Extra 字段，表示在对子查询的结果集做 union 的时候，使用了临时表 (Using temporary)。
这条语句的执行流程：&lt;/p>
&lt;p>1、创建一个内存临时表，这个临时表只有一个整型字段 f，并且 f 是主键字段。&lt;/p>
&lt;p>2、执行第一个子查询，得到 1000 这个值，并存入临时表中。&lt;/p>
&lt;p>3、执行第二个子查询：&lt;/p>
&lt;p>1）拿到第一行 id=1000，试图插入临时表中。但由于 1000 这个值已经存在于临时表了，违反了唯一性约束，所以插入失败，然后继续执行；&lt;/p>
&lt;p>2）取到第二行 id=999，插入临时表成功。&lt;/p>
&lt;p>4、从临时表中按行取出数据，返回结果，并删除临时表，结果中包含两行数据分别是 1000 和 999。&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_6.png" alt="table_20220409_6.png">&lt;/p>
&lt;p>[union 执行流程]&lt;/p>
&lt;p>这里的内存临时表起到了暂存数据的作用，而且计算过程还用上了临时表主键 id 的唯一性约束，实现了 union 的语义。如果把上面这个语句中的 union 改成 union all 的话，就没有了“去重”的语义。这样执行时就依次执行子查询，得到的结果直接作为结果集的一部分，发给客户端。因此也就不需要临时表了。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; explain  &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span> as f&lt;span style="color:#000">)&lt;/span> union all &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">select&lt;/span> id from t11 order by id desc limit 2&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | select_type | table | partitions | &lt;span style="color:#a90d91">type&lt;/span>  | possible_keys | key     | key_len | ref  | rows | filtered | Extra          |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> | PRIMARY     | NULL  | NULL       | NULL  | NULL          | NULL    | NULL    | NULL | NULL |     NULL | No tables used |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> | UNION       | t1    | NULL       | index | NULL          | PRIMARY | 4       | NULL |    &lt;span style="color:#1c01ce">2&lt;/span> |   100.00 | Using index    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">2&lt;/span> rows in set, &lt;span style="color:#1c01ce">1&lt;/span> warning &lt;span style="color:#000">(&lt;/span>0.01 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可以看到，第二行的 Extra 字段显示的是 Using index，表示只使用了覆盖索引，没有用临时表了。&lt;/p>
&lt;h2 id="group-by执行流程">group by执行流程&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">explain&lt;/span>  &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">%&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">m&lt;/span>, &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">group&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">m&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">select_type&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">partitions&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">type&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">possible_keys&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">key_len&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">ref&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">rows&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Extra&lt;/span>                                        &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span>  &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">SIMPLE&lt;/span>      &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t1&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">PRIMARY&lt;/span>,&lt;span style="color:#000">a&lt;/span>     &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">5&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span>  &lt;span style="color:#1c01ce">100&lt;/span> &lt;span style="color:#000">|&lt;/span>   &lt;span style="color:#1c01ce">100&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>; &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">temporary&lt;/span>; &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#000">filesort&lt;/span> &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">warning&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>在 Extra 字段里面，可以看到三个信息：
1、Using index，表示这个语句使用了覆盖索引，选择了索引 a，不需要回表；&lt;/p>
&lt;p>2、Using temporary，表示使用了临时表；&lt;/p>
&lt;p>3、Using filesort，表示需要排序。&lt;/p>
&lt;p>语句的执行流程：&lt;/p>
&lt;p>1、创建内存临时表，表里有两个字段 m 和 c，主键是 m；&lt;/p>
&lt;p>2、扫描表 t1 的索引 a，依次取出叶子节点上的 id 值，计算 id%10 的结果，记为 x；&lt;/p>
&lt;p>1）如果临时表中没有主键为 x 的行，就插入一个记录 (x,1);&lt;/p>
&lt;p>2）如果表中有主键为 x 的行，就将 x 这一行的 c 值加 1；&lt;/p>
&lt;p>3、遍历完成后，再根据字段 m 做排序，得到结果集返回给客户端。&lt;/p>
&lt;p>如果并不需要对结果进行排序，那可以在 SQL 语句末尾增加 order by null，也就是改成：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">%&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">m&lt;/span>, &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">group&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">m&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#a90d91">null&lt;/span>; &lt;span style="color:#000">//&lt;/span> &lt;span style="color:#000">Q11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这样就跳过了最后排序的阶段，直接从临时表中取数据返回。
内存临时表的大小是有限制的，参数 tmp_table_size 就是控制这个内存大小的，默认是 16M。&lt;/p>
&lt;p>如果把内存临时表的大小限制为最大 1024 字节，并把语句改成 id % 100，这样返回结果里有 100 行数据。但是，这时的内存临时表大小不够存下这 100 行数据，也就是说，执行过程中会发现内存临时表大小到达了上限（1024 字节）。&lt;/p>
&lt;p>这时候就会把内存临时表转成磁盘临时表，磁盘临时表默认使用的引擎是 InnoDB。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">tmp_table_size&lt;/span>&lt;span style="color:#000">=&lt;/span>1024;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> id%100 as m, count&lt;span style="color:#000">(&lt;/span>*&lt;span style="color:#000">)&lt;/span> as c from t11 group by m order by null limit 10; // Q12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| m    | c  |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">0&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">1&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">2&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">3&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">4&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">5&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">6&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">7&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">8&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|    &lt;span style="color:#1c01ce">9&lt;/span> | &lt;span style="color:#1c01ce">10&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">10&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.01 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>如果这个表 t1 的数据量很大，很可能这个查询需要的磁盘临时表就会占用大量的磁盘空间。
扩展：&lt;/p>
&lt;p>Q11 和 Q12 都是 order by null，但是 m 的排序不一样，一个是 9-0 另一个是 0-9&lt;/p>
&lt;p>因为 Q11 使用的是内存临时表，使用的引擎是 Memory，哈希索引按插入的顺序读取数据；Q12 使用的磁盘临时表，使用的引擎是innodb，innodb是索引组织表，按主键顺序存储数据，所以是按照m字段有序的。&lt;/p>
&lt;h3 id="group-by索引优化">group by索引优化&lt;/h3>
&lt;p>上面可以看到，不论是使用内存临时表还是磁盘临时表，group by 逻辑都需要构造一个带唯一索引的表，执行代价比较高。如果表的数据量比较大，上面这个 group by 语句执行起来就会很慢。&lt;/p>
&lt;p>group by 的语义逻辑，是统计不同的值出现的个数。但是，由于每一行的 id%100 的结果是无序的，所以就需要有一个临时表，来记录并统计结果。如果扫描过程中可以保证出现的数据是有序的，那么计算 group by 的时候，就只需要从左到右，顺序扫描，依次累加。也就是下面这个过程：&lt;/p>
&lt;p>1、当碰到第一个 1 的时候，已经知道累积了 X 个 0，结果集里的第一行就是 (0,X)；&lt;/p>
&lt;p>2、当碰到第一个 2 的时候，已经知道累积了 Y 个 1，结果集里的第二行就是 (1,Y);&lt;/p>
&lt;p>就可以拿到 group by 的结果，不需要临时表，也不需要再额外排序。&lt;/p>
&lt;p>InnoDB 的索引，就可以满足这个输入有序的条件！&lt;/p>
&lt;p>在 MySQL 5.7 版本支持了 generated column 机制，用来实现列数据的关联更新。你可以用下面的方法创建一个列 z，然后在 z 列上创建一个索引（如果是 MySQL 5.6 及之前的版本，也可以创建普通列和索引，来解决这个问题）&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">column&lt;/span> &lt;span style="color:#000">z&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#a90d91">generated&lt;/span> &lt;span style="color:#000">always&lt;/span> &lt;span style="color:#a90d91">as&lt;/span>(&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">%&lt;/span> &lt;span style="color:#1c01ce">100&lt;/span>), &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>(&lt;span style="color:#000">z&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这样索引 z 上的数据就是有序了。上面的 group by 语句就可以改成：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">z&lt;/span>, &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">group&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">z&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">select_type&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">partitions&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">type&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">possible_keys&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">key_len&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">ref&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">rows&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Extra&lt;/span>       &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span>  &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">SIMPLE&lt;/span>      &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t11&lt;/span>   &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">z&lt;/span>             &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">z&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">5&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span> &lt;span style="color:#000">|&lt;/span>   &lt;span style="color:#1c01ce">100&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">warning&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>从 Extra 字段可以看到，这个语句的执行不再需要临时表，也不需要排序了。&lt;/p>
&lt;h3 id="group-by直接排序优化">group by直接排序优化&lt;/h3>
&lt;p>碰上不适合创建索引的场景就没办法使用索引优化了。&lt;/p>
&lt;p>一个 group by 语句中需要放到临时表上的数据量特别大，却还是要按照“先放到内存临时表，插入一部分数据后，发现内存临时表不够用了再转成磁盘临时表”不太好。可以直接走磁盘临时表。&lt;/p>
&lt;p>在 group by 语句中加入 SQL_BIG_RESULT 这个提示（hint），就可以告诉优化器：这个语句涉及的数据量很大，请直接用磁盘临时表。&lt;/p>
&lt;p>MySQL 的优化器看磁盘临时表是 B+ 树存储，存储效率不如数组高，从磁盘空间考虑直接用数组。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">SQL_BIG_RESULT&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">%&lt;/span>&lt;span style="color:#1c01ce">100&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">m&lt;/span>, &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">group&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">m&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>流程如下：
1、初始化 sort_buffer，确定放入一个整型字段，记为 m；&lt;/p>
&lt;p>2、扫描表 t1 的索引 a，依次取出里面的 id 值, 将 id%100 的值存入 sort_buffer 中；&lt;/p>
&lt;p>3、扫描完成后，对 sort_buffer 的字段 m 做排序（如果 sort_buffer 内存不够用，就会利用磁盘临时文件辅助排序）；&lt;/p>
&lt;p>4、排序完成后，就得到了一个有序数组。&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_7.png" alt="table_20220409_7.png">&lt;/p>
&lt;p>[使用 SQL_BIG_RESULT 的执行流程图]&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">drop&lt;/span> &lt;span style="color:#a90d91">column&lt;/span> &lt;span style="color:#000">z&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">删除索引&lt;/span> &lt;span style="color:#000">z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#a90d91">desc&lt;/span> &lt;span style="color:#000">t11&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">查看表结构&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">explain&lt;/span> &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">SQL_BIG_RESULT&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">%&lt;/span>&lt;span style="color:#1c01ce">100&lt;/span> &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">m&lt;/span>, &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t11&lt;/span> &lt;span style="color:#a90d91">group&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">m&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">select_type&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">partitions&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">type&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">possible_keys&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">key_len&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">ref&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">rows&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Extra&lt;/span>                       &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span>  &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">SIMPLE&lt;/span>      &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t11&lt;/span>   &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">PRIMARY&lt;/span>,&lt;span style="color:#000">a&lt;/span>     &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">5&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span> &lt;span style="color:#000">|&lt;/span>   &lt;span style="color:#1c01ce">100&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>; &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#000">filesort&lt;/span> &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">warning&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>从 Extra 字段可以看到，这个语句的执行没有再使用临时表，而是直接用了排序算法。&lt;/p>
&lt;h3 id="group-by小结">group by小结&lt;/h3>
&lt;p>group by 使用指导原则：&lt;/p>
&lt;p>1、如果对 group by 语句的结果没有排序要求，要在语句后面加 order by null；&lt;/p>
&lt;p>2、尽量让 group by 过程用上表的索引，确认方法是 explain 结果里没有 Using temporary 和 Using filesort；&lt;/p>
&lt;p>3、如果 group by 需要统计的数据量不大，尽量只使用内存临时表；也可以通过适当调大 tmp_table_size 参数，来避免用到磁盘临时表；&lt;/p>
&lt;p>4、如果数据量实在太大，使用 SQL_BIG_RESULT 这个提示，来告诉优化器直接使用排序算法得到 group by 的结果。&lt;/p>
&lt;h1 id="排序">排序&lt;/h1>
&lt;h2 id="全字段排序">全字段排序&lt;/h2>
&lt;p>全字段排序流程：&lt;/p>
&lt;p>这个语句执行流程如下所示 ：&lt;/p>
&lt;p>1、初始化 sort_buffer，确定放入查询的所有字段；&lt;/p>
&lt;p>2、从二级索引中找到第一个满足条件的主键 id；&lt;/p>
&lt;p>3、到主键 id 索引取出整行，取 查询的所有字段 的值，存入 sort_buffer 中；&lt;/p>
&lt;p>4、从二级索引中取下一个记录的主键 id；&lt;/p>
&lt;p>5、重复步骤 3、4 直到 where 查询条件不满足为止；&lt;/p>
&lt;p>6、对 sort_buffer 中的数据按照 order 字段做&lt;strong>快速排序&lt;/strong>；&lt;/p>
&lt;p>7、按照排序结果取前 limit 行返回给客户端。&lt;/p>
&lt;p>按照 order 字段排序，可能在内存中完成，也可能需要使用外部排序，这取决于排序所需的内存和参数 sort_buffer_size。&lt;/p>
&lt;p>sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。&lt;/p>
&lt;p>可以用下面介绍的方法，来确定一个排序语句是否使用了临时文件。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 打开optimizer_trace，只对本线程有效 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SET&lt;/span> &lt;span style="color:#000">optimizer_trace&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;enabled=on&amp;#39;&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* @a保存Innodb_rows_read的初始值 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">VARIABLE_VALUE&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">from&lt;/span>  &lt;span style="color:#000">performance_schema&lt;/span>.&lt;span style="color:#000">session_status&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">variable_name&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;Innodb_rows_read&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 执行语句，查询的 SQL 语句 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">xxx&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tx&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">xx&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">xx&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">xx&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 查看 OPTIMIZER_TRACE 输出 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">information_schema&lt;/span>&lt;span style="color:#000">`&lt;/span>.&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">OPTIMIZER_TRACE&lt;/span>&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">\&lt;/span>&lt;span style="color:#a90d91">G&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* @b保存Innodb_rows_read的当前值 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">VARIABLE_VALUE&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">performance_schema&lt;/span>.&lt;span style="color:#000">session_status&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">variable_name&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;Innodb_rows_read&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* 计算Innodb_rows_read差值 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">-@&lt;/span>&lt;span style="color:#000">a&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>通过查看 OPTIMIZER_TRACE 的结果来确认的，可以从 number_of_tmp_files 中看到是否使用临时文件。&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_8.png" alt="table_20220409_8.png">&lt;/p>
&lt;p>number_of_tmp_files 表示排序过程中使用的临时文件数。&lt;/p>
&lt;p>内存放不下需要排序的数据时，就会用外部排序，一般使用归并排序。这里临时文件数就是归并排序将数据分成的份数，最后再合并成一个文件。&lt;/p>
&lt;p>如果 sort_buffer_size 超过了需要排序的数据量大小，number_of_tmp_files 就是 0，表示排序可以直接在内存中完成。&lt;/p>
&lt;p>examined_rows 表示参与排序的行数&lt;/p>
&lt;p>sort_mode 里面的 packed_additional_fields 的意思是，排序过程对字符串做了“紧凑”处理。即使字段的定义是 varchar(xx)，在排序过程中还是要按照实际长度来分配空间。&lt;/p>
&lt;p>注意：因为查询 OPTIMIZER_TRACE 表时，需要用到临时表，而 internal_tmp_disk_storage_engine 的默认值是 InnoDB。如果使用的是 InnoDB 引擎的话，把数据从临时表取出来的时候，会让 Innodb_rows_read 的值加 1，可以设置成 MyISAM。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">city&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">16&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">16&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">age&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">128&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">city&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">city&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>查询语句：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">city&lt;/span>,&lt;span style="color:#000">name&lt;/span>,&lt;span style="color:#000">age&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">city&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;杭州&amp;#39;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span>  ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>这里需要在 city 字段加上索引（略）。
explain SQL 查询语句，Extra 这个字段中的“Using filesort”表示的就是需要排序，MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer。&lt;/p>
&lt;h2 id="rowid排序">rowid排序&lt;/h2>
&lt;p>如果 MySQL 认为排序的单行长度太大，会采用另外一种 rowid 排序算法（如果没有主键 id，那么会自动生成一个长度为 6 字节的rowid 来作为主键）。&lt;/p>
&lt;p>可以通过下列参数设置用于排序的行数据的长度的一个参数。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>SET max_length_for_sort_data = 16;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>新的算法会根据行数据的长度计算放入 sort_buffer 的字段，如只要排序的列和主键 id。整体流程如下：&lt;/p>
&lt;p>1、初始化 sort_buffer，确定放入两个字段，即 排序字段 和主键 id；&lt;/p>
&lt;p>2、从二级索引中找到第一个满足条件的主键 id；&lt;/p>
&lt;p>3、到主键 id 索引取出整行，取 条件、id 字段，存入 sort_buffer 中；&lt;/p>
&lt;p>4、从二级索引中取下一个记录的主键 id；&lt;/p>
&lt;p>5、重复步骤 3、4 直到不满足条件为止；&lt;/p>
&lt;p>6、对 sort_buffer 中的数据按照排序字段进行排序；&lt;/p>
&lt;p>7、遍历排序结果，取前 limit 行，并按照 id 的值回到原表中取出其它所需字段返回给客户端。&lt;/p>
&lt;h2 id="排序对比">排序对比&lt;/h2>
&lt;p>MySQL 认为内存太小，会影响排序效率，就会采用 rowid 排序算法，排序过程中一次可以排序更多航，但是需要再回到原表去取数据。&lt;/p>
&lt;p>如果认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，排序后可以直接从内存中返回查询结果，不用再回到原表中去取数据。&lt;/p>
&lt;p>排序的操作成本较高，排序的根本原因在于原来的数据都是无序的，如果要避免排序操作，那么保证原来的数据有序即可。这里自然联想到使用索引，具体来说是联合索引，可以通过 explain 的 Extra 字段来验证。进一步还可以结合覆盖索引，避免回表的操作。&lt;/p>
&lt;h1 id="全表扫描">全表扫描&lt;/h1>
&lt;h2 id="客户端连接">客户端连接&lt;/h2>
&lt;p>如果库里面的表特别多，连接就会很慢。其实这并不是连接慢也不是服务端慢，而是客户端慢，因为要执行哈希操作构建一个本地的哈希表。&lt;/p>
&lt;p>比如有些线上的库，会包含很多表如 6 万个表。会发现每次用客户端连接都会卡在下面这个连接上：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">h127&lt;/span>.&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">uroot&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">pxxx&lt;/span> &lt;span style="color:#000">db123&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>并且终端还提示使用 -A 参数可以关掉自动补全功能，然后客户端就可以快速返回了。
除了加 -A 以外，加 –quick(简写为 -q) 参数，也可以跳过这个阶段。但是需要注意设置这个参数可能会降低服务端的性能。&lt;/p>
&lt;p>因为 MySQL 客户端发送请求后，接收服务端返回结果的方式有两种：&lt;/p>
&lt;p>1、一种是本地缓存，也就是在本地开一片内存，先把结果存起来。API 开发对应的就是 mysql_store_result 方法。&lt;/p>
&lt;p>2、另一种是不缓存，读一个处理一个。API 开发对应的就是 mysql_use_result 方法。&lt;/p>
&lt;p>MySQL 客户端默认采用第一种方式，而如果加上–quick 参数，就会使用第二种不缓存的方式。&lt;/p>
&lt;p>采用不缓存的方式时，如果本地处理得慢，就会导致服务端发送结果被阻塞，因此会让服务端变慢。&lt;/p>
&lt;h2 id="server层">server层&lt;/h2>
&lt;p>对一个 200G 的 InnoDB 表 db1. t，执行一个全表扫描。把扫描结果保存在客户端，会使用类似这样的命令：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">h$host&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">P$port&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">u$user&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">p$pwd&lt;/span> &lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#c41a16">&amp;#34;select * from db1.t&amp;#34;&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">target_file&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>服务端查询数据并不需要保存一个完整的结果集。取数据和发数据的流程：
1、获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k。&lt;/p>
&lt;p>2、重复获取行，直到 net_buffer 写满，调用网络接口发出去。&lt;/p>
&lt;p>3、如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer。&lt;/p>
&lt;p>4、如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送。&lt;/p>
&lt;p>从这个流程可以知道：&lt;/p>
&lt;p>1、一个查询在发送过程中，占用的 MySQL 内部的内存最大就是 net_buffer_length 这么大，全表扫描时并不会达到表的大小；&lt;/p>
&lt;p>2、socket send buffer 在全表扫描时也不可能达到表的大小（默认定义 /proc/sys/net/core/wmem_default），如果 socket send buffer 被写满，就会暂停读数据的流程。&lt;/p>
&lt;p>所以 MySQL 是“边读边发”，就意味着如果客户端接收得慢，会导致 MySQL 服务端由于结果发不出去，事务的执行时间变长。&lt;/p>
&lt;h2 id="innodb引擎层">InnoDB引擎层&lt;/h2>
&lt;h3 id="buffer-pool">Buffer Pool&lt;/h3>
&lt;p>介绍 WAL 机制时，分析了 InnoDB 内存的一个作用是保存更新的结果，再配合 redo log，就避免了随机写盘。&lt;/p>
&lt;p>内存的数据页是在 Buffer Pool (BP) 中管理的，在 WAL 里 Buffer Pool 起到了加速更新的作用。而实际上，Buffer Pool 还有一个更重要的作用是加速查询。&lt;/p>
&lt;p>由于有 WAL 机制，当事务提交的时候，磁盘上的数据页是旧的，如果这时马上有一个查询要来读这个数据页，并不需要立即把 redo log 应用到数据页。因为这时候内存数据页的结果是最新的，直接读内存页就可以了。（注意这里跟 change buffer 和 redo log 不矛盾）&lt;/p>
&lt;p>InnoDB Buffer Pool 的大小是由参数 innodb_buffer_pool_size 确定的，一般建议设置成可用物理内存的 60%~80%。&lt;/p>
&lt;h3 id="内存命中率">内存命中率&lt;/h3>
&lt;p>Buffer Pool 对查询的加速效果，依赖于内存命中率这个重要指标。&lt;/p>
&lt;p>一般一个稳定服务的线上系统，要保证响应时间符合要求的话，内存命中率要在 99% 以上。查看系统当前 BP 命中率，可以通过 show engine innodb status，“Buffer pool hit rate”字样显示的就是当前的命中率。&lt;/p>
&lt;h3 id="lru算法改进">LRU算法改进&lt;/h3>
&lt;p>InnoDB 内存管理用的是最近最少使用 (Least Recently Used, LRU) 算法，这个算法的核心就是淘汰最久未使用的数据。&lt;/p>
&lt;p>但是全表扫描就会把当前的 Buffer Pool 里的数据全部淘汰掉，存入扫描过程中访问到的数据页的内容。也就是说 Buffer Pool 里面主要放的是这个历史数据表的数据。会使内存命令率急剧下降，磁盘压力增加，SQL 语句响应变慢。因此对 LRU 算法进行了改进。&lt;/p>
&lt;p>在 InnoDB 实现上，按照 5:3 的比例把整个 LRU 链表分成了 young 区域和 old 区域。靠近链表头部的 5/8 是 young 区域，靠近链表尾部的 3/8 是 old 区域。&lt;/p>
&lt;p>改进后的 LRU 算法逻辑：&lt;/p>
&lt;p>1、扫描过程中，需要新插入的数据页，都被放到 old 区域 ;&lt;/p>
&lt;p>2、一个数据页里面有多条记录，这个数据页会被多次访问到，但由于是顺序扫描，这个数据页第一次被访问和最后一次被访问的时间间隔不会超过 1 秒，因此还是会被保留在 old 区域；&lt;/p>
&lt;p>3、再继续扫描后续的数据，之前的这个数据页之后也不会再被访问到，于是始终没有机会移到链表头部（也就是 young 区域），很快就会被淘汰出去。&lt;/p>
&lt;p>这个策略最大的收益就是在扫描这个大表的过程中，虽然也用到了 Buffer Pool，但是对 young 区域完全没有影响，从而保证了 Buffer Pool 响应正常业务的查询命中率。&lt;/p>
&lt;h1 id="自增id">自增id&lt;/h1>
&lt;h2 id="自增主键">自增主键&lt;/h2>
&lt;p>自增主键可以让主键索引尽量地保持递增顺序插入，避免了页分裂，索引更紧凑。&lt;/p>
&lt;p>但自增主键不能保证连续递增。&lt;/p>
&lt;h3 id="自增值保存策略">自增值保存策略&lt;/h3>
&lt;p>实际上，表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。&lt;/p>
&lt;p>不同的引擎对于自增值的保存策略不同。&lt;/p>
&lt;p>1、MyISAM 引擎的自增值保存在数据文件中。&lt;/p>
&lt;p>2、InnoDB 引擎的自增值，其实是保存在了内存里，并且到了 MySQL 8.0 版本后，才有了“自增值持久化”的能力，也就是才实现了“如果发生重启，表的自增值可以恢复为 MySQL 重启前的值”，具体情况是：&lt;/p>
&lt;p>1）在 MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+1 作为这个表当前的自增值。﻿&lt;/p>
&lt;p>举例：如果一个表当前数据行里最大的 id 是 10，AUTO_INCREMENT=11。这时删除 id=10 的行，AUTO_INCREMENT 还是 11。但如果马上重启实例，重启后这个表的 AUTO_INCREMENT 就会变成 10。﻿也就是说，MySQL 重启可能会修改一个表的 AUTO_INCREMENT 的值。&lt;/p>
&lt;p>2）在 MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。&lt;/p>
&lt;h3 id="自增值修改机制">自增值修改机制&lt;/h3>
&lt;p>MySQL 里面，如果字段 id 被定义为 AUTO_INCREMENT，在插入一行数据的时候，自增值的行为如下：&lt;/p>
&lt;p>1、如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；&lt;/p>
&lt;p>2、如果插入数据时 id 字段指定了具体的值，就直接使用语句里指定的值。&lt;/p>
&lt;p>根据要插入的值和当前自增值的大小关系，自增值的变更结果也会有所不同。假设，某次要插入的值是 X，当前的自增值是 Y。&lt;/p>
&lt;p>1、如果 X&amp;lt;Y，那么这个表的自增值不变；&lt;/p>
&lt;p>2、如果 X≥Y，就需要把当前自增值修改为新的自增值。&lt;/p>
&lt;p>新的自增值生成算法是：从 auto_increment_offset 开始，以 auto_increment_increment 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。（两个系统参数默认都为1）&lt;/p>
&lt;h3 id="自增值修改时机">自增值修改时机&lt;/h3>
&lt;p>自增值改成插入的值，是在真正执行插入数据的操作之前。&lt;/p>
&lt;p>自增值不连续的原因：&lt;/p>
&lt;p>1、唯一键冲突&lt;/p>
&lt;p>2、事务回滚&lt;/p>
&lt;p>3、批量插入（申请id是上一次的 2 倍）&lt;/p>
&lt;p>&lt;strong>自增值不能回退的原因&lt;/strong>&lt;/p>
&lt;p>假设有两个并行执行的事务，在申请自增值时，为了避免两个事务申请到相同的自增 id，肯定要加锁然后顺序申请。&lt;/p>
&lt;p>1、假设事务 A 申请到了 id=2， 事务 B 申请到 id=3，那么这时候表 t 的自增值是 4，之后继续执行。&lt;/p>
&lt;p>2、事务 B 正确提交了，但事务 A 出现了唯一键冲突。&lt;/p>
&lt;p>3、如果允许事务 A 把自增 id 回退，也就是把表 t 的当前自增值改回 2，那么就会出现：表里面已经有 id=3 的行，而当前的自增 id 值是 2。&lt;/p>
&lt;p>4、接下来，继续执行的其他事务就会申请到 id=2，然后再申请到 id=3。这时，就会出现插入语句报错“主键冲突”。&lt;/p>
&lt;p>为了解决这个主键冲突，有两种方法：&lt;/p>
&lt;p>1、每次申请 id 之前，先判断表里面是否已经存在这个 id。如果存在，就跳过这个 id。但是，这个方法的成本很高。因为，本来申请 id 是一个很快的操作，现在还要再去主键索引树上判断 id 是否存在。&lt;/p>
&lt;p>2、把自增 id 的锁范围扩大，必须等到一个事务执行完成并提交，下一个事务才能再申请自增 id。这个方法的问题，就是锁的粒度太大，系统并发能力大大下降。&lt;/p>
&lt;p>这两个方法都会导致性能问题。因此 InnoDB 放弃了这个设计，语句执行失败也不回退自增 id。&lt;/p>
&lt;h3 id="自增锁的优化">自增锁的优化&lt;/h3>
&lt;p>自增 id 锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。（在 MySQL 5.1 版本之前，并不是这样的）&lt;/p>
&lt;p>在 MySQL 5.0 版本，自增锁的范围是语句级别。如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。这样设计会影响并发度。&lt;/p>
&lt;p>MySQL 5.1.22 版本引入了一个新策略，新增参数 innodb_autoinc_lock_mode，默认值是 1。&lt;/p>
&lt;p>1、参数值为 0 时，表示采用之前 MySQL 5.0 版本的策略，即语句执行结束后才释放锁；&lt;/p>
&lt;p>2、参数值为 1 时：普通 insert 语句，自增锁在申请之后就马上释放；类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；&lt;/p>
&lt;p>2、参数值为 2 时，所有的申请自增主键的动作都是申请后就释放锁。&lt;/p>
&lt;p>默认设置下 insert … select 要使用语句级锁 和 默认值不为 2 都是为了数据的一致性。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">insert into t31 values(null, 1, 1);&lt;br>insert into t31 values(null, 2, 2);&lt;br>insert into t31 values(null, 3, 3);&lt;br>insert into t31 values(null, 4, 4);&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">create table t32 like t31;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">insert into t32 values(null, 5, 5);&lt;/td>
&lt;td style="text-align:left">insert into t32(c,d) select c,d from t31;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果 Session B 是申请了自增值以后马上就释放自增锁，那么可能出现：&lt;/p>
&lt;p>1、Session B 先插入了两个记录，(1,1,1)、(2,2,2)；&lt;/p>
&lt;p>2、然后 Session A 来申请自增 id 得到 id=3，往 t32 插入了（3,5,5)；&lt;/p>
&lt;p>3、之后 Session B 继续执行，插入两条记录 (4,3,3)、 (5,4,4)。&lt;/p>
&lt;p>如果 binlog_format=statement，由于两个 session 是同时执行插入数据命令的，所以 binlog 里面对表 t32 的更新日志只有两种情况：要么先记 Session A 要么先记 Session B 。&lt;/p>
&lt;p>但不论是哪一种，binlog 去从库执行或者用来恢复临时实例，从库和临时实例里面，Session B 语句执行出来生成的结果里面，id 都是连续的。这时，这个库就发生了数据不一致。&lt;/p>
&lt;p>出现这个问题是因为原库 Session B 的 insert 语句，生成的 id 不连续。这个不连续的 id，用 statement 格式的 binlog 来串行执行，是执行不出来的。&lt;/p>
&lt;p>要解决这个问题有两种思路：&lt;/p>
&lt;p>1、让原库的批量插入数据语句，固定生成连续的 id 值。自增锁直到语句执行结束才释放就是为了这个目的。&lt;/p>
&lt;p>2、在 binlog 里面把插入数据的操作都如实记录进来，到从库执行的时候，不再依赖于自增主键去生成。其实就是 innodb_autoinc_lock_mode 设置为 2，同时 binlog_format 设置为 row。&lt;/p>
&lt;p>生产上尤其是有 insert … select 这种批量插入数据（insert … select、replace … select 和 load data 语句）的场景时，从并发插入数据性能的角度考虑，建议这样设置：innodb_autoinc_lock_mode=2 ，并且 binlog_format=row. 这样既能提升并发性又不会出现数据一致性问题。&lt;/p>
&lt;p>在普通的 insert 语句里面包含多个 value 值的情况下，即使 innodb_autoinc_lock_mode 设置为 1，也不会等语句执行完成才释放锁。因为这类语句在申请自增 id 的时候，是可以精确计算出需要多少个 id 的，一次性申请完成后锁就可以释放了。所以只有针对不知道预先需要申请多少个 id 的场景需要注意。&lt;/p>
&lt;h3 id="批量插入申请id策略">批量插入申请id策略&lt;/h3>
&lt;p>对于批量插入数据的语句，MySQL 有一个批量申请自增 id 的策略：&lt;/p>
&lt;p>1、语句执行过程中，第一次申请自增 id，会分配 1 个；&lt;/p>
&lt;p>2、1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；&lt;/p>
&lt;p>3、2 个用完以后，这个语句第三次申请自增 id，会分配 4 个；&lt;/p>
&lt;p>4、依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t31&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t31&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t31&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t31&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t32&lt;/span> &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#000">t31&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t32&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>,&lt;span style="color:#000">d&lt;/span>) &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>,&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t31&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t32&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>insert…select，实际上往表 t32 中插入了 4 行数据。但是，这四行数据是分三次申请的自增 id，第一次申请到了 id=1，第二次被分配了 id=2 和 id=3， 第三次被分配到 id=4 到 id=7。由于这条语句实际只用上了 4 个 id，所以 id=5 到 id=7 就被浪费掉了。之后，再执行
insert into t32 values(null, 5,5)，实际上插入的数据就是（8,5,5)。&lt;/p>
&lt;p>这是主键 id 出现自增 id 不连续的第三种原因。&lt;/p>
&lt;h3 id="自增主键主从同步">自增主键主从同步&lt;/h3>
&lt;p>binlog_format=statement下，即使两个 INSERT 语句在主备库的执行顺序不同，自增主键字段的值也不会不一致。因为会通过 &lt;code>SET INSERT_ID&lt;/code> 设置主键：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SET&lt;/span> &lt;span style="color:#000">INSERT_ID&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">语句&lt;/span>&lt;span style="color:#000">B&lt;/span>&lt;span style="color:#000">；&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SET&lt;/span> &lt;span style="color:#000">INSERT_ID&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">语句&lt;/span>&lt;span style="color:#000">A&lt;/span>&lt;span style="color:#000">；&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="自增id上限">自增id上限&lt;/h2>
&lt;p>无符号整型 (unsigned int) 是 4 个字节，上限就是 2^32-1。&lt;/p>
&lt;h3 id="表定义自增值id">表定义自增值id&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">te&lt;/span>(&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#000">unsigned&lt;/span> &lt;span style="color:#000">auto_increment&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>) &lt;span style="color:#000">auto_increment&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">4294967295&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">te&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">//&lt;/span>&lt;span style="color:#000">成功插入一行&lt;/span> &lt;span style="color:#1c01ce">4294967295&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">show&lt;/span> &lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/* CREATE TABLE `t` (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">  PRIMARY KEY (`id`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">) ENGINE=InnoDB AUTO_INCREMENT=4294967295;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">//&lt;/span>&lt;span style="color:#000">Duplicate&lt;/span> &lt;span style="color:#000">entry&lt;/span> &lt;span style="color:#c41a16">&amp;#39;4294967295&amp;#39;&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#a90d91">key&lt;/span> &lt;span style="color:#c41a16">&amp;#39;PRIMARY&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>2^32-1（4294967295）不是一个特别大的数，对于一个频繁插入删除数据的表来说，是可能会被用完的。因此在建表时需要考察表是否有可能达到这个上限，如果有可能，就应该创建成 8 个字节的 bigint unsigned。&lt;/p>
&lt;h3 id="innodb自增row-id">InnoDB自增row_id&lt;/h3>
&lt;p>如果创建的 InnoDB 表没有指定主键，那么 InnoDB 会给你创建一个不可见的，长度为 6 个字节的 row_id。InnoDB 维护了一个全局的 dict_sys.row_id 值，所有无主键的 InnoDB 表，每插入一行数据，都将当前的 dict_sys.row_id 值作为要插入数据的 row_id，然后把 dict_sys.row_id 的值加 1。&lt;/p>
&lt;p>实际上，在代码实现时 row_id 是一个长度为 8 字节的无符号长整型 (bigint unsigned)。但是，InnoDB 在设计时，给 row_id 留的只是 6 个字节的长度，这样写到数据表中时只放了最后 6 个字节，所以 row_id 能写到数据表中的值，就有两个特征：&lt;/p>
&lt;p>1、row_id 写入表中的值范围，是从 0 到 2^48-1；&lt;/p>
&lt;p>2、当 dict_sys.row_id=2^48时，如果再有插入数据的行为要来申请 row_id，拿到以后再取最后 6 个字节的话就是 0。&lt;/p>
&lt;p>验证（使用 gdb 修改系统的自增 row_id 来实现）：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; create table tem&lt;span style="color:#000">(&lt;/span>a int&lt;span style="color:#000">)&lt;/span>&lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>innodb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdb -p &amp;lt;pid of mysqld&amp;gt; -ex &lt;span style="color:#c41a16">&amp;#39;p dict_sys.row_id=1&amp;#39;&lt;/span> --batch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; insert into tem values&lt;span style="color:#000">(&lt;/span>1&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdb -p &amp;lt;pid of mysqld&amp;gt; -ex &lt;span style="color:#c41a16">&amp;#39;p dict_sys.row_id=281474976710656&amp;#39;&lt;/span> --batch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; insert into tem values&lt;span style="color:#000">(&lt;/span>2&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; insert into tem values&lt;span style="color:#000">(&lt;/span>3&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from tem;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="../imgs/table_20220409_9.png" alt="table_20220409_9.png">&lt;/p>
&lt;p>图中可以看到，a=1 的数据被覆盖了。&lt;/p>
&lt;p>从这个角度看，我们还是应该在 InnoDB 表中主动创建自增主键。因为，表自增 id 到达上限后，再插入数据时报主键冲突错误，是更能被接受的。&lt;/p>
&lt;p>毕竟覆盖数据，就意味着数据丢失，影响的是数据可靠性；报主键冲突，是插入失败，影响的是可用性。而一般情况下，可靠性优先于可用性。&lt;/p>
&lt;h3 id="xid">Xid&lt;/h3>
&lt;p>redo log 和 binlog 相配合的时候，提到了它们有一个共同的字段叫作 Xid。它在 MySQL 中是用来对应事务的。&lt;/p>
&lt;p>MySQL 内部维护了一个全局变量 global_query_id，每次执行语句的时候将它赋值给 Query_id，然后给这个变量加 1。如果当前语句是这个事务执行的第一条语句，那么 MySQL 还会同时把 Query_id 赋值给这个事务的 Xid。&lt;/p>
&lt;p>而 global_query_id 是一个纯内存变量，重启之后就清零了。所以在同一个数据库实例中，不同事务的 Xid 也是有可能相同的。&lt;/p>
&lt;p>但是 MySQL 重启之后会重新生成新的 binlog 文件，这就保证了，同一个 binlog 文件里，Xid 一定是惟一的。&lt;/p>
&lt;p>如果 global_query_id 达到上限后，就会继续从 0 开始计数。从理论上讲，还是就会出现同一个 binlog 里面出现相同 Xid 的场景。2^64-1 太大了，这个可能性仅存在理论上。&lt;/p>
&lt;h3 id="innodb-trx-id">innodb trx_id&lt;/h3>
&lt;p>Xid 是由 server 层维护的。InnoDB 内部使用 Xid 是为了能够在 InnoDB 事务和 server 之间做关联。trx_id 就是MVCC的版本号，是InnoDB内部自己维护的，每次事务开启时都会向InnoDB事务系统申请，是严格顺序递增的。&lt;/p>
&lt;p>InnoDB 内部维护了一个 max_trx_id 全局变量，每次需要申请一个新的 trx_id 时，就获得 max_trx_id 的当前值，然后并将 max_trx_id 加 1。&lt;/p>
&lt;p>InnoDB 数据可见性的核心思想是：每一行数据都记录了更新它的 trx_id，当一个事务读到一行数据的时候，判断这个数据是否可见的方法，就是通过事务的一致性视图与这行数据的 trx_id 做对比。&lt;/p>
&lt;p>对于正在执行的事务，你可以从 information_schema.innodb_trx 表中看到事务的 trx_id。如：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">use&lt;/span> &lt;span style="color:#000">information_schema&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">trx_id&lt;/span>, &lt;span style="color:#000">trx_mysql_thread_id&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">information_schema&lt;/span>.&lt;span style="color:#000">innodb_trx&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>trx_id 实验的时候发现不止加 1，原因如下：&lt;/p>
&lt;p>1、update 和 delete 语句除了事务本身，还涉及到标记删除旧数据，也就是要把数据放到 purge 队列里等待后续物理删除，这个操作也会把 max_trx_id+1， 因此在一个事务中至少加 2；&lt;/p>
&lt;p>2、InnoDB 的后台操作，比如表的索引信息统计这类操作，也是会启动内部事务的，因此你可能看到，trx_id 值并不是按照加 1 递增的。&lt;/p>
&lt;p>对于只读事务（select 后面加上 for update 不是只读事务），InnoDB 并不会分配 trx_id。会话没有执行到更新语句也是只读事务，等执行到更新语句才不是只读事务，才开始分配 trx_id。&lt;/p>
&lt;p>只读事务分配的 trx_id 仅用作展示，值看起来很大。这个数字是每次查询的时候由系统临时计算出来的。算法是：把当前事务的 trx 变量的指针地址转成整数，再加上 2^48。可以保证如下：&lt;/p>
&lt;p>1、为同一个只读事务在执行期间，它的指针地址是不会变的，所以不论是在 innodb_trx 还是在 innodb_locks 表里，同一个只读事务查出来的 trx_id 就会是一样的。&lt;/p>
&lt;p>2、如果有并行的多个只读事务，每个事务的 trx 变量的指针地址肯定不同。这样，不同的并发只读事务，查出来的 trx_id 就是不同的。&lt;/p>
&lt;p>在显示值里面加上 2^48，目的是要保证只读事务显示的 trx_id 值比较大，正常情况下就会区别于读写事务的 id。但是，trx_id 跟 row_id 的逻辑类似，定义长度也是 8 个字节。因此，在理论上还是可能出现一个读写事务与一个只读事务显示的 trx_id 相同的情况。不过这个概率很低，并且也没有什么实质危害，可以忽略。&lt;/p>
&lt;p>只读事务不分配 trx_id 的好处：&lt;/p>
&lt;p>1、可以减小事务视图里面活跃事务数组的大小。因为当前正在运行的只读事务，是不影响数据的可见性判断的。所以在创建事务的一致性视图时，InnoDB 就只需要拷贝读写事务的 trx_id。&lt;/p>
&lt;p>2、可以减少 trx_id 的申请次数。在 InnoDB 里，即使只是执行一个普通的 select 语句，在执行过程中，也是要对应一个只读事务的。所以只读事务优化后，普通的查询语句不需要申请 trx_id，就大大减少了并发事务申请 trx_id 的锁冲突。&lt;/p>
&lt;p>max_trx_id 会持久化存储，重启也不会重置为 0，理论上只要一个 MySQL 服务跑得足够久，就可能出现 max_trx_id 达到 248-1 的上限，然后从 0 开始的情况。当达到这个状态后，MySQL 就会持续出现一个脏读的 bug。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; create table tem&lt;span style="color:#000">(&lt;/span>id int primary key, c int&lt;span style="color:#000">)&lt;/span>&lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>innodb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; insert into tem values&lt;span style="color:#000">(&lt;/span>1,1&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdb -p &amp;lt;pid of mysqld&amp;gt; -ex &lt;span style="color:#c41a16">&amp;#39;p trx_sys-&amp;gt;max_trx_id=281474976710655&amp;#39;&lt;/span> --batch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">T1&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>select * from tem;&lt;br>(1,1)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update tem set c=2 where id=1;&lt;br>begin;&lt;br>update tem set c=3 where id=1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">select * from tem;&lt;br>(1,3) // 脏读&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>由于已经把系统的 max_trx_id 设置成了 2^48-1，所以在 Session A 启动的事务 TA 的低水位就是 2^48-1。&lt;/p>
&lt;p>T2 时刻，Session B 执行第一条 update 语句的事务 id 就是 2^48-1，而第二条 update 语句的事务 id 就是 0，即 trx_id 就是 0。&lt;/p>
&lt;p>T3 时刻，Session A 执行 select 语句时，判断可见性发现 c=3 的 trx_id 小于事务 TA 的低水位，因此认为这个数据可见。&lt;/p>
&lt;p>这就导致了脏读。且MySQL 重启时 max_trx_id 也不会清 0，也就是说重启 MySQL，这个 bug 仍然存在。这个 bug 是只要 MySQL 实例服务时间够长，就会必然出现的。&lt;/p>
&lt;h3 id="thread-id">thread_id&lt;/h3>
&lt;p>thread_id 就是系统保存了一个全局变量 thread_id_counter，每新建一个连接就将 thread_id_counter 赋值给这个新连接的线程变量。&lt;/p>
&lt;p>show processlist 里的第一列就是 thread_id。&lt;/p>
&lt;p>thread_id_counter 定义的大小是 4 个字节，达到 2^32-1 后就会重置为 0，然后继续增加。不会在 show processlist 里看到两个相同的 thread_id。因为 MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 的时候，逻辑代码会判断：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">new_id&lt;/span>&lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">thread_id_counter&lt;/span>&lt;span style="color:#000">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#a90d91">while&lt;/span> (&lt;span style="color:#000">!&lt;/span>&lt;span style="color:#000">thread_ids&lt;/span>.&lt;span style="color:#000">insert_unique&lt;/span>(&lt;span style="color:#000">new_id&lt;/span>).&lt;span style="color:#000">second&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="自增id上限小结">自增id上限小结&lt;/h3>
&lt;p>每种自增 id 有各自的应用场景，在达到上限后的表现也不同：&lt;/p>
&lt;p>1、表的自增 id 达到上限后，再申请时它的值就不会改变，进而导致继续插入数据时报主键冲突的错误。&lt;/p>
&lt;p>2、row_id 达到上限后，则会归 0 再重新递增，如果出现相同的 row_id，后写的数据会覆盖之前的数据。&lt;/p>
&lt;p>3、Xid 只需要不在同一个 binlog 文件中出现重复值即可。虽然理论上会出现重复值，但是概率极小，可以忽略不计。&lt;/p>
&lt;p>4、InnoDB 的 max_trx_id 递增值每次 MySQL 重启都会被保存起来，上文中提到的脏读的例子就是一个必现的 bug，好在还有很充裕的时间去解决。&lt;/p>
&lt;p>5、thread_id 是使用中最常见的，而且也是处理得最好的一个自增 id 逻辑。&lt;/p>
&lt;h1 id="分区表">分区表&lt;/h1>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t51&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">ftime&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#000">datetime&lt;/span> &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">ftime&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span> &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#000">CHARSET&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">latin1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PARTITION&lt;/span> &lt;span style="color:#a90d91">BY&lt;/span> &lt;span style="color:#000">RANGE&lt;/span> (&lt;span style="color:#a90d91">YEAR&lt;/span>(&lt;span style="color:#000">ftime&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#000">PARTITION&lt;/span> &lt;span style="color:#000">p_2017&lt;/span> &lt;span style="color:#a90d91">VALUES&lt;/span> &lt;span style="color:#a90d91">LESS&lt;/span> &lt;span style="color:#a90d91">THAN&lt;/span> (&lt;span style="color:#1c01ce">2017&lt;/span>) &lt;span style="color:#000">ENGINE&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">InnoDB&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PARTITION&lt;/span> &lt;span style="color:#000">p_2018&lt;/span> &lt;span style="color:#a90d91">VALUES&lt;/span> &lt;span style="color:#a90d91">LESS&lt;/span> &lt;span style="color:#a90d91">THAN&lt;/span> (&lt;span style="color:#1c01ce">2018&lt;/span>) &lt;span style="color:#000">ENGINE&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">InnoDB&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PARTITION&lt;/span> &lt;span style="color:#000">p_2019&lt;/span> &lt;span style="color:#a90d91">VALUES&lt;/span> &lt;span style="color:#a90d91">LESS&lt;/span> &lt;span style="color:#a90d91">THAN&lt;/span> (&lt;span style="color:#1c01ce">2019&lt;/span>) &lt;span style="color:#000">ENGINE&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">InnoDB&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PARTITION&lt;/span> &lt;span style="color:#000">p_others&lt;/span> &lt;span style="color:#a90d91">VALUES&lt;/span> &lt;span style="color:#a90d91">LESS&lt;/span> &lt;span style="color:#a90d91">THAN&lt;/span> &lt;span style="color:#a90d91">MAXVALUE&lt;/span> &lt;span style="color:#000">ENGINE&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">InnoDB&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t51&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#c41a16">&amp;#39;2017-4-1&amp;#39;&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>),(&lt;span style="color:#c41a16">&amp;#39;2018-4-1&amp;#39;&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这个表包含了一个.frm 文件和 4 个.ibd 文件，每个分区对应一个.ibd 文件。即：
1、对于引擎层来说，这是 4 个表；&lt;/p>
&lt;p>2、对于 Server 层来说，这是 1 个表。&lt;/p>
&lt;p>（略，待补充）&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="更新相同数据">更新相同数据&lt;/h2>
&lt;p>表：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t3&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span> &lt;span style="color:#000">auto_increment&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t3&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>); &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">只有一条数据&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>执行更新语句
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; update t3 &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span> where &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Query OK, &lt;span style="color:#1c01ce">0&lt;/span> rows affected &lt;span style="color:#000">(&lt;/span>0.03 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rows matched: 1  Changed: 0  Warnings: &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>可能发生以下三种情况：
1、更新都是先读后写，MySQL 读出数据发现值与原来相同，不更新直接返回；&lt;/p>
&lt;p>2、MySQL 调用了 InnoDB 引擎提供的修改接口，但是引擎发现值与原来相同，不更新直接返回；&lt;/p>
&lt;p>3、InnoDB 执行了修改接口，该解锁的加锁，该更新的更新。&lt;/p>
&lt;p>问题：实际情况是哪种？如何构造实验验证？&lt;/p>
&lt;p>&lt;strong>验证情况 1&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>update t3 set a=2 where id=1;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t3 set a=2 where id=1;&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session B 的 update 语句被 blocked 了，加锁这个动作是 InnoDB 才能做的，所以排除情况 1。&lt;/p>
&lt;p>验证情况 2&lt;/p>
&lt;p>使用可见性实验确认&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t3 where id=1;&lt;br># 返回 (1,2)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t3 set a=3 where id=1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">update t3 set a=3 where id=1;&lt;br>Query OK, 0 rows affected (0.00 sec)&lt;br>Rows matched: 1  Changed: 0  Warnings: 0&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">select * from t3 where id=1;&lt;br># 返回 (1,3)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>（注意：这里 set a=3 不会触发“当前读”）&lt;/p>
&lt;p>session A 的第二个 select 语句是一致性读（快照读)，它是不能看见 session B 的更新的。&lt;/p>
&lt;p>现在它返回的是 (1,3)，表示它看见了某个新的版本，这个版本只能是 session A 自己的 update 语句做更新的时候生成。&lt;/p>
&lt;p>所以应该是情况 3。&lt;/p>
&lt;p>为什么 MySQL 更新前不判断值是否相同？&lt;/p>
&lt;p>其实 MySQL 确认了。只是这个语句中，MySQL 认为读出来的值只有 id=1 是确定的，而要写的是 a=3，只从这两个信息看不出来“不需要修改”。&lt;/p>
&lt;p>验证：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t3 where id=1;&lt;br># 返回 (1,2)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t3 set a=3 where id=1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">update t3 set a=3 where id=1 and a=3;&lt;br>Query OK, 0 rows affected (0.01 sec)&lt;br>Rows matched: 1  Changed: 0  Warnings: 0&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">select * from t3 where id=1;&lt;br># 返回 (1,2)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意：上面的验证结果都是在 binlog_format=statement 格式下进行的。&lt;/p>
&lt;p>如果是 binlog_format=row 并且 binlog_row_image=FULL 的时候，由于 MySQL 需要在 binlog 里面记录所有的字段，所以在读数据的时候就会把所有数据都读出来了。&lt;/p>
&lt;p>根据上面说的规则，“既然读了数据，就会判断”， 因此在这时候，select * from t where id=1，结果就是“返回 (1,2)”。&lt;/p>
&lt;p>同理，如果是 binlog_row_image=NOBLOB, 会读出除 blob 外的所有字段，在我们这个例子里，结果还是“返回 (1,2)”。&lt;/p>
&lt;p>MySQL 5.6 版本引入的，对应的代码读字段逻辑：&lt;/p>
&lt;p>&lt;img src="../imgs/table_20220409_10.png" alt="table_20220409_10.png">&lt;/p>
&lt;p>如果表中有 timestamp 字段而且设置了自动更新的话，那么更新“别的字段”的时候，MySQL 会读入所有涉及的字段，这样通过判断，就会发现不需要修改。&lt;/p>
&lt;h2 id="in使用索引">in使用索引&lt;/h2>
&lt;p>例：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> (&lt;span style="color:#c41a16">&amp;#39;AA&amp;#39;&lt;/span>,&lt;span style="color:#c41a16">&amp;#34;BB&amp;#34;&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">n&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> (&lt;span style="color:#c41a16">&amp;#39;AA&amp;#39;&lt;/span>,&lt;span style="color:#c41a16">&amp;#34;BB&amp;#34;&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#a90d91">start&lt;/span>,&lt;span style="color:#000">page&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>方法1：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;AA&amp;#34;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">n&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;BB&amp;#34;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">n&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;AA&amp;#34;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> (&lt;span style="color:#a90d91">start&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#000">page&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;BB&amp;#34;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> (&lt;span style="color:#a90d91">start&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#000">page&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>方法2：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">id&lt;/span>,&lt;span style="color:#000">a&lt;/span>,... &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;AA&amp;#34;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> (&lt;span style="color:#a90d91">start&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#000">page&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">id&lt;/span>,&lt;span style="color:#000">a&lt;/span>,... &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">field1&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;BB&amp;#34;&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">field2&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> (&lt;span style="color:#a90d91">start&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#000">page&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h2 id="rand排序">rand排序&lt;/h2>
&lt;p>表结构：&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">words&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">word&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">64&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delimiter&lt;/span> ;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">procedure&lt;/span> &lt;span style="color:#000">idata_word&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">declare&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">while&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#1c01ce">10000&lt;/span> &lt;span style="color:#a90d91">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">words&lt;/span>(&lt;span style="color:#000">word&lt;/span>) &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#000">concat&lt;/span>(&lt;span style="color:#a90d91">char&lt;/span>(&lt;span style="color:#1c01ce">97&lt;/span>&lt;span style="color:#000">+&lt;/span>(&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">div&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span>)), &lt;span style="color:#a90d91">char&lt;/span>(&lt;span style="color:#1c01ce">97&lt;/span>&lt;span style="color:#000">+&lt;/span>(&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">%&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span> &lt;span style="color:#000">div&lt;/span> &lt;span style="color:#1c01ce">100&lt;/span>)), &lt;span style="color:#a90d91">char&lt;/span>(&lt;span style="color:#1c01ce">97&lt;/span>&lt;span style="color:#000">+&lt;/span>(&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">%&lt;/span> &lt;span style="color:#1c01ce">100&lt;/span> &lt;span style="color:#000">div&lt;/span> &lt;span style="color:#1c01ce">10&lt;/span>)), &lt;span style="color:#a90d91">char&lt;/span>(&lt;span style="color:#1c01ce">97&lt;/span>&lt;span style="color:#000">+&lt;/span>(&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">%&lt;/span> &lt;span style="color:#1c01ce">10&lt;/span>))));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">end&lt;/span> &lt;span style="color:#000">while&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">end&lt;/span>;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delimiter&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">call&lt;/span> &lt;span style="color:#000">idata_word&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>随机读取 3 个单词：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">word&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">words&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">rand&lt;/span>() &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">3&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>分析：&lt;/p>
&lt;p>explain 查看 Extra 字段显示 Using temporary，表示需要使用临时表；Using filesort 表示需要执行排序操作。&lt;/p>
&lt;p>对于 InnoDB 表来说，执行全字段排序会减少磁盘访问，会被优先选择。&lt;/p>
&lt;p>但是这里是 临时内存表，回表过程只是简单根据数据行的位置直接访问内存得到数据，不会增加访问磁盘次数。所以优化器会优先考虑用于排序的行越小越好，因此这时会选择 rowid 排序。&lt;/p>
&lt;p>上述随机读取单词 SQL 执行流程：&lt;/p>
&lt;p>1、创建一个临时表。临时表使用的是 memory 引擎，表里有主键 id 和 double 类型的 rand。（表没有索引）&lt;/p>
&lt;p>2、按主键顺序取出所有的 word 字段，对于每一个 word 值，调用 rand() 生成一个大于 0 小于 1 的随机小数，并把随机小数和 word 分别存入临时表的字段中，到此扫描行数是 10000。&lt;/p>
&lt;p>3、在内存临时表中，准备按照 rand() 字段排序。&lt;/p>
&lt;p>4、初始化 sort_buffer。一个主键 id 另外一个 rand 字段。&lt;/p>
&lt;p>5、从内存临时表中一行一行取出 rand 值和位置信息（InnoDB 表是主键 id，MEMORY 引擎不是索引组织表，可以理解 rowid 就是数组的下标），分别存入 sort_buffer 中的两个字段里。这个过程要对内存临时表做全表扫描，此时扫描行数增加了 10000，变成了 20000。&lt;/p>
&lt;p>6、在 sort_buffer 中根据 rand 值进行排序。注意：这里没有涉及到表操作，不会增加扫描行数。&lt;/p>
&lt;p>7、排序完成后，取出前三个结果的位置信息，依次到内存临时表中取出 word 值返回给客户端。这个过程中，访问了表的三行数据，总扫描行数变成了 20003。&lt;/p>
&lt;p>可以通过慢日志（slow log）验证上述分析得到的扫描行数。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span># Query_time: 0.900376 Lock_time: 0.000347
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rows_sent: 3 Rows_examined: 20003SET timestamp=1541402277;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>select word from words order by rand() limit 3;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Rows_examined：20003 就表示这个语句执行过程中扫描了 20003 行。&lt;/p>
&lt;h2 id="随机排序">随机排序&lt;/h2>
&lt;p>同上，如果只随机选择 1 个 word 值。&lt;/p>
&lt;h3 id="随机算法1">随机算法1&lt;/h3>
&lt;p>1、取得这个表的主键 id 的最大值 M 和最小值 N；&lt;/p>
&lt;p>2、用随机函数生成一个最大值到最小值之间的数 X = (M-N)*rand() + N；&lt;/p>
&lt;p>3、取不小于 X 的第一个 ID 的行。&lt;/p>
&lt;p>执行语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">max&lt;/span>(&lt;span style="color:#000">id&lt;/span>),&lt;span style="color:#a90d91">min&lt;/span>(&lt;span style="color:#000">id&lt;/span>) &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">M&lt;/span>,&lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">N&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">X&lt;/span>&lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">floor&lt;/span>((&lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">M&lt;/span>&lt;span style="color:#000">-@&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>)&lt;span style="color:#000">*&lt;/span>&lt;span style="color:#000">rand&lt;/span>() &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">N&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">X&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>该方法效率很高，取 max(id) 和 min(id) 都是不需要扫描索引的，而第三步的 select 也可以用索引快速定位，可以认为就只扫描了 3 行。
但它不是真正的随机，因为 id 可能不是连续的，选择不同行的概率不一样。&lt;/p>
&lt;h3 id="随机算法2">随机算法2&lt;/h3>
&lt;p>1、取得整个表的行数，并记为 C。&lt;/p>
&lt;p>2、取得 Y = floor(C * rand())。 floor 函数在这里的作用，就是取整数部分。&lt;/p>
&lt;p>3、再用 limit Y,1 取得一行。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">C&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">floor&lt;/span>(&lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">C&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">rand&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">sql&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">concat&lt;/span>(&lt;span style="color:#c41a16">&amp;#34;select * from t limit &amp;#34;&lt;/span>, &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y&lt;/span>, &lt;span style="color:#c41a16">&amp;#34;,1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">prepare&lt;/span> &lt;span style="color:#000">stmt&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">sql&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">execute&lt;/span> &lt;span style="color:#000">stmt&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">DEALLOCATE&lt;/span> &lt;span style="color:#a90d91">prepare&lt;/span> &lt;span style="color:#000">stmt&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>（limit 后面的参数不能直接跟变量，代码中使用了 prepare+execute 的方法）
总结，这种随机算法比 rand 排序效率要高很多。&lt;/p>
&lt;p>进阶：如果需要取 3 个值&lt;/p>
&lt;h3 id="随机算法3">随机算法3&lt;/h3>
&lt;p>1、取得整个表的行数，记为 C；&lt;/p>
&lt;p>2、根据相同的随机方法得到 Y1、Y2、Y3；&lt;/p>
&lt;p>3、再执行三个 limit Y, 1 语句得到三行数据。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">C&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y1&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">floor&lt;/span>(&lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">C&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">rand&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y2&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">floor&lt;/span>(&lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">C&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">rand&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y3&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">floor&lt;/span>(&lt;span style="color:#000">@&lt;/span>&lt;span style="color:#a90d91">C&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#000">rand&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y1&lt;/span>&lt;span style="color:#000">，&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>&lt;span style="color:#000">；&lt;/span> &lt;span style="color:#000">//&lt;/span>&lt;span style="color:#000">在应用代码里面取&lt;/span>&lt;span style="color:#000">Y1&lt;/span>&lt;span style="color:#000">、&lt;/span>&lt;span style="color:#000">Y2&lt;/span>&lt;span style="color:#000">、&lt;/span>&lt;span style="color:#000">Y3值&lt;/span>&lt;span style="color:#000">，拼出&lt;/span>&lt;span style="color:#000">SQL后执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y2&lt;/span>&lt;span style="color:#000">，&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>&lt;span style="color:#000">；&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">@&lt;/span>&lt;span style="color:#000">Y3&lt;/span>&lt;span style="color:#000">，&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>&lt;span style="color:#000">；&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="随机算法4">随机算法4&lt;/h3>
&lt;p>随机算法 3 的总扫描行数是 C+(Y1+1)+(Y2+1)+(Y3+1)，对其进一步优化，减少扫描行数。&lt;/p>
&lt;p>取 Y1、Y2 和 Y3 里面最大的一个数，记为 M，最小的一个数记为 N，然后执行下面这条 SQL 语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#000">N&lt;/span>, &lt;span style="color:#000">M&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>再加上取整个表总行数的 C 行，扫描行数总共只需要 C+M+1 行。&lt;/p>
&lt;h2 id="sql长时间不返回">SQL长时间不返回&lt;/h2>
&lt;p>表结构与数据：&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t4&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delimiter&lt;/span> ;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">procedure&lt;/span> &lt;span style="color:#000">idata_4&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">declare&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">while&lt;/span>(&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">&amp;lt;=&lt;/span>&lt;span style="color:#1c01ce">100000&lt;/span>) &lt;span style="color:#a90d91">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t4&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#000">i&lt;/span>,&lt;span style="color:#000">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">end&lt;/span> &lt;span style="color:#000">while&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">end&lt;/span>;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delimiter&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">call&lt;/span> &lt;span style="color:#000">idata_4&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;h3 id="等mdl锁">等MDL锁&lt;/h3>
&lt;p>查询语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t4&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>一般这种情况，大概率是表 t4 被锁住了。接下来分析原因的时候，一般都是首先执行一下 show processlist 命令，查看当前语句处于什么状态。
show processlist 可以看到 Waiting for table metadata lock，这个状态表示，有一个线程正在表 t4 上请求或者持有 MDL 写锁，把 select 语句堵住了。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show processlist;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------------+--------------------+---------+------+---------------------------------+-----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Id | User | Host            | db                 | Command | Time | State                           | Info                        |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------------+--------------------+---------+------+---------------------------------+-----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#1c01ce">18&lt;/span> | root | localhost:52900 | &lt;span style="color:#a90d91">test&lt;/span>               | Sleep   |   &lt;span style="color:#1c01ce">52&lt;/span> |                                 | NULL                        |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#1c01ce">20&lt;/span> | root | localhost       | &lt;span style="color:#a90d91">test&lt;/span>               | Query   |    &lt;span style="color:#1c01ce">5&lt;/span> | Waiting &lt;span style="color:#a90d91">for&lt;/span> table metadata lock | &lt;span style="color:#a90d91">select&lt;/span> * from t4 where &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &lt;span style="color:#1c01ce">21&lt;/span> | root | localhost       | NULL               | Query   |    &lt;span style="color:#1c01ce">0&lt;/span> | starting                        | show processlist            |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+-----------------+--------------------+---------+------+---------------------------------+-----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">3&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>MySQL 5.7 复现：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">lock table t4 write;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">select * from t4 where id=1;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>由于在 show processlist 的结果里面，session A 的 Command 列是“Sleep”，导致查找不方便。不过有了 performance_schema 和 sys 系统库之后比较方便。（MySQL 启动时需要设置 performance_schema=on，相比于设置为 off 会有 10% 左右的性能损失)&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">blocking_pid&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">sys&lt;/span>.&lt;span style="color:#000">schema_table_lock_waits&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="等flush">等flush&lt;/h3>
&lt;p>查询语句：&lt;/p>
&lt;p>（这里的 id 是上面 show processlist 结果的 ID）&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">information_schema&lt;/span>.&lt;span style="color:#000">processlist&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>通过 State 字段如“Waiting for table flush”，表示有一个线程正要对表 t 做 flush 操作。MySQL 里面对表做 flush 操作的用法，一般有以下两个：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">flush&lt;/span> &lt;span style="color:#000">tables&lt;/span> &lt;span style="color:#000">t4&lt;/span> &lt;span style="color:#a90d91">with&lt;/span> &lt;span style="color:#a90d91">read&lt;/span> &lt;span style="color:#a90d91">lock&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">表&lt;/span> &lt;span style="color:#000">t4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">flush&lt;/span> &lt;span style="color:#000">tables&lt;/span> &lt;span style="color:#a90d91">with&lt;/span> &lt;span style="color:#a90d91">read&lt;/span> &lt;span style="color:#a90d91">lock&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">所有的表ß&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>出现 Waiting for table flush 状态的可能情况是：有一个 flush tables 命令被别的语句堵住了，然后它又堵住了我们的 select 语句。
复现：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">select sleep(1) from t4;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">flush tables t4;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">select * from t4 where id=1;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>session A 中，每行都调用一次 sleep(1)，这样语句默认要执行 10 万秒，在这期间表 t4 一直是被 session A“打开”着。然后，session B 的 flush tables t4 命令再要去关闭表 t4，就需要等 session A 的查询结束。这样，session C 要再次查询的话，就会被 flush 命令堵住了。&lt;/p>
&lt;h3 id="等行锁">等行锁&lt;/h3>
&lt;p>共享锁 (lock in share mode)、排他锁 (for update)&lt;/p>
&lt;p>查询语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t4&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">lock&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">share&lt;/span> &lt;span style="color:#a90d91">mode&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>由于访问 id=1 记录时要加读锁，如果此时已经有一个事务在这行记录上持有一个写锁， select 语句就会被堵住。
排查方法：&lt;/p>
&lt;p>如果是 MySQL 5.7 版本，可以通过 sys.innodb_lock_waits 表查到。&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">sys&lt;/span>.&lt;span style="color:#000">innodb_lock_waits&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">locked_table&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;`test`.`t4`&amp;#39;&lt;/span>&lt;span style="color:#000">\&lt;/span>&lt;span style="color:#a90d91">G&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">***************************&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>. &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#000">***************************&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &lt;span style="color:#000">wait_started&lt;/span>: &lt;span style="color:#1c01ce">2022&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">04&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">01&lt;/span> &lt;span style="color:#1c01ce">21&lt;/span>:&lt;span style="color:#1c01ce">02&lt;/span>:&lt;span style="color:#1c01ce">03&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                    &lt;span style="color:#000">wait_age&lt;/span>: &lt;span style="color:#1c01ce">00&lt;/span>:&lt;span style="color:#1c01ce">00&lt;/span>:&lt;span style="color:#1c01ce">04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>               &lt;span style="color:#000">wait_age_secs&lt;/span>: &lt;span style="color:#1c01ce">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &lt;span style="color:#000">locked_table&lt;/span>: &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#000">`&lt;/span>.&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t4&lt;/span>&lt;span style="color:#000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &lt;span style="color:#000">locked_index&lt;/span>: &lt;span style="color:#a90d91">PRIMARY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                 &lt;span style="color:#000">locked_type&lt;/span>: &lt;span style="color:#000">RECORD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>              &lt;span style="color:#000">waiting_trx_id&lt;/span>: &lt;span style="color:#1c01ce">281479574768312&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>         &lt;span style="color:#000">waiting_trx_started&lt;/span>: &lt;span style="color:#1c01ce">2022&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">04&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">01&lt;/span> &lt;span style="color:#1c01ce">21&lt;/span>:&lt;span style="color:#1c01ce">02&lt;/span>:&lt;span style="color:#1c01ce">03&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>             &lt;span style="color:#000">waiting_trx_age&lt;/span>: &lt;span style="color:#1c01ce">00&lt;/span>:&lt;span style="color:#1c01ce">00&lt;/span>:&lt;span style="color:#1c01ce">04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>     &lt;span style="color:#000">waiting_trx_rows_locked&lt;/span>: &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>   &lt;span style="color:#000">waiting_trx_rows_modified&lt;/span>: &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                 &lt;span style="color:#000">waiting_pid&lt;/span>: &lt;span style="color:#1c01ce">22&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>               &lt;span style="color:#000">waiting_query&lt;/span>: &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t4&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">lock&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">share&lt;/span> &lt;span style="color:#a90d91">mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>             &lt;span style="color:#000">waiting_lock_id&lt;/span>: &lt;span style="color:#1c01ce">281479574768312&lt;/span>:&lt;span style="color:#1c01ce">65&lt;/span>:&lt;span style="color:#1c01ce">4&lt;/span>:&lt;span style="color:#1c01ce">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>           &lt;span style="color:#000">waiting_lock_mode&lt;/span>: &lt;span style="color:#000">S&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>             &lt;span style="color:#000">blocking_trx_id&lt;/span>: &lt;span style="color:#1c01ce">408821&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &lt;span style="color:#000">blocking_pid&lt;/span>: &lt;span style="color:#1c01ce">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>              &lt;span style="color:#000">blocking_query&lt;/span>: &lt;span style="color:#a90d91">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#000">blocking_lock_id&lt;/span>: &lt;span style="color:#1c01ce">408821&lt;/span>:&lt;span style="color:#1c01ce">65&lt;/span>:&lt;span style="color:#1c01ce">4&lt;/span>:&lt;span style="color:#1c01ce">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>          &lt;span style="color:#000">blocking_lock_mode&lt;/span>: &lt;span style="color:#000">X&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#000">blocking_trx_started&lt;/span>: &lt;span style="color:#1c01ce">2022&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">04&lt;/span>&lt;span style="color:#000">-&lt;/span>&lt;span style="color:#1c01ce">01&lt;/span> &lt;span style="color:#1c01ce">20&lt;/span>:&lt;span style="color:#1c01ce">55&lt;/span>:&lt;span style="color:#1c01ce">56&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#000">blocking_trx_age&lt;/span>: &lt;span style="color:#1c01ce">00&lt;/span>:&lt;span style="color:#1c01ce">06&lt;/span>:&lt;span style="color:#1c01ce">11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#000">blocking_trx_rows_locked&lt;/span>: &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">blocking_trx_rows_modified&lt;/span>: &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>     &lt;span style="color:#000">sql_kill_blocking_query&lt;/span>: &lt;span style="color:#000">KILL&lt;/span> &lt;span style="color:#000">QUERY&lt;/span> &lt;span style="color:#1c01ce">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sql_kill_blocking_connection&lt;/span>: &lt;span style="color:#000">KILL&lt;/span> &lt;span style="color:#1c01ce">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#000">warnings&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">05&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>注意：如果上面结果是 Empty set, 3 warnings (0.00 sec)，那么可能是上面查询结果超时了被结束掉了。
可以看到信息很全，20 号线程是造成堵塞的罪魁祸首，并给出了方法就是 KILL QUERY 4 或 KILL 4。“KILL QUERY 4”表示停止 4 号线程当前正在执行的语句，但该方法是没有用的。因为占有行锁的是 update 语句，这个语句已经是之前执行完成了的，现在执行 KILL QUERY，无法让这个事务去掉 id=1 上的行锁。&lt;/p>
&lt;p>实际 KILL 4 才有效，即直接断开这个连接。这里隐含的逻辑是：连接被断开的时候，会自动回滚连接里面正在执行的线程，也就释放了 id=1 上的行锁。&lt;/p>
&lt;h2 id="sql查询慢">SQL查询慢&lt;/h2>
&lt;p>复用上面的表 t4&lt;/p>
&lt;h3 id="没有索引查询慢">没有索引查询慢&lt;/h3>
&lt;p>查询语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t4&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">50000&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>由于字段 c 上没有索引，这个语句只能走 id 主键顺序扫描，因此需要扫描 5 万行。
可以通过查询慢日志验证&lt;/p>
&lt;p>（注意，为了把所有语句记录到 slow log 里，先执行了 set long_query_time=0，将慢查询日志的时间阈值设置为 0。）&lt;/p>
&lt;h3 id="不加读锁更慢">不加读锁更慢&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">start transaction with consistent snapshot;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t4 set c=c+1 where id=1; &lt;br>//执行一万次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">select * from t4 where id=1;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">select * from t4 where id=1 lock in share mode;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>带 lock in share mode 的 SQL 语句是当前读，会直接读到 1000001 这个结果，所以速度很快；&lt;/p>
&lt;p>而 select * from t where id=1 是一致性读，因此需要从 1000001 开始，依次执行 undo log，执行了 100 万次以后，才将 1 这个结果返回。&lt;/p>
&lt;p>扩展&lt;/p>
&lt;p>如果是下面的语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">5&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#a90d91">update&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">commit&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>那么如何加锁？什么时候释放锁？
RC 隔离级别下，对非索引字段更新，有个锁全表记录的过程，不符合条件的会及时释放行锁，不必等事务结束时释放；而直接用索引列更新，只会锁索引查找值和行。update产生的 X 锁在不释放的情况下，DELETE语句无法执行，但是 UPDATE 语句能更新不符合之前X锁的记录。&lt;/p>
&lt;p>RR 隔离级别下，为保证 binlog 记录顺序，非索引更新会锁住全表记录，且事务结束前不会对不符合条件记录有逐步释放的过程。DELETE 和 UPDATE 语句都不能执行&lt;/p>
&lt;h2 id="客户端响应慢">客户端响应慢&lt;/h2>
&lt;p>如果客户端由于压力过大，迟迟不能接收数据，会对服务端造成什么严重的影响？&lt;/p>
&lt;p>这个问题的核心是，造成了“长事务”。结合锁、MVCC 的知识点。&lt;/p>
&lt;p>1、如果前面的语句有更新，意味着它们在占用着行锁，会导致别的语句更新被锁住；&lt;/p>
&lt;p>2、当然读的事务也有问题，就是会导致 undo log 不能被回收，导致回滚段空间膨胀。&lt;/p>
&lt;h2 id="误删数据">误删数据&lt;/h2>
&lt;p>误删数据一般分为以下几类：&lt;/p>
&lt;p>1、使用 delete 语句误删数据行；&lt;/p>
&lt;p>2、使用 drop table 或者 truncate table 语句误删数据表；&lt;/p>
&lt;p>3、使用 drop database 语句误删数据库；&lt;/p>
&lt;p>4、使用 rm 命令误删整个 MySQL 实例。&lt;/p>
&lt;h3 id="误删行">误删行&lt;/h3>
&lt;p>如果是使用 delete 语句误删了数据行，可以用 Flashback 工具通过闪回把数据恢复回来。&lt;/p>
&lt;p>Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而使用这个方案的前提是需要确保 binlog_format=row 和 binlog_row_image=FULL。&lt;/p>
&lt;p>具体恢复数据时，对单个事务做如下处理：&lt;/p>
&lt;p>1、对于 insert 语句，对应的 binlog event 类型是 Write_rows event，把它改成 Delete_rows event 即可；&lt;/p>
&lt;p>2、同理，对于 delete 语句，也是将 Delete_rows event 改为 Write_rows event；&lt;/p>
&lt;p>3、而如果是 Update_rows 的话，binlog 里面记录了数据行修改前和修改后的值，对调这两行的位置即可。&lt;/p>
&lt;p>如果误操作不是一个而是多个，比如下面三个事务：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>(A)delete ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(B)insert ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(C)update ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>用 Flashback 工具解析 binlog 后，写回主库的命令是：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>(reverse C)update ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(reverse B)delete ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(reverse A)insert ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>也就是说，如果误删数据涉及到多个事务，需要将事务的顺序调过来再执行。
&lt;strong>需要说明的是，不建议直接在主库上执行这些操作。&lt;/strong>&lt;/p>
&lt;p>恢复数据比较安全的做法是恢复出一个备份，或者找一个从库作为临时库，在这个临时库上执行这些操作，然后再将确认过的临时库的数据，恢复回主库。&lt;/p>
&lt;p>因为一个在执行线上逻辑的主库，数据状态的变更往往是有关联的。可能由于发现数据问题的时间晚了，导致已经在之前误操作的基础上，业务代码逻辑又继续修改了其他数据。如果这时单独恢复这几行数据，而又未经确认的话，就可能会出现对数据的二次破坏。&lt;/p>
&lt;p>误删数据的事前预防：&lt;/p>
&lt;p>1、把 sql_safe_updates 参数设置为 on。如果忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话执行就会报错。&lt;/p>
&lt;p>2、代码上线前，必须经过 SQL 审计。&lt;/p>
&lt;p>delete 全表很慢，需要生成回滚日志、写 redo、写 binlog。所以，从性能角度考虑，应该优先考虑使用 truncate table 或者 drop table 命令。&lt;/p>
&lt;p>使用 truncate /drop table 和 drop database 命令删除数据，没办法通过 Flashback 来恢复。&lt;/p>
&lt;p>因为即使配置了 binlog_format=row，执行命令记录的 binlog 还是 statement 格式。binlog 里面就只有一个 truncate/drop 语句，这些信息无法恢复数据。&lt;/p>
&lt;h3 id="误删库表">误删库表&lt;/h3>
&lt;p>要想恢复数据，就需要使用全量备份，加增量日志的方式了。这个方案要求线上有定期的全量备份，并且实时备份 binlog。&lt;/p>
&lt;p>这两个条件都具备的情况下，假如有人中午 12 点误删了一个库，恢复数据的流程如下：&lt;/p>
&lt;p>1、取最近一次全量备份，假设这个库是一天一备，上次备份是当天 0 点；&lt;/p>
&lt;p>2、用备份恢复出一个临时库；&lt;/p>
&lt;p>3、从日志备份里面，取出凌晨 0 点之后的日志；&lt;/p>
&lt;p>4、把这些日志，除了误删除数据的语句外，全部应用到临时库。&lt;/p>
&lt;p>这个过程需要注意：&lt;/p>
&lt;p>1、如果这个临时库上有多个数据库，为了加速数据恢复，可以在使用 mysqlbinlog 命令时，加上一个–database 参数，用来指定误删表所在的库。这样就避免在恢复数据时还要应用其他库日志的情况。&lt;/p>
&lt;p>2、在应用日志的时候，需要跳过 12 点误操作的那个语句的 binlog：&lt;/p>
&lt;p>1）如果原实例没有使用 GTID 模式，只能在应用到包含 12 点的 binlog 文件的时候，先用–stop-position 参数执行到误操作之前的日志，然后再用–start-position 从误操作之后的日志继续执行；&lt;/p>
&lt;p>2）如果实例使用了 GTID 模式更加方便。假设误操作命令的 GTID 是 gtid1，那么只需要执行 set gtid_next=gtid1;begin;commit; 先把这个 GTID 加到临时实例的 GTID 集合，之后按顺序执行 binlog 的时候，就会自动跳过误操作的语句。&lt;/p>
&lt;p>使用 mysqlbinlog 方法恢复数据可能还不够快，主要原因有两个：&lt;/p>
&lt;p>1、如果是误删表，最好就是只恢复出这张表，即只重放这张表的操作，但是 mysqlbinlog 工具并不能指定只解析一个表的日志；&lt;/p>
&lt;p>2、用 mysqlbinlog 解析出日志应用，应用日志的过程就只能是单线程。并行复制的方法，在这里都用不上。&lt;/p>
&lt;p>加速备份恢复的办法&lt;/p>
&lt;p>1、从最近一次全量备份恢复出来一个临时库&lt;/p>
&lt;p>2、将误删表的gtid加入临时库&lt;/p>
&lt;p>3、将临时库设为线上备库的从库&lt;/p>
&lt;p>4、临时库就可以并行复制备库的 binlog&lt;/p>
&lt;h3 id="延迟复制从库">延迟复制从库&lt;/h3>
&lt;p>有非常核心的业务，不允许太长的恢复时间，可以考虑搭建延迟复制的备库。这个功能是 MySQL 5.6 版本引入的。&lt;/p>
&lt;p>延迟复制的备库是一种特殊的备库，通过 CHANGE MASTER TO MASTER_DELAY = N 命令，可以指定这个备库持续保持跟主库有 N 秒的延迟。比如把 N 设置为 3600，这就代表了如果主库上有数据被误删了，并且在 1 小时内发现了这个误操作命令，这个命令就还没有在这个延迟复制的备库执行。这时到这个备库上执行 stop slave，再通过之前介绍的方法，跳过误操作命令，就可以恢复出需要的数据。&lt;/p>
&lt;h3 id="预防误删库表">预防误删库表&lt;/h3>
&lt;p>1、账号分离。目的避免写错命令。&lt;/p>
&lt;p>比如：只给业务开发同学 DML 权限，而不给 truncate/drop 权限。而如果业务开发人员有 DDL 需求的话，也可以通过开发管理系统得到支持。即使是 DBA 团队成员，日常也都规定只使用只读账号，必要的时候才使用有更新权限的账号。&lt;/p>
&lt;p>show grants 命令查看账户的权限&lt;/p>
&lt;p>2、制定操作规范。目的避免写错要删除的表名。&lt;/p>
&lt;p>在删除数据表之前，必须先对表做改名操作。观察一段时间，确保对业务无影响以后再删除表。改表名时要求给表名加固定的后缀（比如加 _to_be_deleted)，然后删除表的动作必须通过管理系统执行。并且管理系删除表时，只能删除固定后缀的表。&lt;/p>
&lt;h3 id="rm删除数据">rm删除数据&lt;/h3>
&lt;p>对于一个有高可用机制的 MySQL 集群，最不怕 rm 删除数据。只要不是恶意地删除整个集群，而只是删掉了其中某一个节点的数据，HA 系统就会开始工作，选出一个新的主库，从而保证整个集群的正常工作。要做的就是在这个节点上把数据恢复回来，再接入整个集群。&lt;/p>
&lt;p>现在不止 DBA 有自动化系统，SA（系统管理员）也有自动化系统，所以也许一个批量下线机器的操作，会让整个 MySQL 集群的所有节点都下线。应对这种情况，建议只能是说尽量备份跨机房，或者最好是跨城市保存。&lt;/p>
&lt;h2 id="复制表">复制表&lt;/h2>
&lt;h3 id="mysqldump复制">mysqldump复制&lt;/h3>
&lt;p>把结果输出到临时文件：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysqldump -h&lt;span style="color:#000">$host&lt;/span> -P&lt;span style="color:#000">$port&lt;/span> -u&lt;span style="color:#000">$user&lt;/span> --add-locks&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span> --no-create-info --single-transaction  --set-gtid-purged&lt;span style="color:#000">=&lt;/span>OFF db1 t --where&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;a&amp;gt;900&amp;#34;&lt;/span> --result-file&lt;span style="color:#000">=&lt;/span>/client_tmp/t.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>主要参数含义如下：
1、–single-transaction 的作用是，在导出数据的时候不需要对表 db1.t 加表锁，而是使用 START TRANSACTION WITH CONSISTENT SNAPSHOT 的方法；&lt;/p>
&lt;p>2、–add-locks 设置为 0，表示在输出的文件结果里，不增加&amp;quot; LOCK TABLES t WRITE;&amp;quot; ；&lt;/p>
&lt;p>3、–no-create-info 的意思是，不需要导出表结构；&lt;/p>
&lt;p>4、–set-gtid-purged=off 表示的是，不输出跟 GTID 相关的信息；&lt;/p>
&lt;p>5、–result-file 指定了输出文件的路径，其中 client 表示生成的文件是在客户端机器上的。&lt;/p>
&lt;p>将这些 INSERT 语句放到 db2 库里去执行：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql -h127.0.0.1 -P13000  -uroot db2 -e &lt;span style="color:#c41a16">&amp;#34;source /client_tmp/t.sql&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>source 不是一条 SQL 语句，而是一个客户端命令。mysql 客户端执行这个命令的流程：
1、打开文件，默认以分号为结尾读取一条条的 SQL 语句；&lt;/p>
&lt;p>2、将 SQL 语句发送到服务端执行。&lt;/p>
&lt;h3 id="导出csv文件">导出csv文件&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">db1&lt;/span>.&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span>&lt;span style="color:#1c01ce">900&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">outfile&lt;/span> &lt;span style="color:#c41a16">&amp;#39;/server_tmp/t.csv&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>注意如下几点。
1、这条语句会将结果保存在服务端。如果执行命令的客户端和 MySQL 服务端不在同一个机器上，客户端机器的临时目录下是不会生成 t.csv 文件的。&lt;/p>
&lt;p>2、into outfile 指定了文件的生成位置（/server_tmp/），这个位置必须受参数 secure_file_priv 的限制。参数 secure_file_priv 的可选值和作用分别是：&lt;/p>
&lt;p>1）如果设置为 empty，表示不限制文件生成的位置，这是不安全的设置；&lt;/p>
&lt;p>2）如果设置为一个表示路径的字符串，就要求生成的文件只能放在这个指定的目录，或者它的子目录；&lt;/p>
&lt;p>3）如果设置为 NULL，就表示禁止在这个 MySQL 实例上执行 select … into outfile 操作。&lt;/p>
&lt;p>3、这条命令不会覆盖文件，因此需要确保 /server_tmp/t.csv 这个文件不存在，否则执行语句时就会因为有同名文件的存在而报错。&lt;/p>
&lt;p>4、这条命令生成的文本文件中，原则上一个数据行对应文本文件的一行。但是，如果字段中包含换行符，在生成的文本中也会有换行符。不过类似换行符、制表符这类符号，前面都会跟上“\”这个转义符，这样可以跟字段之间、数据行之间的分隔符区分开。&lt;/p>
&lt;p>将数据导入到目标表 db2.t 中：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">load&lt;/span> &lt;span style="color:#a90d91">data&lt;/span> &lt;span style="color:#000">infile&lt;/span> &lt;span style="color:#c41a16">&amp;#39;/server_tmp/t.csv&amp;#39;&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">db2&lt;/span>.&lt;span style="color:#000">t&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这条语句的执行流程：
1、打开文件 /server_tmp/t.csv，以制表符 ( ) 作为字段间的分隔符，以换行符（
）作为记录之间的分隔符，进行数据读取；&lt;/p>
&lt;p>2、启动事务。&lt;/p>
&lt;p>3、判断每一行的字段数与表 db2.t 是否相同：&lt;/p>
&lt;p>1）若不相同，则直接报错，事务回滚；&lt;/p>
&lt;p>2）若相同，则构造成一行，调用 InnoDB 引擎接口，写入到表中。&lt;/p>
&lt;p>4、重复步骤 3，直到 /server_tmp/t.csv 整个文件读入完成，提交事务。&lt;/p>
&lt;p>&lt;strong>（binlog_format=statement）load 语句记录到 binlog 在从库重放&lt;/strong>&lt;/p>
&lt;p>由于 /server_tmp/t.csv 文件只保存在主库所在的主机上，如果只是把这条语句原文写到 binlog 中，在备库执行的时候，备库的本地机器上没有这个文件，就会导致主备同步停止。所以流程应该如下：&lt;/p>
&lt;p>1、主库执行完成后，将 /server_tmp/t.csv 文件的内容直接写到 binlog 文件中&lt;/p>
&lt;p>2、往 binlog 文件中写入语句 load data local infile ‘/tmp/SQL_LOAD_MB-1-0’ INTO TABLE &lt;code>db2&lt;/code>.&lt;code>t&lt;/code>。&lt;/p>
&lt;p>3、把这个 binlog 日志传到备库。&lt;/p>
&lt;p>4、备库的 apply 线程在执行这个事务日志时：&lt;/p>
&lt;p>1）先将 binlog 中 t.csv 文件的内容读出来，写入到本地临时目录 /tmp/SQL_LOAD_MB-1-0 中；&lt;/p>
&lt;p>2）再执行 load data 语句，往备库的 db2.t 表中插入跟主库相同的数据。&lt;/p>
&lt;p>local 的意思是“将执行这条命令的客户端所在机器的本地文件 /tmp/SQL_LOAD_MB-1-0 的内容，加载到目标表 db2.t 中”。有两种用法：&lt;/p>
&lt;p>1、不加“local”，是读取服务端的文件，这个文件必须在 secure_file_priv 指定的目录或子目录下；&lt;/p>
&lt;p>2、加上“local”，读取的是客户端的文件，只要 mysql 客户端有访问这个文件的权限即可。这时候，MySQL 客户端会先把本地文件传给服务端，然后执行上述的 load data 流程。&lt;/p>
&lt;p>select …into outfile 方法不会生成表结构文件, 所以我们导数据时还需要单独的命令得到表结构定义。mysqldump 提供了一个–tab 参数，可以同时导出表结构定义文件和 csv 数据文件。这条命令的使用方法如下：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysqldump -h&lt;span style="color:#000">$host&lt;/span> -P&lt;span style="color:#000">$port&lt;/span> -u&lt;span style="color:#000">$user&lt;/span> ---single-transaction  --set-gtid-purged&lt;span style="color:#000">=&lt;/span>OFF db1 t --where&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;a&amp;gt;900&amp;#34;&lt;/span> --tab&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$secure_file_priv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这条命令会在 $secure_file_priv 定义的目录下，创建一个 t.sql 文件保存建表语句，同时创建一个 t.txt 文件保存 CSV 数据。&lt;/p>
&lt;h3 id="物理拷贝">物理拷贝&lt;/h3>
&lt;p>在 MySQL 5.6 版本引入了可传输表空间(transportable tablespace) 的方法，可以通过导出 + 导入表空间的方式，实现物理拷贝表的功能。&lt;/p>
&lt;p>假设现在的目标是在 db1 库下，复制一个跟表 t 相同的表 r，具体的执行步骤如下：&lt;/p>
&lt;p>1、执行 create table r like t，创建一个相同表结构的空表；&lt;/p>
&lt;p>2、执行 alter table r discard tablespace，这时 r.ibd 文件会被删除；&lt;/p>
&lt;p>3、执行 flush table t for export，这时候 db1 目录下会生成一个 t.cfg 文件；&lt;/p>
&lt;p>4、在 db1 目录下执行 cp t.cfg r.cfg; cp t.ibd r.ibd；这两个命令（这里需要注意的是，拷贝得到的两个文件，MySQL 进程要有读写权限）；&lt;/p>
&lt;p>5、执行 unlock tables，这时候 t.cfg 文件会被删除；&lt;/p>
&lt;p>6、执行 alter table r import tablespace，将 r.ibd 文件作为表 r 的新的表空间，由于这个文件的数据内容和 t.ibd 是相同的，所以表 r 中就有了和表 t 相同的数据。&lt;/p></description></item><item><title>Docs: 04.索引</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/04.%E7%B4%A2%E5%BC%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/04.%E7%B4%A2%E5%BC%95/</guid><description>
&lt;h1 id="简介">简介&lt;/h1>
&lt;p>索引的出现其实就是为了提高数据查询的效率，就像书的目录一样&lt;/p>
&lt;h1 id="索引常见模型">索引常见模型&lt;/h1>
&lt;p>实现索引的方式有很多种，可以用户提高读写效率的数据结构很多，三种常见、比较简单的数据结构分别是：&lt;strong>哈希表、有序数组和搜索树&lt;/strong>。&lt;/p>
&lt;p>跳表、LSM 树等数据结构也被用于引擎设计中。&lt;/p>
&lt;h2 id="哈希表">哈希表&lt;/h2>
&lt;p>优点：&lt;/p>
&lt;p>增加新的索引速度很快&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;p>不是有序的，做区间查询慢&lt;/p>
&lt;p>适用于只有等值查询的场景&lt;/p>
&lt;h2 id="有序数组">有序数组&lt;/h2>
&lt;p>优点：&lt;/p>
&lt;p>查询效率高&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;p>更新数据效率低&lt;/p>
&lt;p>只适用于静态存储引擎&lt;/p>
&lt;h2 id="搜索树">搜索树&lt;/h2>
&lt;p>二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。&lt;/p>
&lt;p>一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。&lt;/p>
&lt;p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。&lt;/p>
&lt;p>以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。&lt;/p>
&lt;p>N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。&lt;/p>
&lt;h1 id="innodb索引模型">InnoDB索引模型&lt;/h1>
&lt;p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。&lt;/p>
&lt;p>&lt;strong>每一个索引在 InnoDB 里面对应一棵 B+ 树。&lt;/strong>&lt;/p>
&lt;h2 id="索引类型">索引类型&lt;/h2>
&lt;p>根据叶子节点的内容，索引类型分为主键索引和非主键索引。&lt;/p>
&lt;p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。&lt;/p>
&lt;p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。&lt;/p>
&lt;p>基于主键索引和普通索引的查询有什么区别？&lt;/p>
&lt;ul>
&lt;li>如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；&lt;/li>
&lt;li>如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。&lt;/li>
&lt;/ul>
&lt;p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。&lt;/p>
&lt;h1 id="索引维护">索引维护&lt;/h1>
&lt;h2 id="非自增主键">非自增主键&lt;/h2>
&lt;p>如果新增一个中间的主键 ID 记录，需要逻辑上挪动后面的数据空出位置。更糟的情况是 当前所在的页 已经满了，根据 B+ 树的算法需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为&lt;strong>页分裂&lt;/strong>。会影响性能和数据页的利用率。原本放在一个页的数据，需要分到两个页中，整体空间利用率降低大约 50%。（而自增主键防止页分裂，逻辑删除而非物理删除）&lt;/p>
&lt;p>有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。&lt;/p>
&lt;h2 id="自增主键">自增主键&lt;/h2>
&lt;p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： &lt;code>NOT NULL PRIMARY KEY AUTO_INCREMENT&lt;/code> 。&lt;/p>
&lt;p>插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。&lt;/p>
&lt;p>也就是说，自增主键的插入数据模式，正符合了前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。&lt;/p>
&lt;p>而由业务逻辑的字段做主键，则往往不容易保证有序插入，写数据成本相对较高。&lt;/p>
&lt;p>&lt;strong>身份证做主键还是自增主键？&lt;/strong>&lt;/p>
&lt;p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。&lt;/p>
&lt;p>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。&lt;/p>
&lt;p>&lt;strong>结论：从性能和存储空间方面考量，自增主键往往是合理的选择。&lt;/strong>&lt;/p>
&lt;p>1、业务字段不一定是递增的，有可能会造成主键索引的页分裂，导致性能不稳定；&lt;/p>
&lt;p>2、二级索引存储的值是主键，如果使用业务字段占用大小不好控制，业务字段过长可能会导致二级索引占用空间过大，利用率不高。&lt;/p>
&lt;p>&lt;strong>适合业务字段做主键的场景&lt;/strong>&lt;/p>
&lt;p>1、只有一个索引&lt;/p>
&lt;p>2、该索引必须是唯一索引&lt;/p>
&lt;p>（这不就是 KV 场景么）&lt;/p>
&lt;p>由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。这时候就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。&lt;/p>
&lt;p>非聚集组合索引的一种形式，它包括在查询里的 Select、Join 和 Where 子句用到的所有列（即建立索引的字段正好是覆盖查询语句 [select子句] 与查询条件 [Where子句] 中所涉及的字段，也即，&lt;strong>索引包含了查询正在查找的所有数据&lt;/strong>）。&lt;/p>
&lt;h1 id="覆盖索引">覆盖索引&lt;/h1>
&lt;p>不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引的列，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以 MySQL 只能使用 B-Tree 索引做覆盖索引&lt;/p>
&lt;p>当发起一个被索引覆盖的查询(也叫作索引覆盖查询)时，在 EXPLAIN 的Extra 列可以看到“Using index”的信息&lt;/p>
&lt;p>Using where：表示优化器需要通过索引回表查询数据；&lt;/p>
&lt;p>Using index：表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表；&lt;/p>
&lt;p>Using index condition：在5.6版本后加入的新特性（Index Condition Pushdown）;&lt;/p>
&lt;p>Using index condition 会先条件过滤索引，过滤完索引后找到所有符合索引条件的数据行，随后用 WHERE 子句中的其他条件去过滤这些数据行；&lt;/p>
&lt;h1 id="最左前缀原则">最左前缀原则&lt;/h1>
&lt;p>索引项是按照索引定义里面出现的字段顺序排序的。&lt;/p>
&lt;p>只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。&lt;/p>
&lt;p>&lt;strong>建立联合索引时，如何安排索引内的字段顺序？&lt;/strong>&lt;/p>
&lt;p>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。&lt;/p>
&lt;h1 id="索引下推">索引下推&lt;/h1>
&lt;h2 id="索引下推定义">索引下推定义&lt;/h2>
&lt;p>索引下推（index condition pushdown ）简称 ICP，在 Mysql 5.6 的版本上推出，用于优化查询。&lt;/p>
&lt;p>在不使用 ICP 的情况下，在使用非主键索引（又叫普通索引或者二级索引）进行查询时，存储引擎通过索引检索到数据，然后返回给 MySQL 服务器，服务器然后判断数据是否符合条件 。&lt;/p>
&lt;p>在使用 ICP 的情况下，如果存在某些被索引的列的判断条件时，MySQL 服务器将这一部分判断条件传递给存储引擎，然后由存储引擎通过判断索引是否符合 MySQL 服务器传递的条件，只有当索引符合条件时才会将数据检索出来返回给 MySQL 服务器。&lt;/p>
&lt;p>索引条件下推优化可以减少存储引擎查询基础表（回表）的次数，也可以减少 MySQL 服务器从存储引擎接收数据的次数。&lt;/p>
&lt;h2 id="索引下推案例">索引下推案例&lt;/h2>
&lt;p>如建立了一个联合索引（name, age），要同时查询 name like '张%' and age=20 的条件。&lt;/p>
&lt;p>如果是根据最左前缀索引规则（没有索引下推），只用到了 name 的索引。需要回表到主键索引找出数据行，然后再比对 age 过滤。&lt;/p>
&lt;p>使用了索引下推，就会在（name, age）联合索引内部判断 age 是否等于 20，减少回表的次数。&lt;/p>
&lt;h1 id="索引查询过程">索引查询过程&lt;/h1>
&lt;p>1、对于普通索引来说，查找到满足条件的第一个记录后，需要查找下一个记录，直到碰到第一个不满足索引条件的记录。&lt;/p>
&lt;p>2、对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。&lt;/p>
&lt;p>这点不同带来的影响微乎其微。因为 InnoDB 是按数据页为单位读写的，当读一条记录的时候，并不是将这个记录从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。&lt;/p>
&lt;p>对于下一条记录在同一个数据页时，多做的那一次“查找和判断下一条记录”操作，只需要一次指针寻找和一次计算。对于整型字段，一个数据页可以存放近千个 key，所以在同一个数据页的概率较大。&lt;/p>
&lt;p>如果下一条记录在下一个数据页，则必须读取下一个数据页。&lt;/p>
&lt;p>综合计算平均性能差异时，扔可以认为该操作成本可以忽略不计。&lt;/p>
&lt;h1 id="优化器">优化器&lt;/h1>
&lt;p>优化器选择索引的依据是综合考虑 扫描行数、是否使用临时表、是否排序等因素。&lt;/p>
&lt;h2 id="扫描行数">扫描行数&lt;/h2>
&lt;p>MySQL 在真正开始执行语句之前，并不能精确地知道满足这个条件的记录有多少条，而只能根据统计信息来估算记录数。（explain 中的 rows 字段）&lt;/p>
&lt;p>这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。而一个索引上不同的值的个数，我们称之为“基数”（cardinality）。基数越大，索引的区分度越好。&lt;/p>
&lt;p>可以使用 &lt;code>show index from tablename&lt;/code> 看到索引的基数&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">show&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Table&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Non_unique&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Key_name&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Seq_in_index&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Column_name&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Collation&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Cardinality&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Sub_part&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Packed&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Null&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Index_type&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Comment&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Index_comment&lt;/span> &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t1&lt;/span>    &lt;span style="color:#000">|&lt;/span>          &lt;span style="color:#1c01ce">0&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">PRIMARY&lt;/span>  &lt;span style="color:#000">|&lt;/span>            &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">id&lt;/span>          &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">A&lt;/span>         &lt;span style="color:#000">|&lt;/span>      &lt;span style="color:#1c01ce">100256&lt;/span> &lt;span style="color:#000">|&lt;/span>     &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>   &lt;span style="color:#000">|&lt;/span>      &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">BTREE&lt;/span>      &lt;span style="color:#000">|&lt;/span>         &lt;span style="color:#000">|&lt;/span>               &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t1&lt;/span>    &lt;span style="color:#000">|&lt;/span>          &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>        &lt;span style="color:#000">|&lt;/span>            &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>           &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">A&lt;/span>         &lt;span style="color:#000">|&lt;/span>      &lt;span style="color:#1c01ce">100256&lt;/span> &lt;span style="color:#000">|&lt;/span>     &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>   &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">YES&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">BTREE&lt;/span>      &lt;span style="color:#000">|&lt;/span>         &lt;span style="color:#000">|&lt;/span>               &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t1&lt;/span>    &lt;span style="color:#000">|&lt;/span>          &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">b&lt;/span>        &lt;span style="color:#000">|&lt;/span>            &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">b&lt;/span>           &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">A&lt;/span>         &lt;span style="color:#000">|&lt;/span>      &lt;span style="color:#1c01ce">100256&lt;/span> &lt;span style="color:#000">|&lt;/span>     &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>   &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">YES&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">BTREE&lt;/span>      &lt;span style="color:#000">|&lt;/span>         &lt;span style="color:#000">|&lt;/span>               &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#a90d91">rows&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">05&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>三个索引的基数值不同，结果并不一定准确。
&lt;strong>如何得到索引的基数？&lt;/strong>&lt;/p>
&lt;p>一行行统计代价太高，一般选择“采样统计”。&lt;/p>
&lt;p>采样的时候 InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。&lt;/p>
&lt;p>而数据表会持续更新，索引统计信息也不会固定不变。所以当变更的数据行数超过 1/M 时，会自动触发重新做一次索引统计。&lt;/p>
&lt;p>MySQL 中，有两种存储索引统计的方式，可以通过设置参数 innodb_stats_persistent 的值来选择：&lt;/p>
&lt;p>1、设置为 on 的时候，表示统计信息会持久化存储。这时，默认的 N 是 20，M 是 10。&lt;/p>
&lt;p>2、设置为 off 的时候，表示统计信息只存储在内存中。这时，默认的 N 是 8，M 是 16。&lt;/p>
&lt;p>优化器会根据扫描行数和索引类型（主键索引、普通索引）综合权衡。&lt;/p>
&lt;p>&lt;strong>解决统计信息不准确&lt;/strong>&lt;/p>
&lt;p>当统计信息不准确，可以通过 &lt;code>analyze table tablename&lt;/code> 命令，可以用来重新统计索引信息.&lt;/p>
&lt;h2 id="索引选择异常和处理">索引选择异常和处理&lt;/h2>
&lt;p>方法1：&lt;strong>使用 force index 强行选择一个索引。&lt;/strong>&lt;/p>
&lt;p>缺点：写法不优美；索引名称变动可能很麻烦；变更的及时性、不够敏捷。&lt;/p>
&lt;p>方法2：&lt;strong>修改语句，引导使用期望的索引。&lt;/strong>&lt;/p>
&lt;p>见索引实践-&amp;gt;选错索引&lt;/p>
&lt;p>方法3：&lt;strong>新建索引或删除误用索引。&lt;/strong>&lt;/p>
&lt;h1 id="前缀索引">前缀索引&lt;/h1>
&lt;p>在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。&lt;/p>
&lt;p>针对字符串字段如何加索引呢？&lt;/p>
&lt;p>可以考虑前缀索引，对于前缀长度可以通过 count(distinct) 来评估。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#000">xxx&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">xxx&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">xxx&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">xxx&lt;/span>,&lt;span style="color:#1c01ce">6&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tablename&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可能会损失区分度，设定可接受的损失比例 x%，计算 Lx=L*(1-x%)，选择最小的Lx。
缺点：&lt;/p>
&lt;p>1、可能会增加扫描行数&lt;/p>
&lt;p>2、对覆盖索引有影响&lt;/p>
&lt;p>无法利用覆盖索引对查询性能的优化。&lt;/p>
&lt;h1 id="索引实践">索引实践&lt;/h1>
&lt;h2 id="重建索引">重建索引&lt;/h2>
&lt;p>表 T 定义：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">T&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">id&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#a90d91">int&lt;/span> &lt;span style="color:#a90d91">not&lt;/span> &lt;span style="color:#a90d91">null&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">name&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">16&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">index&lt;/span> (&lt;span style="color:#000">k&lt;/span>))&lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>如果要重建索引 k，两个 SQL 语句可以这么写：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#a90d91">drop&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">k&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>(&lt;span style="color:#000">k&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>如果要重建主键索引，也可以这么写：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#a90d91">drop&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>(&lt;span style="color:#000">id&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>问题：两个重建索引的做法是否合理？
重建索引 k 的做法是合理的，可以达到节省空间的目的。但是，重建主键索引的过程不合理！不论是删除主键还是创建主键，都会将整个表重建。所以连着 重建索引 k 和 重建主键索引 两个动作，第一个就白做了。可以使用一个语句替代：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>附：首先解释重建索引的原因&lt;/strong>&lt;/p>
&lt;p>索引可能因为删除，或者页分裂等原因，导致数据页有空洞，重建索引的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。&lt;/p>
&lt;h2 id="多个索引合理性">多个索引合理性&lt;/h2>
&lt;p>表定义：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">geek&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span>,&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">ca&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span>,&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">cb&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span>,&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>历史原因，该表需要 a，b 做联合主键，查询场景：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">geek&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">N&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">geek&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">N&lt;/span> &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>问题：“ca”、“cb”是否合理？
联合主键的聚簇索引组织顺序相当于 order by a,b，也就是先按 a 排序再按 b 排序，c 无序。&lt;/p>
&lt;p>索引 c 的组织顺序是 cab&lt;/p>
&lt;p>索引 ca 的组织是先按 c 排序，再按 a 排序，同时记录主键（注意这里主键部分只有 b），即 cab&lt;/p>
&lt;p>索引 cb 的组织是先按 c 排序，再按 b 排序，同时记录主键（注意这里主键部分只有 a），即 cab&lt;/p>
&lt;p>所以，结论就是 ca 可以去掉（或者去掉索引 c），cb 可以保留。&lt;/p>
&lt;h2 id="普通索引和唯一索引">普通索引和唯一索引&lt;/h2>
&lt;p>唯一索引和普通索引在查询能力上没有差别，主要考虑的是更新性能的影响，建议尽量选择普通索引。&lt;/p>
&lt;p>结合 change buffer 原理及其使用场景，如果数据更新（包括插入）之后会立即查询，应当关闭 change buffer。其它情况下，change buffer 和普通索引的配合使用，对于数据量大的表的更新优化还是挺明显的。&lt;/p>
&lt;p>尤其使用机械硬盘时，change buffer 的收益非常显著。这种情况下，尽量使用普通索引，将 change buffer 尽量开大，以确保数据写入速度。&lt;/p>
&lt;h2 id="选错索引">选错索引&lt;/h2>
&lt;p>隔离级别 RR，表结构：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t1&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>利用存储过程创建数据：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delimiter&lt;/span> ;; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">重定义分隔符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">procedure&lt;/span> &lt;span style="color:#000">idata&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">declare&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">while&lt;/span>(&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">&amp;lt;=&lt;/span>&lt;span style="color:#1c01ce">100000&lt;/span>)&lt;span style="color:#a90d91">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#000">i&lt;/span>, &lt;span style="color:#000">i&lt;/span>, &lt;span style="color:#000">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">end&lt;/span> &lt;span style="color:#000">while&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">end&lt;/span>;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">delimiter&lt;/span> ; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">恢复分隔符&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">call&lt;/span> &lt;span style="color:#000">idata&lt;/span>(); &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">调用存储过程&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>额外操作：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>drop procedure idata; &lt;span style="color:#177500"># 删除存储过程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SELECT * FROM information_schema.routines WHERE &lt;span style="color:#000">routine_name&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;idata&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;h3 id="选错case1">选错case1&lt;/h3>
&lt;p>实验过程：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">explain&lt;/span> &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">10000&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">20000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">select_type&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">partitions&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">type&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">possible_keys&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">key_len&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">ref&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">rows&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Extra&lt;/span>                 &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span>  &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">SIMPLE&lt;/span>      &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t1&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">range&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>             &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">5&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">10001&lt;/span> &lt;span style="color:#000">|&lt;/span>   &lt;span style="color:#1c01ce">100&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">condition&lt;/span> &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">warning&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">01&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>事务并发操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">start transaction with consistent snapshot;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">delete from t1;&lt;br>call idata();&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">explain select * from t1 where a between 10000 and 20000;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session B 使用以下 SQL 语句，然后查看 慢查询日志 耗时。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">long_query_time&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">设置超时时间为&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">10000&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">20000&lt;/span>; &lt;span style="color:#177500">/*Q1*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">force&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>(&lt;span style="color:#000">a&lt;/span>) &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">10000&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">20000&lt;/span>;&lt;span style="color:#177500">/*Q2*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>选错原因：不断删除和新增导致采样统计不准确。这里就是扫描行数的统计不准确。
场景：对应不断删除历史数据和新增数据的场景。&lt;/p>
&lt;p>解决办法：可以考虑使用 force index。&lt;/p>
&lt;p>&lt;strong>为什么需要 Session A 的配合？&lt;/strong>&lt;/p>
&lt;p>Session A 开启了事务并没有提交，RR 级别会创建一个一致性读视图。Session B 的删除会产生记录的新版本（空记录），同时会产生新的 undo log；一致性读视图需要的 undo log 不会删除，所以之前插入的 10 万行数据不能删除。因此之前的数据每一行数据都有两个版本，旧版本是 delete 之前的数据，新版本是标记为 deleted 的数据。不删除的情况下，记录还在数据页上占着空间，Session B 又把数据加回来，索引数据页出现大量分裂，导致 caredinality 不准。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">show&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#c41a16">&amp;#39;t1&amp;#39;&lt;/span>&lt;span style="color:#000">\&lt;/span>&lt;span style="color:#a90d91">G&lt;/span> &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">\&lt;/span>&lt;span style="color:#a90d91">G&lt;/span> &lt;span style="color:#000">等于&lt;/span> &lt;span style="color:#000">分号？&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="选错case2">选错case2&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">explain&lt;/span> &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> (&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span>) &lt;span style="color:#a90d91">and&lt;/span> (&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">50000&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">100000&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+------------------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">select_type&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">partitions&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">type&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">possible_keys&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">key_len&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">ref&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">rows&lt;/span>  &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">Extra&lt;/span>                              &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+------------------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#000">|&lt;/span>  &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">SIMPLE&lt;/span>      &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">t1&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">range&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">a&lt;/span>,&lt;span style="color:#000">b&lt;/span>           &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#000">b&lt;/span>    &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">5&lt;/span>       &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#1c01ce">50128&lt;/span> &lt;span style="color:#000">|&lt;/span>     &lt;span style="color:#1c01ce">1&lt;/span>.&lt;span style="color:#1c01ce">00&lt;/span> &lt;span style="color:#000">|&lt;/span> &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">condition&lt;/span>; &lt;span style="color:#a90d91">Using&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#177500">----+-------------+-------+------------+-------+---------------+------+---------+------+-------+----------+------------------------------------+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">row&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">set&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">warning&lt;/span> (&lt;span style="color:#1c01ce">0&lt;/span>.&lt;span style="color:#1c01ce">04&lt;/span> &lt;span style="color:#000">sec&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>经过 expalin 分析，返回结果 key 字段显示，优化器选择了索引 b，而 rows 字段需要扫描的行数是 50128。
原因：&lt;/p>
&lt;p>优化器认为使用索引 b 可以避免排序（b 本身是索引，已经有序），所以即使扫描行数多，也判定为代价更小。&lt;/p>
&lt;p>解决办法：引导优化器选择期望的索引，修改 SQL 语句：&lt;/p>
&lt;p>方法1：修改语义&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> (&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span>) &lt;span style="color:#a90d91">and&lt;/span> (&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">50000&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">100000&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">b&lt;/span>,&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>方法2：修改 limit：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span>  (&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> (&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">1000&lt;/span>)  &lt;span style="color:#a90d91">and&lt;/span> (&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">between&lt;/span> &lt;span style="color:#1c01ce">50000&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#1c01ce">100000&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">100&lt;/span>)&lt;span style="color:#a90d91">alias&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>通过 limit 100 让优化器意识到，使用索引 b 代价很高。根据数据特征诱导优化器，不具备通用型。&lt;/p>
&lt;h2 id="字符串字段加索引">字符串字段加索引&lt;/h2>
&lt;h3 id="使用前缀索引">使用前缀索引&lt;/h3>
&lt;p>表定义：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">SUser&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ID&lt;/span> &lt;span style="color:#a90d91">bigint&lt;/span> &lt;span style="color:#000">unsigned&lt;/span> &lt;span style="color:#a90d91">primary&lt;/span> &lt;span style="color:#a90d91">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">email&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">64&lt;/span>), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>... 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">innodb&lt;/span>; 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>使用邮箱登录：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">f1&lt;/span>, &lt;span style="color:#000">f2&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">SUser&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">email&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;xxx&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>考虑增加索引：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">SUser&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">index1&lt;/span>(&lt;span style="color:#000">email&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">或&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">alter&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">SUser&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">index&lt;/span> &lt;span style="color:#000">index2&lt;/span>(&lt;span style="color:#000">email&lt;/span>(&lt;span style="color:#1c01ce">6&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>如何选取前缀索引长度？
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#000">email&lt;/span>) &lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">email&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">email&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">email&lt;/span>,&lt;span style="color:#1c01ce">6&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L6&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#a90d91">distinct&lt;/span> &lt;span style="color:#a90d91">left&lt;/span>(&lt;span style="color:#000">email&lt;/span>,&lt;span style="color:#1c01ce">7&lt;/span>)&lt;span style="color:#000">）&lt;/span>&lt;span style="color:#a90d91">as&lt;/span> &lt;span style="color:#000">L7&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">SUser&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>可能会损失区分度，如设定可接受的损失比例 5%，计算 Lx=L*95%，选择最小的Lx。&lt;/p>
&lt;h3 id="使用倒序索引">使用倒序索引&lt;/h3>
&lt;p>如身份证同一个地区一般前 6 位相同，前缀索引区分度不高，相反后 6 位区分度较高。可以使用 count(distinct) 验证。&lt;/p>
&lt;p>如果将身份证倒序存储，那么建立索引后查询时也倒序就可以提高效率（利用 reverse 函数）。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">xx&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">xx&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id_card&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#000">reverse&lt;/span>(&lt;span style="color:#000">xxx&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>再进一步，可以采用 倒序索引+前缀索引 的方式。
缺点：&lt;/p>
&lt;p>不支持范围查询&lt;/p>
&lt;h3 id="使用hash字段">使用hash字段&lt;/h3>
&lt;p>如新增额外的整型字段，如通过 crc32() 函数，一般在图片链接可以通过这种方式。&lt;/p>
&lt;p>注意事项：&lt;/p>
&lt;p>hash 可能冲突，SQL 的 where 条件需要再加上原字段的判断条件。&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;p>不支持范围查询，只支持等值查询&lt;/p>
&lt;h3 id="学号加索引">学号加索引&lt;/h3>
&lt;p>邮箱作为登录名是 学号@gmail.com，学号规则：十五位的数字，前三位是所在城市编号、第四到第六位是学校编号、第七位到第十位是入学年份、最后五位是顺序编号。&lt;/p>
&lt;p>问题：如何创建登录名的索引？&lt;/p>
&lt;p>前 6 位是固定的，邮箱后缀相同，因此可以只存 入学年份和顺序编号，长度共为 9 位。&lt;/p>
&lt;h2 id="索引效率低下案例">索引效率低下案例&lt;/h2>
&lt;h3 id="month函数案例">month函数案例&lt;/h3>
&lt;p>表定义：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradelog&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">32&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">operator&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#000">datetime&lt;/span> &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span> &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#000">CHARSET&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">utf8mb4&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>表里记录了从 2016 年初到 2018 年底的所有数据，要统计发生在所有年份中 7 月份的交易记录总数。SQL 语句可能是：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">month&lt;/span>(&lt;span style="color:#000">t_modified&lt;/span>)&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">7&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>虽然 t_modified 字段上有索引，但语句却执行了很久。因为&lt;strong>对字段做了函数计算就用不上索引&lt;/strong>。
进一步分析，条件是 where t_modified='2018-7-1’的时候为什么可以用上索引。实际上 B+ 树提供的这个快速定位能力，来源于同一层兄弟节点的有序性。对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。&lt;/p>
&lt;p>注意：&lt;strong>优化器并不是要放弃使用这个索引&lt;/strong>。&lt;/p>
&lt;p>这个例子中放弃了树搜索功能，优化器可以选择遍历主键索引，也可以选择遍历索引 t_modified，优化器对比索引大小后发现，索引 t_modified 更小，遍历这个索引比遍历主键索引来得更快。因此最终还是会选择索引 t_modified。&lt;/p>
&lt;p>也可通过 explain 命令查看 key 字段确实使用了 t_modified 索引，rows 扫描了的行数也是所有行，Extra 字段的 Using index，表示的使用了覆盖索引。&lt;/p>
&lt;p>改进 SQL（加上所有年份的 7 月）：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">count&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#000">-&amp;gt;&lt;/span> (&lt;span style="color:#000">t_modified&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;2016-7-1&amp;#39;&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2016-8-1&amp;#39;&lt;/span>) &lt;span style="color:#a90d91">or&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#000">-&amp;gt;&lt;/span> (&lt;span style="color:#000">t_modified&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;2017-7-1&amp;#39;&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2017-8-1&amp;#39;&lt;/span>) &lt;span style="color:#a90d91">or&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#000">-&amp;gt;&lt;/span> (&lt;span style="color:#000">t_modified&lt;/span> &lt;span style="color:#000">&amp;gt;=&lt;/span> &lt;span style="color:#c41a16">&amp;#39;2018-7-1&amp;#39;&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">t_modified&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2018-8-1&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>注意，对于不改变有序性的函数，优化器也不会优化，如：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">+&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">10000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>需要改成 &lt;code>where id = 10000 - 1&lt;/code> 才可以。&lt;/p>
&lt;h3 id="隐式类型转换案例">隐式类型转换案例&lt;/h3>
&lt;p>复用上述 tradelog 表，分析下述 SQL 语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">123456&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>tradeid 是有索引的，但是 explain 结果显示这条语句需要走全表扫描。因为 tradeid 的字段是 varchar(32)，而输入的参数却是整型，所以需要做类型转换。
类型转换的规则&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#c41a16">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这条语句的结果是 1。所以能确认 MySQL 的转换规则：&lt;strong>在 MySQL 中，字符串和数字做比较的话，是将字符串转换成数字。&lt;/strong>
所以上面的 SQL 查询语句相当于：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">CAST&lt;/span>(&lt;span style="color:#000">tradid&lt;/span> &lt;span style="color:#a90d91">AS&lt;/span> &lt;span style="color:#000">signed&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>) &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">123456&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>即触发了规则：对索引字段做函数操作，优化器会放弃走树搜索功能。
扩展延伸&lt;/p>
&lt;p>id 是 int 类型，那么下面这条语句，是否导致全表扫描：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#34;123&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>验证：
上面验证了当字符串和数字作比较是将字符串转换成数字，索引隐式转换不会应用到字段上，所以可以走索引。另外，当字符串不能转换成数字时，都被转换成 0 了，下面的语句可以验证。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#c41a16">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#1c01ce">0&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">结果是&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="隐式字符编码转换案例">隐式字符编码转换案例&lt;/h3>
&lt;p>复用上面的表 tradelog，在这基础上再加上下面的表：&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">trade_detail&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">32&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">trade_step&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>, &lt;span style="color:#177500">/*操作步骤*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">step_info&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">32&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>, &lt;span style="color:#177500">/*步骤信息*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span> &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#000">CHARSET&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">utf8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaaa&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">1000&lt;/span>, &lt;span style="color:#000">now&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaab&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">1000&lt;/span>, &lt;span style="color:#000">now&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaac&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">1000&lt;/span>, &lt;span style="color:#000">now&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaaa&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;add&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaaa&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;update&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaaa&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;commit&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">4&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaab&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;add&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">5&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaab&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;update&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">6&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaab&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;update again&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">7&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaab&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">4&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;commit&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">8&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaac&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;add&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">9&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaac&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;update&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">10&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaac&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;update again&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;aaaaaaac&amp;#39;&lt;/span>, &lt;span style="color:#1c01ce">4&lt;/span>, &lt;span style="color:#c41a16">&amp;#39;commit&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>如果要查询 id=2 的交易的所有操作步骤信息，SQL 语句可以是：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">d&lt;/span>.&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#000">l&lt;/span>, &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">d&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">l&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">l&lt;/span>.&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>; &lt;span style="color:#177500">/*语句Q1*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>explain 结果如下：
&lt;img src="../imgs/index_20220409_1.png" alt="index_20220409_1.png">&lt;/p>
&lt;p>1、第一行显示优化器会先在交易记录表 tradelog 上查到 id=2 的行，这个步骤用上了主键索引，rows=1 表示只扫描一行；&lt;/p>
&lt;p>2、第二行 key=NULL，表示没有用上交易详情表 trade_detail 上的 tradeid 索引，进行了全表扫描。&lt;/p>
&lt;p>在这个执行计划里，是从 tradelog 表中取 tradeid 字段，再去 trade_detail 表里查询匹配字段。因此，我们把 tradelog 称为驱动表，把 trade_detail 称为被驱动表，把 tradeid 称为关联字段。&lt;/p>
&lt;p>上面 SQL 的执行流程：&lt;/p>
&lt;p>1、根据 id 在 tradelog 表里找到 id=2 这一行；&lt;/p>
&lt;p>2、从这行中取出 tradeid 字段的值；&lt;/p>
&lt;p>3、根据 tradeid 值到 trade_detail 表中查找条件匹配的行。explain 结果里第二行 key=NULL 表示：这个过程是通过遍历主键索引的方式，逐一判断 tradeid 的值是否匹配。&lt;/p>
&lt;p>这时会发现第 3 步不符合预期。原因：两个表的字符集不同，一个是 utf8，一个是utf8mb4，所以做表连接查询时用不上关联子弹的索引。&lt;/p>
&lt;p>将第 3 步单独改成 SQL 语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">L2&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>.&lt;span style="color:#000">value&lt;/span>; &lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">L2&lt;/span> &lt;span style="color:#000">表示&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span> &lt;span style="color:#000">的行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>$L2.tradeid.value 的字符集是 utf8mb4。utf8mb4 是 utf8 的超集，所以当这两个类型的字符串做比较时，MySQL 会先把 utf8 字符串转成 utf8mb4 字符集，再做比较。
即：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">trade_detail&lt;/span>  &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#a90d91">CONVERT&lt;/span>(&lt;span style="color:#000">traideid&lt;/span> &lt;span style="color:#a90d91">USING&lt;/span> &lt;span style="color:#000">utf8mb4&lt;/span>)&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">L2&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>.&lt;span style="color:#000">value&lt;/span>; 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>CONVERT() 函数会将字符串转成 utf8mb4 字符集。还是触发了规则：对索引字段做函数操作，优化器会放弃走树搜索功能。
&lt;strong>对比验证&lt;/strong>&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">l&lt;/span>.&lt;span style="color:#a90d91">operator&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#000">l&lt;/span> , &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">d&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">l&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">d&lt;/span>.&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">4&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>同上，第 3 步可以转换成：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">operator&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">traideid&lt;/span> &lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">R4&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>.&lt;span style="color:#000">value&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>$R4.tradeid.value 的字符集是 utf8, 按照字符集转换规则，要转成 utf8mb4，所以这个过程就被改写成：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">operator&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span>  &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">traideid&lt;/span> &lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">CONVERT&lt;/span>(&lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000">R4&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>.&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#a90d91">USING&lt;/span> &lt;span style="color:#000">utf8mb4&lt;/span>); 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>这里的 CONVERT 函数是加在输入参数上，可以用上被驱动表的 traideid 索引。
这里也可以结合 expain 分析。&lt;/p>
&lt;p>优化方案&lt;/p>
&lt;p>1、修改 trade_detail 表数据集为 utf8mb4&lt;/p>
&lt;p>2、如果业务数据量大无法做第 1 步的 DDL，那么实行修改 SQL：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">d&lt;/span>.&lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">tradelog&lt;/span> &lt;span style="color:#000">l&lt;/span> , &lt;span style="color:#000">trade_detail&lt;/span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">d&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#a90d91">CONVERT&lt;/span>(&lt;span style="color:#000">l&lt;/span>.&lt;span style="color:#000">tradeid&lt;/span> &lt;span style="color:#a90d91">USING&lt;/span> &lt;span style="color:#000">utf8&lt;/span>) &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">l&lt;/span>.&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">2&lt;/span>; 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="字段长度超长案例">字段长度超长案例&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">table_a&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">varchar&lt;/span>(&lt;span style="color:#1c01ce">10&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>如果表中有 100 万行数据，其中有 10 万行数据的值是 ‘1234567890’，分析下述 SQL 语句执行过程：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">table_a&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;1234567890abcd&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>这条 SQL 语句执行很慢，流程如下：&lt;/p>
&lt;p>1、传给引擎执行时做了字符截断。因为引擎里面这个行只定义了长度是 10，所以只截取前 10 个字节，就是’1234567890’进去做匹配；&lt;/p>
&lt;p>2、这样满足条件的数据有 10 万行；&lt;/p>
&lt;p>3、因为是 select *， 所以要做 10 万次回表；&lt;/p>
&lt;p>4、但是每次回表后查出整行，到 server 层判断，b 的值都不是’1234567890abcd’；&lt;/p>
&lt;p>5、返回结果是空。&lt;/p>
&lt;p>&lt;strong>虽然执行过程中可能经过函数操作，但是最终在拿到结果后，server 层还要做一轮判断。&lt;/strong>&lt;/p>
&lt;h1 id="索引优化">索引优化&lt;/h1>
&lt;h2 id="索引下推优化">&lt;strong>索引下推优化&lt;/strong>&lt;/h2>
&lt;p>合理借助联合索引。&lt;/p>
&lt;h2 id="覆盖索引优化">&lt;strong>覆盖索引优化&lt;/strong>&lt;/h2>
&lt;p>身份证号是市民的唯一标识。如果有根据身份证号查询市民信息的需求，只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。&lt;/p>
&lt;h2 id="查询优化">&lt;strong>查询优化&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>优化顺序&lt;/strong>&lt;/p>
&lt;p>1）尽量少作计算。&lt;/p>
&lt;p>2）尽量少 join。&lt;/p>
&lt;p>3）尽量少排序。&lt;/p>
&lt;p>4）尽量避免 select *。&lt;/p>
&lt;p>5）尽量用 join 代替子查询。&lt;/p>
&lt;p>6）尽量少 or。&lt;/p>
&lt;p>7）尽量用 union all 代替 union。&lt;/p>
&lt;p>8）尽量早过滤。&lt;/p>
&lt;p>9）避免类型转换。&lt;/p>
&lt;p>10）优先优化高并发的 SQL，而不是执行频率低某些“大”SQL。&lt;/p>
&lt;p>11）从全局出发优化，而不是片面调整。&lt;/p>
&lt;p>12）尽可能对每一条运行在数据库中的SQL进行 Explain。&lt;/p>
&lt;p>&lt;strong>优化方向&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>加索引&lt;/li>
&lt;li>避免返回不必要的数据&lt;/li>
&lt;li>适当分批量进行&lt;/li>
&lt;li>优化sql结构&lt;/li>
&lt;li>分库分表&lt;/li>
&lt;li>读写分离&lt;/li>
&lt;/ul>
&lt;h3 id="慢查询优化步骤">慢查询优化步骤&lt;/h3>
&lt;p>0、先运行看看是否真的很慢，注意设置SQL_NO_CACHE&lt;/p>
&lt;p>1、where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高&lt;/p>
&lt;p>2、explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）&lt;/p>
&lt;p>3、order by limit 形式的sql语句让排序的表优先查&lt;/p>
&lt;p>4、了解业务方使用场景&lt;/p>
&lt;p>5、加索引时参照建索引的几大原则&lt;/p>
&lt;p>6、观察结果，不符合预期继续从0分析&lt;/p>
&lt;h3 id="不走索引情况">不走索引情况&lt;/h3>
&lt;p>1、索引列计算&lt;/p>
&lt;p>2、前导模糊查询不能命中索引（如like '%xxx%'，但是like 'xxx%'走索引！！）&lt;/p>
&lt;p>3、正则表达式&lt;/p>
&lt;p>4、字符串与数字比较（如 where &lt;code>a&lt;/code>=1）&lt;/p>
&lt;p>5、使用or（除非每个字段都是索引才走）&lt;/p>
&lt;p>6、mysql估计全表扫描比使用索引快（约30%内的数据走索引？）&lt;/p>
&lt;p>&lt;strong>注意：范围查询如果有索引会走索引，但是多个范围，只有第一个范围查询走索引。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>联合索引中，范围列后的字段不走索引&lt;/strong>&lt;/p>
&lt;h3 id="优化count-查询">&lt;strong>优化COUNT()查询&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>执行效果上：&lt;/strong>&lt;/p>
&lt;p>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL。&lt;/p>
&lt;p>count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL 。&lt;/p>
&lt;p>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。&lt;/p>
&lt;p>&lt;strong>执行效率上：&lt;/strong>&lt;/p>
&lt;p>列名为主键，count(列名)会比count(1)快。&lt;/p>
&lt;p>列名不为主键，count(1)会比count(列名)快。&lt;/p>
&lt;p>如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）。&lt;/p>
&lt;p>如果有主键，则 select count（主键）的执行效率是最优的。&lt;/p>
&lt;p>如果表只有一个字段，则 select count（*）最优。&lt;/p>
&lt;p>注意：MyISAM引擎统计了行数，不使用where时效率很高。&lt;/p>
&lt;h3 id="优化关联查询">&lt;strong>优化关联查询&lt;/strong>&lt;/h3>
&lt;p>1）using或者on的字段，在第二张表中应当为索引，第一张表中不需要创建索引&lt;/p>
&lt;pre>&lt;code>要理解优化关联查询的第一个技巧，就需要理解MySQL是如何执行关联查询的。当前MySQL关联执行的策略非常简单，它对任何的关联都执行嵌套循环关联操作，即先在一个表中循环取出单条数据，然后在嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为为止。然后根据各个表匹配的行，返回查询中需要的各个列。
&lt;/code>&lt;/pre>
&lt;p>2）确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化。&lt;/p>
&lt;h3 id="limit优化">&lt;strong>limit优化&lt;/strong>&lt;/h3>
&lt;p>避免深度翻页。&lt;/p>
&lt;p>比如：LIMIT 10000 20这样的查询，MySQL需要查询10020条记录然后只返回20条记录，前面的10000条都将被抛弃，这样的代价非常高。&lt;/p>
&lt;p>优化这种查询一个最简单的办法就是尽可能的使用覆盖索引扫描，而不是查询所有的列。&lt;/p>
&lt;p>方法一：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">优化前&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">film_id&lt;/span>,&lt;span style="color:#000">description&lt;/span> &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">film&lt;/span> &lt;span style="color:#a90d91">ORDER&lt;/span> &lt;span style="color:#a90d91">BY&lt;/span> &lt;span style="color:#000">title&lt;/span> &lt;span style="color:#a90d91">LIMIT&lt;/span> &lt;span style="color:#1c01ce">50&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">优化后&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">film&lt;/span>.&lt;span style="color:#000">film_id&lt;/span>,&lt;span style="color:#000">film&lt;/span>.&lt;span style="color:#000">description&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">film&lt;/span> &lt;span style="color:#a90d91">INNER&lt;/span> &lt;span style="color:#a90d91">JOIN&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">film_id&lt;/span> &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">film&lt;/span> &lt;span style="color:#a90d91">ORDER&lt;/span> &lt;span style="color:#a90d91">BY&lt;/span> &lt;span style="color:#000">title&lt;/span> &lt;span style="color:#a90d91">LIMIT&lt;/span> &lt;span style="color:#1c01ce">50&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#a90d91">AS&lt;/span> &lt;span style="color:#000">tmp&lt;/span> &lt;span style="color:#a90d91">USING&lt;/span>(&lt;span style="color:#000">film_id&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>方法二：
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span>&lt;span style="color:#000">优化前&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">LIMIT&lt;/span> &lt;span style="color:#1c01ce">10000&lt;/span>, &lt;span style="color:#1c01ce">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span>&lt;span style="color:#000">优化后&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">WHERE&lt;/span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#1c01ce">10000&lt;/span> &lt;span style="color:#a90d91">LIMIT&lt;/span> &lt;span style="color:#1c01ce">10&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>其它优化的办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表中只包含主键列和需要做排序的列。&lt;/p>
&lt;h3 id="优化union">&lt;strong>优化UNION&lt;/strong>&lt;/h3>
&lt;pre>&lt;code>MySQL处理UNION的策略是先创建临时表，然后再把各个查询结果插入到临时表中，最后再来做查询。因此很多优化策略在UNION查询中都没有办法很好的时候。经常需要手动将WHERE、LIMIT、ORDER BY等字句“下推”到各个子查询中，以便优化器可以充分利用这些条件先优化。
除非确实需要服务器去重，否则就一定要使用UNION ALL，如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，这会导致整个临时表的数据做唯一性检查，这样做的代价非常高。当然即使使用ALL关键字，MySQL总是将结果放入临时表，然后再读出，再返回给客户端。虽然很多时候没有这个必要，比如有时候可以直接把每个子查询的结果返回给客户端。
**union、in、or 都能够命中索引**，建议使用 in。查询的CPU消耗：or &amp;gt; in &amp;gt;union
&lt;/code>&lt;/pre>
&lt;p>联合索引的使用有一个好处，就是索引的下一个字段是会自动排序的。&lt;/p>
&lt;p>在进行优化的时候，需要暂时关闭数据库自带的缓存，这种缓存在平时查询时确实是个优势，但是在优化调试sql的时候很有必要关掉，在 select 后面加上 sql_no_cache 即可临时关上数据库缓存&lt;/p>
&lt;h3 id="groupby优化">groupby优化&lt;/h3>
&lt;p>&lt;strong>利用GROUP BY统计大数据时，应当将查询与统计分离，优化查询语句。&lt;/strong>&lt;/p>
&lt;p>优化前查询&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">cpe_id&lt;/span>, &lt;span style="color:#a90d91">COUNT&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#000">restarts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">business_log&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">WHERE&lt;/span> &lt;span style="color:#000">operate_time&lt;/span>&lt;span style="color:#000">&amp;gt;=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2012-12-05 00:00:00&amp;#39;&lt;/span> &lt;span style="color:#a90d91">AND&lt;/span> &lt;span style="color:#000">operate_time&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2018-01-05 00:00:00&amp;#39;&lt;/span> &lt;span style="color:#a90d91">AND&lt;/span> &lt;span style="color:#000">operate_type&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#a90d91">AND&lt;/span> &lt;span style="color:#a90d91">result&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">GROUP&lt;/span> &lt;span style="color:#a90d91">BY&lt;/span> &lt;span style="color:#000">cpe_id&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>优化后查询
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">cpe_id&lt;/span>, &lt;span style="color:#a90d91">COUNT&lt;/span>(&lt;span style="color:#000">*&lt;/span>) &lt;span style="color:#000">restarts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">FROM&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#000">cpe_id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">business_log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a90d91">WHERE&lt;/span> &lt;span style="color:#000">operate_time&lt;/span>&lt;span style="color:#000">&amp;gt;=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2012-12-05 00:00:00&amp;#39;&lt;/span> &lt;span style="color:#a90d91">AND&lt;/span> &lt;span style="color:#000">operate_time&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#c41a16">&amp;#39;2018-01-05 00:00:00&amp;#39;&lt;/span> &lt;span style="color:#a90d91">AND&lt;/span> &lt;span style="color:#000">operate_type&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">3&lt;/span> &lt;span style="color:#a90d91">AND&lt;/span> &lt;span style="color:#a90d91">result&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">GROUP&lt;/span> &lt;span style="color:#a90d91">BY&lt;/span> &lt;span style="color:#000">cpe_id&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>&lt;strong>group by 执行计划出现 using filesort&lt;/strong>&lt;/p>
&lt;p>优化方案 group by field 后面加 order by null&lt;/p>
&lt;p>(1) group by本质是先分组后排序【绝不是先排序后分组】&lt;/p>
&lt;p>(2) group by默认会出现 Using filesort， 很多场景我只需要分组后的列【即被去重的列】, 众所周知这个东东会影响查询性能, 解决方法就是 group by ... order by null&lt;/p>
&lt;p>(3) group by column 默认会按照column分组, 然后根据column升序排列;  group by column order by null 则默认按照column分组,然后根据标的主键ID升序排列&lt;/p>
&lt;h1 id="实战操作">实战操作&lt;/h1>
&lt;h2 id="慢查询">慢查询&lt;/h2>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">慢查询状态&lt;/span> &lt;span style="color:#000">slow_query_log&lt;/span> &lt;span style="color:#000">，默认禁用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">show&lt;/span> &lt;span style="color:#000">variables&lt;/span>  &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#c41a16">&amp;#39;%slow_query_log%&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">开启慢查询，只对当前数据库生效，&lt;/span>&lt;span style="color:#000">MySQL&lt;/span> &lt;span style="color:#000">重启后则会失效&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#a90d91">global&lt;/span> &lt;span style="color:#000">slow_query_log&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">永久生效，必须修改配置文件&lt;/span>&lt;span style="color:#000">my&lt;/span>.&lt;span style="color:#000">cnf&lt;/span>&lt;span style="color:#000">（其它系统变量也是如此）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://www.cnblogs.com/Chenjiabing/p/12600926.html">https://www.cnblogs.com/Chenjiabing/p/12600926.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/happyflyingpig/p/7662881.html">https://www.cnblogs.com/happyflyingpig/p/7662881.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/fzy629442466/article/details/90711104">https://blog.csdn.net/fzy629442466/article/details/90711104&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/j7IAlEy4szzmoc8n2Pb0DQ">https://mp.weixin.qq.com/s/j7IAlEy4szzmoc8n2Pb0DQ&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://dbaplus.cn/news-155-1531-1.html">https://dbaplus.cn/news-155-1531-1.html&lt;/a>&lt;/p></description></item><item><title>Docs: 05.锁</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/05.%E9%94%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/05.%E9%94%81/</guid><description>
&lt;h1 id="背景">背景&lt;/h1>
&lt;p>数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。&lt;/p>
&lt;p>根据加锁的范围，MySQL 里面的锁大致可以分成&lt;strong>全局锁&lt;/strong>、&lt;strong>表级锁&lt;/strong>和&lt;strong>行锁&lt;/strong>三类。&lt;/p>
&lt;h1 id="全局锁">全局锁&lt;/h1>
&lt;h2 id="全局锁定义">全局锁定义&lt;/h2>
&lt;p>顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Flush tables with &lt;span style="color:#a90d91">read&lt;/span> lock &lt;span style="color:#000">(&lt;/span>FTWRL&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>当需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。
业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，对里面任何一个表做加字段操作，都是会被锁住的。&lt;/p>
&lt;h2 id="全局锁使用场景">全局锁使用场景&lt;/h2>
&lt;p>全局锁的典型使用场景是，做&lt;strong>全库逻辑备份&lt;/strong>。也就是把整库每个表都 select 出来存成文本。&lt;/p>
&lt;p>如果是一张一张表分别做备份而不是锁全库，将会出现表之间的数据不一致。需要保证备份的库是在同一个逻辑时间点下。&lt;/p>
&lt;p>官方自带的逻辑备份工具是 mysqldump。在 RR 隔离级别下，当 mysqldump 使用参数 –single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。&lt;/p>
&lt;p>&lt;strong>为什么使用 FTWRL 而不是 mysqldump&lt;/strong>&lt;/p>
&lt;p>前提条件是引擎要支持 RR 隔离级别。MyISAM 就不支持，只能使用 FTWRL。&lt;/p>
&lt;p>&lt;strong>全库只读，为什么不使用 set global readonly=true 的方式&lt;/strong>&lt;/p>
&lt;p>这种方式也能让全库进入只读状态。两个原因不使用：&lt;/p>
&lt;p>1、readonly可能用作其他逻辑&lt;/p>
&lt;p>有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，不建议使用。&lt;/p>
&lt;p>2、在异常处理机制上有差异。&lt;/p>
&lt;p>如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。&lt;/p>
&lt;h1 id="表级锁">表级锁&lt;/h1>
&lt;p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。&lt;/p>
&lt;h2 id="表锁">表锁&lt;/h2>
&lt;p>表锁的语法是&lt;code>lock tables 表名 read/write&lt;/code>。与 FTWRL 类似，可以用 &lt;code>unlock tables&lt;/code> 主动释放锁，也可以在客户端断开的时候自动释放。&lt;/p>
&lt;p>需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。&lt;/p>
&lt;h2 id="元数据锁">元数据锁&lt;/h2>
&lt;p>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。&lt;/p>
&lt;p>在 MySQL 5.5 版本中引入了 MDL，&lt;strong>当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁&lt;/strong>。防止表结构变更导致数据读写有问题。&lt;/p>
&lt;p>1、读锁之间不互斥，可以有多个线程对同一张表增删改查&lt;/p>
&lt;p>2、读写锁之间、写锁之间互斥，用来保证变更表结构操作的安全性。因此，如果多个线程同时修改表结构需要串行；变更表期间不允许对表增删改查。&lt;/p>
&lt;h2 id="如何安全修改表结构">如何安全修改表结构&lt;/h2>
&lt;p>首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。如果此时需改表结构，需要 MDL 写锁会被阻塞。之后所有要新申请 MDL 读锁的请求也会被阻塞，可能导致库的线程被打满。&lt;/p>
&lt;p>在 MySQL 的 information_schema 库的 innodb_trx 表中，可以查到当前执行中的事务。如果要做 DDL 变更的表时有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务（kill可能不管用，因为新的请求可能又来了）。&lt;/p>
&lt;p>阻塞了可以通过 &lt;code>show processlist&lt;/code> 看到大量的Waiting for table metadata lock。真正阻塞的会话的 State 为空，Command 为 Sleep。&lt;/p>
&lt;p>比较理想的机制，在 alter table 语句中设定等待时间，等待时间内拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句。&lt;/p>
&lt;p>MariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。需要确认是否支持该语法。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">ALTER&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">tbl_name&lt;/span> &lt;span style="color:#000">NOWAIT&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">column&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">ALTER&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">tbl_name&lt;/span> &lt;span style="color:#000">WAIT&lt;/span> &lt;span style="color:#000">N&lt;/span> &lt;span style="color:#a90d91">add&lt;/span> &lt;span style="color:#a90d91">column&lt;/span> ... 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>当使用 NOWAIT 关键字时，则在执行ddl语句时，遇到 MDL 锁不进行等待。
当使用 WAIT 关键字时，等待 N&lt;/p>
&lt;p>&lt;strong>Online DDL&lt;/strong>&lt;/p>
&lt;p>过程&lt;/p>
&lt;p>1、拿MDL写锁&lt;/p>
&lt;p>2、降级成MDL读锁&lt;/p>
&lt;p>3、真正做DDL&lt;/p>
&lt;p>4、升级成MDL写锁&lt;/p>
&lt;p>5、释放MDL锁&lt;/p>
&lt;p>1、2、4、5如果没有锁冲突，执行时间非常短。第3步占用了DDL绝大部分时间，这期间这个表可以正常读写数据，是因此称为“Online”。一般在第 1 步会被阻塞。&lt;/p>
&lt;p>第 2 步退化成读锁的目的是为了实现 Online 更新，因为 MDL 读锁不会阻塞增删改操作。&lt;/p>
&lt;p>不直接解锁是为了保护自己，禁止其他线程对这个表同时做 DDL。&lt;/p>
&lt;p>额外说明的是，重建方法都会扫描原表数据和构建临时文件。对于大表来说该操作很消耗 IO 和 CPU 资源。Online DDL 可以考虑在业务低峰期使用，线上服务如果想要更安全的操作的话，建议使用 GitHub 开源的 gh-ost 来操作。&lt;/p>
&lt;h1 id="行锁">行锁&lt;/h1>
&lt;p>MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。&lt;/p>
&lt;h2 id="两阶段锁">两阶段锁&lt;/h2>
&lt;p>&lt;strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。&lt;/strong>&lt;/p>
&lt;p>举例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">事务A&lt;/th>
&lt;th style="text-align:left">事务B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>update t set k=k+1 where id=1;&lt;br>update t set k=k+1 where id=2;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>update t set k=k+2 where id=1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。&lt;/p>
&lt;h2 id="死锁和死锁检测">死锁和死锁检测&lt;/h2>
&lt;p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。&lt;/p>
&lt;p>死锁举例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">事务A&lt;/th>
&lt;th style="text-align:left">事务B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>update t set k=k+1 where id=1;&lt;br>&lt;/td>
&lt;td style="text-align:left">begin;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t set k=k+2 where id=2;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">update t set k=k+1 where id=2;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;td style="text-align:left">update t set k=k+2 where id=1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>解决策略：&lt;/p>
&lt;p>1、设置等待超时，通过参数 innodb_lock_wait_timeout 来设置&lt;/p>
&lt;p>InnnoDB 中该参数默认值为 50s，在线业务无法接受。但设置太短容易误伤简单的锁等待。&lt;/p>
&lt;p>2、发起死锁检测，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑（默认开启）。&lt;/p>
&lt;p>一般采取主动死锁检测。但每个新来的线程被堵住都要判断是否因为自己的加入导致死锁，时间复杂度为 O(n)。需要消耗大量的 CPU 资源。因此可以看到 CPU 利用率很高，但是每秒却执行不了几个事务。&lt;/p>
&lt;p>&lt;strong>那么怎么解决热点行更新导致的性能问题？&lt;/strong>&lt;/p>
&lt;p>1、如果确保业务一定不会出现死锁，可以关闭死锁检测。&lt;/p>
&lt;p>2、控制并发度。比如同一行同时最多只能有 10 个线程在更新，那么死锁的检测成本很低。在数据库接入层（中间件/修改 MySQL 源码）做并发控制，而不是客户端！&lt;/p>
&lt;p>3、将一行记录拆分成多行来减少行冲突，如账户金额，可以拆成多个子账户，金额相加即为总账户金额。（可能会使业务逻辑变复杂）&lt;/p>
&lt;h1 id="间隙锁">间隙锁&lt;/h1>
&lt;p>本节隔离级别无特别说明默认 RR。&lt;/p>
&lt;p>**锁是加在索引上的，这是 InnoDB 的一个基础设定。**所以分析加锁过程就具体分析锁加在哪个索引上。&lt;/p>
&lt;h2 id="幻读的由来">幻读的由来&lt;/h2>
&lt;p>表定义：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t5&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t5&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">0&lt;/span>,&lt;span style="color:#1c01ce">0&lt;/span>,&lt;span style="color:#1c01ce">0&lt;/span>),(&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>),(&lt;span style="color:#1c01ce">15&lt;/span>,&lt;span style="color:#1c01ce">15&lt;/span>,&lt;span style="color:#1c01ce">15&lt;/span>),(&lt;span style="color:#1c01ce">20&lt;/span>,&lt;span style="color:#1c01ce">20&lt;/span>,&lt;span style="color:#1c01ce">20&lt;/span>),(&lt;span style="color:#1c01ce">25&lt;/span>,&lt;span style="color:#1c01ce">25&lt;/span>,&lt;span style="color:#1c01ce">25&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">T1&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where d=5 for update; // Q1&lt;br>result: (5,5,5)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T2&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=5 where id=0;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T3&lt;/td>
&lt;td style="text-align:left">select * from t5 where d=5 for update; // Q2&lt;br>result: (0,0,5), (5,5,5)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T4&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values (1,1,5);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T5&lt;/td>
&lt;td style="text-align:left">select * from t5 where d=5 for update; // Q3&lt;br>result: (0,0,5),(1,1,5),(5,5,5)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T6&lt;/td>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Q3 读到 id=1 这一行的现象，被称为“幻读”。&lt;strong>幻读指一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行。&lt;/strong>&lt;/p>
&lt;p>幻读特别说明：&lt;/p>
&lt;p>1、在 RR 隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此幻读在“当前读”下才会出现。&lt;/p>
&lt;p>2、上面 session B 的修改结果，被 session A 之后的 select 语句用“当前读”看到，不能称为幻读。幻读仅专指“新插入的行”。&lt;/p>
&lt;h2 id="幻读的问题">幻读的问题&lt;/h2>
&lt;p>1、语义的破坏&lt;/p>
&lt;p>Session A 在 T1 时刻声明了“要把所有 d=5 的行锁住，不允许其它事务进行读写操作”。而实际上破坏了 Q1 的加锁声明，语义被破坏。&lt;/p>
&lt;p>2、数据一致性的问题&lt;/p>
&lt;p>&lt;strong>锁的设计是为了保证数据的一致性。不止数据库内部数据状态在同一时刻的一致性，还包含数据和日志在逻辑上的一致性。&lt;/strong>&lt;/p>
&lt;p>数据不一致举例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">T1&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where d=5 for update; // Q1&lt;br>update t5 set d=100 where d=5;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T2&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=5 where id=0;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T3&lt;/td>
&lt;td style="text-align:left">select * from t5 where d=5 for update; // Q2&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T4&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values (1,1,5);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T5&lt;/td>
&lt;td style="text-align:left">select * from t5 where d=5 for update; // Q3&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T6&lt;/td>
&lt;td style="text-align:left">commit;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果按照前面的分析，数据应该是&lt;/p>
&lt;p>T1: (5,5,100)&lt;/p>
&lt;p>T2: (0,5,0)&lt;/p>
&lt;p>T4: (1,1,5)&lt;/p>
&lt;p>但是 binlog 内容是：&lt;/p>
&lt;p>T2 时刻，Session B 事务提交，写入了两条语句；&lt;/p>
&lt;p>T4 时刻，Session C 事务提交，写入了两条语句；&lt;/p>
&lt;p>T6 时刻，Session A 事务提交，写入了 update t set d=100 where d=5 这条语句。&lt;/p>
&lt;p>即：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">5&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span>; &lt;span style="color:#177500">/*(0,0,5)*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>); &lt;span style="color:#177500">/*(1,1,5)*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">100&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">5&lt;/span>;&lt;span style="color:#177500">/*所有d=5的行，d改成100*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>binlog 用作主从同步或者克隆库时，数据为：(0,0,100)、(1,1,100) 和 (5,5,100)。
这样就造成了数据的不一致。&lt;/p>
&lt;p>解决办法自然就是将 &lt;strong>扫描过程中碰到的行都加上写锁&lt;/strong>。即 T1 时刻 Session A 把所有行都加上写锁。这样 T2 时刻 Session B 就被阻塞了，需要等到 T6 时刻 Session A commit 之后才能执行。&lt;/p>
&lt;p>但是此时仍然有问题，对于 Session C 的插入行无法阻塞。&lt;/p>
&lt;p>id 为 1 的行在数据库中是 (1,1,5)&lt;/p>
&lt;p>binlog 内容为：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>); &lt;span style="color:#177500">/*(1,1,5)*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">100&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">5&lt;/span>;&lt;span style="color:#177500">/*所有d=5的行，d改成100*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">5&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span>; &lt;span style="color:#177500">/*(0,0,5)*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>而按照 binlog 的执行顺序是 (1,1,100)。
造成这个问题的原因是给所有行都加上锁时，id=1 这一行还不在所以加不上行锁。&lt;/p>
&lt;h2 id="解决幻读">解决幻读&lt;/h2>
&lt;p>产生幻读的原因是行锁只能锁住行，但是新插入记录，要更新记录之间的“间隙”。因此为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。&lt;/p>
&lt;p>当执行 &lt;code>select * from t where d=5 for update&lt;/code> 时，就不止是给数据库中已有的 6 个记录加上行锁，同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。&lt;/p>
&lt;p>与行锁的冲突间不一样，跟间隙锁存在冲突关系的是“往这个间隙中插入一个记录”这个操作。间隙锁之间都不存在冲突关系。举例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where c=7 lock in share mode;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where c=7 for update;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这两个会话是不会冲突的，即 Session B 不会被阻塞。因为表中并没有 c=7 的数据，两个语句都是加的间隙锁，保证间隙不会插入数据。&lt;/p>
&lt;p>&lt;strong>间隙锁 + 行锁 = next-key&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Gap-Lock是左开右开，next-key lock是左开右闭&lt;/strong>&lt;/p>
&lt;p>&lt;strong>间隙锁在 RR 隔离级别下才会生效。如果把隔离级别设置为 RC 就没有间隙锁了。但同时要解决可能出现的数据和日志不一致问题，需要把 binlog 格式设置为 row。&lt;/strong>&lt;/p>
&lt;p>但间隙锁的出现，会影响并发度，比如带来了死锁的问题。如（分析略）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where id=9 for update;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where id=9 for update;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values (9,9,9);&lt;br>(block)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">insert into t5 values (9,9,9);&lt;br>(error, Deadlock found)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="加锁规则">加锁规则&lt;/h1>
&lt;p>前提：MySQL 后面的版本可能会改变加锁策略，这里的规则只限于截止到现在的最新版本，即 5.x 系列 &amp;lt;=5.7.24，8.0 系列 &amp;lt;=8.0.13&lt;/p>
&lt;p>2个原则+2个优化+1个bug&lt;/p>
&lt;p>原则 1：加锁的基本单位是 next-key lock（前开后闭区间）。&lt;/p>
&lt;p>原则 2：查找过程中访问到的对象才会加锁。&lt;/p>
&lt;p>优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。&lt;/p>
&lt;p>优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。&lt;/p>
&lt;p>一个 bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。&lt;/p>
&lt;p>表：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t5&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t5&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">0&lt;/span>,&lt;span style="color:#1c01ce">0&lt;/span>,&lt;span style="color:#1c01ce">0&lt;/span>),(&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>,&lt;span style="color:#1c01ce">5&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>),(&lt;span style="color:#1c01ce">15&lt;/span>,&lt;span style="color:#1c01ce">15&lt;/span>,&lt;span style="color:#1c01ce">15&lt;/span>),(&lt;span style="color:#1c01ce">20&lt;/span>,&lt;span style="color:#1c01ce">20&lt;/span>,&lt;span style="color:#1c01ce">20&lt;/span>),(&lt;span style="color:#1c01ce">25&lt;/span>,&lt;span style="color:#1c01ce">25&lt;/span>,&lt;span style="color:#1c01ce">25&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="等值查询间隙锁">等值查询间隙锁&lt;/h2>
&lt;p>查询示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>update t5 set d=d+1 where id=7;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(8,8,8);&lt;br>(blocked)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where id=10;&lt;br>(Query OK)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>由于表 t 中没有 id=7 的记录，所以用加锁规则判断：&lt;/p>
&lt;p>1、根据原则 1，加锁单位是 next-key lock，Session A 加锁范围就是 (5,10]；&lt;/p>
&lt;p>2、根据优化 2，这是一个等值查询 (id=7)，而 id=10 不满足查询条件，next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)。&lt;/p>
&lt;p>所以，Session B 要往这个间隙里面插入 id=8 的记录会被锁住，但是 Session C 修改 id=10 这行是可以的。&lt;/p>
&lt;h2 id="非唯一索引等值锁">非唯一索引等值锁&lt;/h2>
&lt;p>查询示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select id from t5 where c=5 lock in share mode;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where id=5;&lt;br>(Query OK)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(7,7,7);&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 要给索引 c 上 c=5 的这一行加上读锁。&lt;/p>
&lt;p>1、根据原则 1，加锁单位是 next-key lock，因此会给 (0,5] 加上 next-key lock。&lt;/p>
&lt;p>2、要注意 c 是普通索引，因此仅访问 c=5 这一条记录是不能马上停下来的，需要向右遍历，查到 c=10 才放弃。根据原则 2，访问到的都要加锁，因此要给 (5,10] 加 next-key lock。&lt;/p>
&lt;p>3、同时这个符合优化 2：等值判断，向右遍历，最后一个值不满足 c=5 这个等值条件，因此退化成间隙锁 (5,10)。&lt;/p>
&lt;p>4、根据原则 2 ，只有访问到的对象才会加锁，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 Session B 的 update 语句可以执行完成。&lt;/p>
&lt;p>Session C 要插入一个 (7,7,7) 的记录，会被 Session A 的间隙锁 (5,10) 锁住。注意，这个例子中 lock in share mode 只锁覆盖索引，但是如果是 for update 就不一样。 执行 for update 时，系统会认为接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。&lt;/p>
&lt;p>这个例子说明，锁是加在索引上的；同时，如果要用 lock in share mode 来给行加读锁避免数据被更新的话，就必须得绕过覆盖索引的优化，在查询字段中加入索引中不存在的字段。比如，将 Session A 的查询语句改成 select d from t where c=5 lock in share mode。&lt;/p>
&lt;h2 id="主键索引范围锁">主键索引范围锁&lt;/h2>
&lt;p>思考，下面两个语句加锁范围：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#a90d91">update&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">&amp;gt;=&lt;/span>&lt;span style="color:#1c01ce">10&lt;/span> &lt;span style="color:#a90d91">and&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">&amp;lt;&lt;/span>&lt;span style="color:#1c01ce">11&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#a90d91">update&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>逻辑上，id 是 int 型，两条查语句肯定是等价的，但是它们的加锁规则不太一样。
查询示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where id&amp;gt;=10 and id&amp;lt;11 for update;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(8,8,8);&lt;br>(Query OK)&lt;br>insert into t5 values(13,13,13);&lt;br>(blocked)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where id=15;&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 会加锁：&lt;/p>
&lt;p>1、开始执行要找到第一个 id=10 的行，本该是 next-key lock(5,10]。 根据优化 1， 主键 id 上的等值条件，退化成行锁，只加了 id=10 这一行的行锁。&lt;/p>
&lt;p>2、范围查找就往后继续找，找到 id=15 这一行停下来，因此需要加 next-key lock(10,15]。&lt;/p>
&lt;p>所以，Session A 锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15]。&lt;/p>
&lt;p>这里需要注意，首次 Session A 定位查找 id=10 的行的时候，是当做等值查询来判断的，而向右扫描到 id=15 的时候，用的是范围查询判断。&lt;/p>
&lt;p>如果 Session A 是 &lt;code>select * from t5 where id=10 for update;&lt;/code> ，那么 Session B 和 Session C 都不会阻塞。&lt;/p>
&lt;h2 id="非唯一索引范围锁">非唯一索引范围锁&lt;/h2>
&lt;p>示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where c&amp;gt;=10 and c&amp;lt;11 for update;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(8,8,8);&lt;br>(blocked)&lt;br>insert into t5 values(13,13,13);&lt;br>(blocked)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where c=15;&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 用字段 c 来判断，加锁规则跟 唯一索引范围锁 唯一的不同是：在第一次用 c=10 定位记录时，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 c 是非唯一索引，没有优化规则不会蜕变为行锁，因此最终加锁为：索引 c 上的 (5,10] 和 (10,15] 这两个 next-key lock。&lt;/p>
&lt;p>Session c 需要扫描到 c=15 才停止扫描，是合理的，因为 InnoDB 要扫到 c=15，才知道不需要继续往后查找。注意：如果是 &lt;code>update t5 set d=d+1 where id=15&lt;/code> 是不阻塞的，因为这是用的主键索引更新没有锁住的索引 c。但如果是 &lt;code>update t5 set c=c+1 where id=15&lt;/code> 仍然是阻塞的，因为更新了锁住的索引 c。&lt;/p>
&lt;h2 id="唯一索引范围锁bug">唯一索引范围锁bug&lt;/h2>
&lt;p>示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where id&amp;gt;10 and id&amp;lt;=15 for update;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where id=20;&lt;br>(blocked)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(16,16,16);&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15]这个 next-key lock，并且因为 id 是唯一键，所以循环判断到 id=15 这一行就应该停止了。&lt;/p>
&lt;p>但是实现上，InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20。而且由于这是个范围扫描，因此索引 id 上的 (15,20]这个 next-key lock 也会被锁上。&lt;/p>
&lt;p>Bug 范围：InnoDB（5.x 系列 &amp;lt;=5.7.24，8.0 系列 &amp;lt;=8.0.13。）【待验证】&lt;/p>
&lt;p>非主键唯一索引 bug 范围：InnoDB （&amp;lt;=8.0.21）【待验证】&lt;/p>
&lt;p>注意 唯一索引 并不一定是 主键索引。&lt;/p>
&lt;h2 id="非唯一索引存在等值">非唯一索引存在等值&lt;/h2>
&lt;p>先在索引 c 上增加一条 c=10 的记录：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t5&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">30&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">30&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>delete from t5 where c=10;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(12,12,12);&lt;br>(blocked)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where c=15;&lt;br>(Query OK)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 在遍历的时候，先访问第一个 c=10 的记录。根据原则 1，这里加的是 (c=5,id=5) 到 (c=10,id=10) 这个 next-key lock。然后，session A 向右查找，直到碰到 (c=15,id=15) 这一行，循环才结束。根据优化 2，这是一个等值查询，向右查找到了不满足条件的行，所以会退化成 (c=10,id=10) 到 (c=15,id=15) 的间隙锁。&lt;/p>
&lt;h2 id="limit加锁">limit加锁&lt;/h2>
&lt;p>接着上面 非唯一索引存在等值 的情况，同样地这里也增加一条 c=10 的记录。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>delete from t5 where c=10 limit2;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(12,12,12);&lt;br>(Query OK)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 的 delete 语句加了 limit 2。其实表 t5 里 c=10 的记录其实只有两条加不加 limit 2，删除的效果是一样的，但是加锁的效果却不同。可以看到Session B 的 insert 语句执行通过了，跟上面案例的结果不同。&lt;/p>
&lt;p>这里 delete 语句明确加了 limit 2 的限制，因此在遍历到 (c=10, id=30) 这一行之后，满足条件的语句已经有两条，循环就结束了。索引 c 上的加锁范围就变成了从（c=5,id=5) 到（c=10,id=30) 这个前开后闭区间。(c=10,id=30）之后的这个间隙并没有在加锁范围里，因此 insert 语句插入 c=12 是可以执行成功的。&lt;/p>
&lt;p>经验：&lt;strong>在删除数据的时候尽量加 limit。不仅可以控制删除数据的条数让操作更安全，还可以减小加锁的范围。&lt;/strong>&lt;/p>
&lt;p>注意：binlog 格式为 statement时，删除语句where中有多个索引并且带limit可能会导致不同数据库之间，所选用的索引不一致而导致选到的数据不一致。&lt;/p>
&lt;h2 id="死锁示例">死锁示例&lt;/h2>
&lt;p>示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select id from t5 where c=10 lock in share mode;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t5 set d=d+1 where c=10;&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">insert into t5 values(8,8,8);&lt;br>(Query OK)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Deadlock found&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>分析：&lt;/p>
&lt;p>1、Session A 启动事务后执行查询语句加 lock in share mode，在索引 c 上加了 next-key lock (5,10] 和间隙锁 (10,15)；&lt;/p>
&lt;p>2、Session B 的 update 语句也要在索引 c 上加 next-key lock (5,10] ，进入锁等待；&lt;/p>
&lt;p>3、Session A 要再插入 (8,8,8) 这一行，被 Session B 的间隙锁（B 的加锁范围和 A 相同）锁住。由于出现了死锁，InnoDB 让 session B 回滚。&lt;/p>
&lt;p>问题：Session B 的锁不是阻塞了吗？为什么还会有死锁？&lt;/p>
&lt;p>Session B 加 next-key lock (5,10] 操作，实际上分成了两步，先是加 (5,10) 的间隙锁，加锁成功；然后加 c=10 的行锁，这时候才被锁住的。（间隙锁之间不冲突，行锁与间隙锁才冲突）&lt;/p>
&lt;h2 id="order加锁">order加锁&lt;/h2>
&lt;p>示例：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where c&amp;gt;=15 and c&amp;lt;=20 order by c desc lock in share mode;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(8,8,8);&lt;br>(blocked)&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(11,11,11);&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>分析：&lt;/p>
&lt;p>1、由于是 order by c desc，第一个要定位的是索引 c 上“最右边的”c=20 的行，所以会加上间隙锁 (20,25) 和 next-key lock (15,20]。&lt;/p>
&lt;p>2、在索引 c 上向左遍历，要扫描到 c=10 才停下来，所以 next-key lock 会加到 (5,10]，这正是阻塞 Session B 的 insert 语句的原因。&lt;/p>
&lt;p>3、扫描过程中，c=20、c=15、c=10 这三行都存在值，由于是 select *，所以会在主键 id 上加三个行锁，c=10 不满足条件就蜕化了。&lt;/p>
&lt;p>所以 Session A 的 select 语句锁的范围就是：&lt;/p>
&lt;p>1、索引 c 上 (5, 25)；&lt;/p>
&lt;p>2、主键索引上 id=15、20 两个行锁。&lt;/p>
&lt;h2 id="insert加锁">insert加锁*&lt;/h2>
&lt;p>表：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t41&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span> &lt;span style="color:#000">AUTO_INCREMENT&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">UNIQUE&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#a90d91">null&lt;/span>, &lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">t42&lt;/span> &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#000">t41&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="insert-select语句">insert select语句&lt;/h3>
&lt;p>insert … select 是很常见的在两个表之间拷贝数据的方法。在可重复读隔离级别下，这个语句会给 select 的表里扫描到的记录和间隙加读锁。不加锁会出现主从不一致。&lt;/p>
&lt;h3 id="insert循环写入">insert循环写入&lt;/h3>
&lt;p>语句1：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t42&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>,&lt;span style="color:#000">d&lt;/span>)  (&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">force&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">desc&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这个语句的加锁范围是表 t41 索引 c 上的 (3,4] 和 (4,supremum] 这两个 next-key lock，以及主键索引上 id=4 这一行。
慢查询日志查到 Rows_examined=1，正好验证了执行这条语句的扫描行数为 1。&lt;/p>
&lt;p>语句2：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t41&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>,&lt;span style="color:#000">d&lt;/span>)  (&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">force&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">desc&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>慢查询日志 Rows_examined 的值是 5。
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; explain insert into t41&lt;span style="color:#000">(&lt;/span>c,d&lt;span style="color:#000">)&lt;/span>  &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">select&lt;/span> c+1, d from t41 force index&lt;span style="color:#000">(&lt;/span>c&lt;span style="color:#000">)&lt;/span> order by c desc limit 1&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | select_type | table | partitions | &lt;span style="color:#a90d91">type&lt;/span>  | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> | INSERT      | t41   | NULL       | ALL   | NULL          | NULL | NULL    | NULL | NULL |     NULL | NULL            |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> | SIMPLE      | t41   | NULL       | index | NULL          | c    | 5       | NULL |    &lt;span style="color:#1c01ce">1&lt;/span> |   100.00 | Using temporary |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">2&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>Extra 字段可以看到“Using temporary”字样，表示这个语句用到了临时表。即执行过程中，需要把表 t 的内容读出来，写入临时表。但 rows 为 1。
可以通过 &lt;code>show status like '%Innodb_rows_read%';&lt;/code> 看看 InnoDB 扫描的行数。&lt;/p>
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show status like &lt;span style="color:#c41a16">&amp;#39;%Innodb_rows_read%&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------------------+---------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Variable_name    | Value   |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------------------+---------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Innodb_rows_read | &lt;span style="color:#1c01ce">1474566&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------------------+---------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">1&lt;/span> row in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.01 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; insert into t41&lt;span style="color:#000">(&lt;/span>c,d&lt;span style="color:#000">)&lt;/span>  &lt;span style="color:#000">(&lt;/span>&lt;span style="color:#a90d91">select&lt;/span> c+1, d from t41 force index&lt;span style="color:#000">(&lt;/span>c&lt;span style="color:#000">)&lt;/span> order by c desc limit 1&lt;span style="color:#000">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Query OK, &lt;span style="color:#1c01ce">1&lt;/span> row affected &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Records: 1  Duplicates: 0  Warnings: &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; show status like &lt;span style="color:#c41a16">&amp;#39;%Innodb_rows_read%&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------------------+---------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Variable_name    | Value   |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------------------+---------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| Innodb_rows_read | &lt;span style="color:#1c01ce">1474570&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------------------+---------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">1&lt;/span> row in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>
&lt;p>可以看到，这个语句执行前后，Innodb_rows_read 的值增加了 4。因为默认临时表是使用 Memory 引擎的，所以这 4 行查的都是表 t41，也就是说对表 t41 做了全表扫描。
执行过程：&lt;/p>
&lt;p>1、创建临时表，表里有两个字段 c 和 d。&lt;/p>
&lt;p>2、按照索引 c 扫描表 t，依次取 c=4、3、2、1，然后回表读到 c 和 d 的值写入临时表。这时，Rows_examined=4。&lt;/p>
&lt;p>3、由于语义里面有 limit 1，所以只取了临时表的第一行，再插入到表 t 中。这时，Rows_examined 的值加 1，变成了 5。&lt;/p>
&lt;p>也就是这个语句会导致在表 t41 上做全表扫描，并且会给索引 c 上的所有间隙都加上共享的 next-key lock。所以，这个语句执行期间，其他事务不能在这个表上插入数据。&lt;/p>
&lt;p>对于一边遍历数据，一边更新数据的情况，如果不使用临时表保存遍历的数据，可能会导致读到刚刚插入的记录，与语义不符。 优化：创建临时表，先插入临时表，再从临时表中取数据。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">create&lt;/span> &lt;span style="color:#a90d91">temporary&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">temp_t&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>,&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>) &lt;span style="color:#000">engine&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">memory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">temp_t&lt;/span>  (&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">+&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span>, &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">force&lt;/span> &lt;span style="color:#a90d91">index&lt;/span>(&lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">order&lt;/span> &lt;span style="color:#a90d91">by&lt;/span> &lt;span style="color:#a90d91">c&lt;/span> &lt;span style="color:#a90d91">desc&lt;/span> &lt;span style="color:#a90d91">limit&lt;/span> &lt;span style="color:#1c01ce">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">*&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">temp_t&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">drop&lt;/span> &lt;span style="color:#a90d91">table&lt;/span> &lt;span style="color:#000">temp_t&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>如果 insert 和 select 的对象是同一个表，则有可能会造成循环写入。这种情况下需要引入用户临时表来做优化。&lt;/p>
&lt;h3 id="insert冲突加锁">insert冲突加锁&lt;/h3>
&lt;p>举例（RR 下）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">insert into t41 values(10,10,10);&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>insert into t41 values(11,10,10);&lt;br>(Duplicate entry '10' for key 'c')&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t41 values(12,9,9);&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 执行的 insert 语句，发生唯一键冲突时，并不只是简单地报错返回，还在冲突的索引上加了锁。一个 next-key lock 就是由它右边界的值定义的。这时 Session A 持有索引 c 上的 (5,10] 共享 next-key lock（读锁）。&lt;/p>
&lt;p>&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html">官方文档&lt;/a> 描述认为如果冲突的是主键索引就加记录锁，唯一索引才加 next-key lock。但实际上，这两类索引冲突加的都是 next-key lock。&lt;/p>
&lt;p>按照提交的信息看这是mysql bug，已经修正。 （mysql 5.7.33）primary key 是不会block 的，唯一索引还是加的 next-key lock。&lt;/p>
&lt;p>&lt;strong>唯一键冲突导致死锁场景&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;th style="text-align:left">Session C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">T1&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>insert into t41 values(null,5,5);&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T2&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t41 values(null,5,5);&lt;/td>
&lt;td style="text-align:left">insert into t41 values(null,5,5);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">T3&lt;/td>
&lt;td style="text-align:left">rollback;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">(Deadlock found)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这个死锁产生的逻辑：&lt;/p>
&lt;p>1、在 T1 时刻，启动 Session A，并执行 insert 语句，此时在索引 c 的 c=5 上加了记录锁。注意，这个索引是唯一索引，因此退化为记录锁。&lt;/p>
&lt;p>2、在 T2 时刻，session B 要执行相同的 insert 语句，发现了唯一键冲突，加上读锁；同样地，Session C 也在索引 c 上，c=5 这一个记录上，加了读锁。&lt;/p>
&lt;p>3、T3 时刻，Session A 回滚。这时 Session B 和 Session C 都试图继续执行插入操作，都要加上写锁。两个 session 都要等待对方的行锁，所以就出现了死锁。（B C有一个会被执行，另一个被回滚）&lt;/p>
&lt;p>insert 语句如果出现唯一键冲突，会在冲突的唯一值上加共享的 next-key lock(S 锁)。因此，碰到由于唯一键约束导致报错后，要尽快提交或回滚事务，避免加锁时间过长。&lt;/p>
&lt;h3 id="insert-on-duplicate">insert on duplicate&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t41&lt;/span> &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>,&lt;span style="color:#1c01ce">10&lt;/span>) &lt;span style="color:#a90d91">on&lt;/span> &lt;span style="color:#000">duplicate&lt;/span> &lt;span style="color:#a90d91">key&lt;/span> &lt;span style="color:#a90d91">update&lt;/span> &lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">100&lt;/span>; 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>会给索引 c 上 (5,10] 加一个排他的 next-key lock（写锁）。
insert into … on duplicate key update 这个语义的逻辑是，插入一行数据，如果碰到唯一键约束，就执行后面的更新语句。如果有多个列违反了唯一性约束，就会按照索引的顺序，修改跟第一个索引冲突的行。&lt;/p>
&lt;p>执行语句的 affected rows 返回的如果是 2 很容易造成误解。实际真正更新的只有一行，只是在代码实现上，insert 和 update 都认为成功了，update 计数加了 1， insert 计数也加了 1。&lt;/p>
&lt;h1 id="最佳实践">最佳实践&lt;/h1>
&lt;h2 id="如何查看死锁">如何查看死锁&lt;/h2>
&lt;p>执行 &lt;code>show engine innodb status&lt;/code> 命令会输出很多信息，有一节 LATESTDETECTED DEADLOCK，就是记录的最后一次死锁信息。&lt;/p>
&lt;p>结果分成三部分：&lt;/p>
&lt;p>(1) TRANSACTION，是第一个事务的信息；&lt;/p>
&lt;p>(2) TRANSACTION，是第二个事务的信息；&lt;/p>
&lt;p>WE ROLL BACK TRANSACTION (1)，是最终的处理结果，如回滚了哪一个事务。&lt;/p>
&lt;p>（更多信息略）&lt;/p>
&lt;p>得到两个结论：&lt;/p>
&lt;p>1、由于锁是一个个加的，要避免死锁，对同一组资源，要按照尽量相同的顺序访问；&lt;/p>
&lt;p>2、会回滚成本更小的事务。如在发生死锁的时刻，for update 这条语句占有的资源更多，回滚成本更大，所以 InnoDB 选择了回滚成本更小的 lock in share mode 语句。&lt;/p>
&lt;h2 id="如何查看锁等待">如何查看锁等待&lt;/h2>
&lt;p>数据库记录为本文中的 t5。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t5 where id&amp;gt;10 and id&amp;lt;15 for update;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">delete from t5 where id=10;&lt;br>(Query OK)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t5 values(10,10,10);&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>通过 &lt;code>show engine innodb status&lt;/code> 查看信息，锁信息是在这个命令输出结果的 TRANSACTIONS 这一节&lt;/p>
&lt;p>&lt;img src="../imgs/lock_20220409_1.png" alt="lock_20220409_1.png">&lt;/p>
&lt;p>查看信息可以知道这是因为间隙锁阻塞了，原来的两个间隙 (5,10)、(10,15）变成了一个 (5,15)。&lt;/p>
&lt;p>&lt;strong>间隙是随着数据的改变而改变。&lt;/strong>&lt;/p>
&lt;h2 id="update示例">update示例&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select c from t5 where c&amp;gt;5 lock in share mode;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t set c=1 where c=5;&lt;br>(Query OK)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t set c=5 where c=1;&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 的加锁范围是索引 c 上的 (5,10]、(10,15]、(15,20]、(20,25]和 (25,supremum]。注意：根据 c&amp;gt;5 查到的第一个记录是 c=10，因此不会加 (0,5]这个 next-key lock。&lt;/p>
&lt;p>Session B 的第一个 update 语句，要把 c=5 改成 c=1，可以理解为两步：&lt;/p>
&lt;p>1、插入 (c=1, id=5) 这个记录；&lt;/p>
&lt;p>2、删除 (c=5, id=5) 这个记录。&lt;/p>
&lt;p>索引 c 上 (5,10) 间隙是由这个间隙右边的记录，也就是 c=10 定义的。所以通过这个操作，Session A 的加锁范围就变成了 (1,10]、(10,15]、(15,20]、(20,25]和 (25,supremum]。&lt;/p>
&lt;p>接下来 Session B 要执行 update t set c = 5 where c = 1 一样地可以拆成两步：&lt;/p>
&lt;p>1、插入 (c=5, id=5) 这个记录；&lt;/p>
&lt;p>2、删除 (c=1, id=5) 这个记录。&lt;/p>
&lt;p>第一步试图在已经加了间隙锁的 (1,10) 中插入数据就被堵住了。&lt;/p>
&lt;p>&lt;strong>这个例子的间隙也是随着数据的改变而改变。&lt;/strong>&lt;/p>
&lt;h1 id="faq">FAQ&lt;/h1>
&lt;h2 id="备份时ddl会怎么样">备份时DDL会怎么样&lt;/h2>
&lt;p>问题：当备库用 mysqldump 工具 –single-transaction 做逻辑备份的时候，如果从主库的 binlog 传来一个 DDL 语句会怎么样？&lt;/p>
&lt;p>备份过程关键语句：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Q1:SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Q2:START TRANSACTION  WITH CONSISTENT SNAPSHOT；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/* other tables */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Q3:SAVEPOINT sp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/* 时刻 &lt;span style="color:#1c01ce">1&lt;/span> */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Q4:show create table &lt;span style="color:#c41a16">`&lt;/span>t1&lt;span style="color:#c41a16">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/* 时刻 &lt;span style="color:#1c01ce">2&lt;/span> */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Q5:SELECT * FROM &lt;span style="color:#c41a16">`&lt;/span>t1&lt;span style="color:#c41a16">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/* 时刻 &lt;span style="color:#1c01ce">3&lt;/span> */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Q6:ROLLBACK TO SAVEPOINT sp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/* 时刻 &lt;span style="color:#1c01ce">4&lt;/span> */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/* other tables */
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1)；
启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；&lt;/p>
&lt;p>设置一个保存点，这个很重要（Q3）；&lt;/p>
&lt;p>show create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5），回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6）。当然这部分属于“超纲”，上文正文里面都没提到。&lt;/p>
&lt;p>DDL 从主库传过来的时间按照效果不同，定义了四个时刻。题目设定为小表，假定到达后，如果开始执行，则很快能够执行完成。&lt;/p>
&lt;p>参考答案如下：&lt;/p>
&lt;p>1、如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构。&lt;/p>
&lt;p>2、如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；&lt;/p>
&lt;p>3、如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。&lt;/p>
&lt;p>4、从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 前的表结构。&lt;/p>
&lt;p>总结：&lt;/p>
&lt;p>如果 mysqldump 备份的是整个 schema，某个小表t1只是该schema上其中有一张表&lt;/p>
&lt;p>情况1：&lt;/p>
&lt;p>master上对小表 t1 的 DDL 传输到 slave 去应用的时刻，mysqldump 已经备份完了t1表的数据，此时slave 同步正常，不会有问题。&lt;/p>
&lt;p>情况2：&lt;/p>
&lt;p>master上对小表 t1 的 DDL 传输到slave去应用的时刻，mysqldump 正在备份t1表的数据,此时会发生MDL 锁，从库上t1表的所有操作都会Hang 住。&lt;/p>
&lt;p>情况3：&lt;/p>
&lt;p>master 上对小表 t1 的 DDL 传输到slave去应用的时刻，mysqldump 还没对t1表进行备份，该DDL会在slave的t1表应用成功，但是当导出到t1表的时候会报“ERROR 1412 (HY000): Table definition has changed, please retry transaction” 错误，导致导出失败！&lt;/p>
&lt;p>&lt;strong>在备份期间，备份线程 mysqldump 用 RR ，而业务线程用的是 RC。同时存在两种事务隔离级别会不会有问题？&lt;/strong>&lt;/p>
&lt;h2 id="批量删除数据">批量删除数据&lt;/h2>
&lt;p>删除一个表中的前 10000 条数据，有 3 种方法：&lt;/p>
&lt;p>1、直接执行 &lt;code>delete from t limit 10000&lt;/code>&lt;/p>
&lt;p>2、在一个连接中循环执行 20 次 &lt;code>delete from t limit 500&lt;/code>&lt;/p>
&lt;p>3、在 20 个连接中同时执行 &lt;code>delete from t limit 500&lt;/code>&lt;/p>
&lt;p>答案：&lt;/p>
&lt;p>第 2 种方式相对较好。&lt;/p>
&lt;p>第 1 种方式单个语句占用时间长，持有锁时间长，大事务还会导致主从延迟。&lt;/p>
&lt;p>第 3 种方式会人为造成锁冲突。&lt;/p>
&lt;p>或者采取用某种条件将 10000 行数据天然分开，如主键id或业务条件（结合第3种）&lt;/p>
&lt;h2 id="空表是否有间隙">空表是否有间隙&lt;/h2>
&lt;p>一个空表就只有一个间隙。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">create table t7(id int primary key)engine=innodb;&lt;br>begin;&lt;br>select * from t7 where id&amp;gt;1 for update;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">insert into t7 values(2);&lt;br>(blocked)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">show engine innodb status;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Session A 加锁的范围就是 next-key lock (-∞, supremum]。&lt;/p>
&lt;p>&lt;img src="../imgs/lock_20220409_2.png" alt="lock_20220409_2.png">&lt;/p></description></item><item><title>Docs: 06.事务隔离</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/06.%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/06.%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</guid><description>
&lt;h1 id="背景">背景&lt;/h1>
&lt;p>MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。&lt;/p>
&lt;h1 id="事务特性">&lt;strong>事务特性&lt;/strong>&lt;/h1>
&lt;p>ACID（Atomicity、Consistency、Isolation、Durability）&lt;/p>
&lt;p>原子性:满足原子操作单元,对数据的操作,要么全部执行,要么全部失败。&lt;/p>
&lt;p>一致性:事务开始和完成,数据都必须保持一致,&lt;/p>
&lt;p>隔离性:事务之间是相互独立的,中间状态对外不可见。&lt;/p>
&lt;p>持久性:数据的修改是永久的。&lt;/p>
&lt;h1 id="事务隔离级别">事务隔离级别&lt;/h1>
&lt;h2 id="事务并发问题">事务并发问题&lt;/h2>
&lt;p>当数据库上有多个事务同时执行的时候，就可能出现下列问题：&lt;/p>
&lt;p>1、脏读（dirty read）&lt;/p>
&lt;p>A事务还未提交,B事务就读到了A事务的结果。(&lt;strong>破坏了隔离性&lt;/strong>)&lt;/p>
&lt;p>2、不可重复读（non-repeatable read）&lt;/p>
&lt;p>A事务在本次事务中,对自己未操作过的数据,进行了多次读取,结果出现了不一致或记录不存在的情况（&lt;strong>破坏了一致性&lt;/strong>，update和delete）&lt;/p>
&lt;p>3、幻读（phantom read）&lt;/p>
&lt;p>A事务在本次事务中，对自己未操作过的数据，进行了多次读取，第一次读取时记录不存在，第二次读取时却出现记录&lt;/p>
&lt;p>为了解决这些问题，就有了“隔离级别”的概念。&lt;/p>
&lt;h2 id="隔离级别">隔离级别&lt;/h2>
&lt;p>隔离级别越高，效率就会越低。因此需要在二者之间寻找一个平衡点。&lt;/p>
&lt;p>SQL 标准的事务隔离级别包括：&lt;/p>
&lt;p>1、读未提交（read uncommitted）&lt;/p>
&lt;p>一个事务还没提交时，它做的变更就能被别的事务看到&lt;/p>
&lt;p>2、读已提交（read committed）&lt;/p>
&lt;p>一个事务提交之后，它做的变更才会被其他事务看到&lt;/p>
&lt;p>3、可重复读（repeatable read）&lt;/p>
&lt;p>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的&lt;/p>
&lt;p>4、串行化（serializable ）&lt;/p>
&lt;p>对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。&lt;/p>
&lt;p>注意：这四个级别只是一个标准，各个数据库厂商，并不是完全按照这个标准来做的。&lt;/p>
&lt;h2 id="案例-不同隔离级别下读">案例：不同隔离级别下读&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">事务A&lt;/th>
&lt;th style="text-align:left">事务B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">启动事务，&lt;br>查询得到值 1&lt;/td>
&lt;td style="text-align:left">启动事务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">查询得到值 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">将值 1 改成 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">查询得到值 V1&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">提交事务B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">查询得到值 V2&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">提交事务A&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">查询得到值 V3&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>针对这个案例，不同隔离级别会有不同的返回结果：&lt;/p>
&lt;p>&lt;strong>读未提交&lt;/strong>&lt;/p>
&lt;p>虽然事务B还没有提交，但是事务A可以看到，V1 是 2，V2、V3都是2。&lt;/p>
&lt;p>&lt;strong>读已提交&lt;/strong>&lt;/p>
&lt;p>事务A不可以看到事务B未提交的数据，因此 V1 是 1。事务B提交后事务A可以看到，因此 V2 是 2，V3 也是 2。&lt;/p>
&lt;p>&lt;strong>可重复读&lt;/strong>&lt;/p>
&lt;p>V1 是 1，因为事务A在执行期间看到的数据前后必须是一致的，所以 V2 是 1，提交之后可见其它事务提交的数据，所以 V3 是 2。&lt;/p>
&lt;p>&lt;strong>串行化&lt;/strong>&lt;/p>
&lt;p>事务B执行“将1改成2”时会被锁住，直到事务A提交后，事务B才可以继续执行。所以 V1、V2 是 1，V3 是 2。&lt;/p>
&lt;h2 id="db默认级别">DB默认级别&lt;/h2>
&lt;p>大部分数据库的默认隔离级别是“读已提交”，如 Oracle。&lt;/p>
&lt;p>而MySQL 默认隔离级别为“可重复读”。&lt;/p>
&lt;h1 id="事务实现-innodb">事务实现(InnoDB)&lt;/h1>
&lt;p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。&lt;/p>
&lt;p>在“可重复读”隔离级别下，视图是在事务启动时创建的，整个事务存在期间都用这个视图。&lt;/p>
&lt;p>在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。&lt;/p>
&lt;p>这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；&lt;/p>
&lt;p>而“串行化”隔离级别下直接用加锁的方式来避免并行访问。&lt;/p>
&lt;h2 id="锁机制">锁机制&lt;/h2>
&lt;p>阻止其他事务对数据进行操作,各个隔离级别主要体现在读取数据时加的锁和释放时机。&lt;/p>
&lt;p>RU&lt;/p>
&lt;p>事务读取的时候,不加锁&lt;/p>
&lt;p>RC&lt;/p>
&lt;p>事务读取的时候加行级共享锁(读到才加锁),一旦读完,立刻释放(并不是事务结束)。&lt;/p>
&lt;p>RR&lt;/p>
&lt;p>事务读取时加行级共享锁,直到事务结束才会释放。&lt;/p>
&lt;p>SE&lt;/p>
&lt;p>事务读取时加表级共享锁,直到事务结束时,才会释放。&lt;/p>
&lt;p>其他还有一些不同,主要就这些。&lt;/p>
&lt;h2 id="mvcc机制">MVCC机制&lt;/h2>
&lt;p>生成一个数据快照,并用这个快照来提供一定级别的一致性的读取,也成为了多版本数据控制。&lt;/p>
&lt;p>实际就是[CAS版本控制』和『读写分离』的思想。主要作用于 RC 和 RR 级别。&lt;/p>
&lt;h1 id="mvcc">MVCC&lt;/h1>
&lt;h2 id="视图">视图&lt;/h2>
&lt;p>在 MySQL 中，有两个“视图”概念：&lt;/p>
&lt;p>1、一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。&lt;/p>
&lt;p>2、另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。&lt;/p>
&lt;p>它没有物理结构，作用是事务执行期间用来定义“我能看到什么数据”。&lt;/p>
&lt;h2 id="快照">快照&lt;/h2>
&lt;p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。&lt;/p>
&lt;p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。&lt;/p>
&lt;p>而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。&lt;/p>
&lt;p>也就是说，数据表中的一行记录，其实可能有多个版本 (row)，每个版本有自己的 row trx_id。&lt;/p>
&lt;p>如下图就是一个记录被多个事务连续更新后的状态。&lt;/p>
&lt;p>行状态变更图&lt;/p>
&lt;p>&lt;img src="../imgs/transaction_20220409_1.png" alt="transaction_20220409_1.png">&lt;/p>
&lt;p>上图中的三个虚线箭头，就是 undo log；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 依次执行 U3、U2 算出来。&lt;/p>
&lt;h2 id="一致性视图">一致性视图&lt;/h2>
&lt;p>按照可重复读的定义，一个事务启动时，能够看到所有已经提交的事务结果。但是之后这个事务的执行期间，其他事务的更新对它不可见。&lt;/p>
&lt;p>在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。&lt;strong>“活跃”指的就是，启动了但还没提交&lt;/strong>。&lt;/p>
&lt;p>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。&lt;/p>
&lt;p>这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）&lt;/p>
&lt;p>而数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到的。&lt;/p>
&lt;p>视图数据把所有的 row trx_id 分成了几种不同的情况。&lt;/p>
&lt;p>&lt;img src="../imgs/transaction_20220409_2.png" alt="transaction_20220409_2.png">&lt;/p>
&lt;p>[数据版本可见性规则]&lt;/p>
&lt;p>对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：&lt;/p>
&lt;p>1、如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；&lt;/p>
&lt;p>2、如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；&lt;/p>
&lt;p>3、如果落在黄色部分，那就包括两种情况&lt;/p>
&lt;p>a、若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；&lt;/p>
&lt;p>b、若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。（注意上面说的“活跃”：启动了但还没提交）&lt;/p>
&lt;p>所以InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。&lt;/p>
&lt;p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：&lt;/p>
&lt;p>&lt;strong>1、版本未提交，不可见；&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2、版本已提交，但是是在视图创建后提交的，不可见；&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3、版本已提交，而且是在视图创建前提交的，可见。&lt;/strong>&lt;/p>
&lt;p>换言之 一致性读 下：&lt;/p>
&lt;p>1、对于可重复读，查询只承认在事务启动前就已经提交完成的数据；&lt;/p>
&lt;p>2、对于读提交，查询只承认在语句启动前就已经提交完成的数据。&lt;/p>
&lt;p>&lt;strong>而当前读，总是读取已经提交完成的最新版本。&lt;/strong>&lt;/p>
&lt;h2 id="当前读">当前读&lt;/h2>
&lt;p>&lt;strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）&lt;/strong>&lt;/p>
&lt;p>除了 update 语句外，select 语句如果加锁（lock in share mode 或 for update），也是当前读。如：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">lock&lt;/span> &lt;span style="color:#a90d91">in&lt;/span> &lt;span style="color:#a90d91">share&lt;/span> &lt;span style="color:#a90d91">mode&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">select&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#a90d91">from&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">where&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">1&lt;/span> &lt;span style="color:#a90d91">for&lt;/span> &lt;span style="color:#a90d91">update&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="mvcc延伸">MVCC延伸&lt;/h2>
&lt;p>表结构变更（DDL）为什么不支持“可重复读”？这是因为表结构没有对应的行数据，也没有 row trx_id，因此只能遵循当前读的逻辑。&lt;/p>
&lt;p>MySQL 8.0 已经可以把表结构放在 InnoDB 字典里了，也许以后会支持表结构的可重复读。&lt;/p>
&lt;h1 id="案例">案例&lt;/h1>
&lt;h2 id="无法更新数据">无法更新数据&lt;/h2>
&lt;p>事务隔离级别为 RR。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">CREATE&lt;/span> &lt;span style="color:#a90d91">TABLE&lt;/span> &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">NOT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#000">`&lt;/span>&lt;span style="color:#a90d91">c&lt;/span>&lt;span style="color:#000">`&lt;/span> &lt;span style="color:#a90d91">int&lt;/span>(&lt;span style="color:#1c01ce">11&lt;/span>) &lt;span style="color:#a90d91">DEFAULT&lt;/span> &lt;span style="color:#a90d91">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>  &lt;span style="color:#a90d91">PRIMARY&lt;/span> &lt;span style="color:#a90d91">KEY&lt;/span> (&lt;span style="color:#000">`&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#000">ENGINE&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#000">InnoDB&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">insert&lt;/span> &lt;span style="color:#a90d91">into&lt;/span> &lt;span style="color:#000">t&lt;/span>(&lt;span style="color:#000">id&lt;/span>, &lt;span style="color:#a90d91">c&lt;/span>) &lt;span style="color:#a90d91">values&lt;/span>(&lt;span style="color:#1c01ce">1&lt;/span>,&lt;span style="color:#1c01ce">1&lt;/span>),(&lt;span style="color:#1c01ce">2&lt;/span>,&lt;span style="color:#1c01ce">2&lt;/span>),(&lt;span style="color:#1c01ce">3&lt;/span>,&lt;span style="color:#1c01ce">3&lt;/span>),(&lt;span style="color:#1c01ce">4&lt;/span>,&lt;span style="color:#1c01ce">4&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>更新数据：0 rows
&lt;style>
.highlight {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 130%;
}
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
&lt;/style>
&lt;details class="code-collapse">
&lt;summary>Expand/Collapse Code Block&lt;/summary>
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql&amp;gt; begin;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Query OK, &lt;span style="color:#1c01ce">0&lt;/span> rows affected &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | c    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> |    &lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> |    &lt;span style="color:#1c01ce">2&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">3&lt;/span> |    &lt;span style="color:#1c01ce">3&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> |    &lt;span style="color:#1c01ce">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">4&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; update t &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span> where &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000">=&lt;/span>c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Query OK, &lt;span style="color:#1c01ce">0&lt;/span> rows affected &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rows matched: 0  Changed: 0  Warnings: &lt;span style="color:#1c01ce">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt; &lt;span style="color:#a90d91">select&lt;/span> * from t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| id | c    |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">1&lt;/span> |    &lt;span style="color:#1c01ce">1&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">2&lt;/span> |    &lt;span style="color:#1c01ce">2&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">3&lt;/span> |    &lt;span style="color:#1c01ce">3&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|  &lt;span style="color:#1c01ce">4&lt;/span> |    &lt;span style="color:#1c01ce">4&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+----+------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1c01ce">4&lt;/span> rows in &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">(&lt;/span>0.00 sec&lt;span style="color:#000">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/details>
&lt;br/>&lt;/p>
&lt;p>问题：模拟该情况，并说明原理。
答案1：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t set c=c+1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">update t set c=0 where id=c;&lt;br>select * from t;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>答案2：（类似答案1）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Session A&lt;/th>
&lt;th style="text-align:left">Session B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">begin;&lt;br>select * from t;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">begin;&lt;br>select * from t;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">update t set c=c+1;&lt;br>commit;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">update t set c=0 where id=c;&lt;br>select * from t;&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="实战操作">实战操作&lt;/h1>
&lt;h2 id="事务启动方式">事务启动方式&lt;/h2>
&lt;p>显示启动事务&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>begin; &lt;span style="color:#177500"># 或 start transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rollback;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>隐式启动事务
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 取消线程的自动提交，直到主动执行 commit 或 rollback&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#000">autocommit&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#1c01ce">0&lt;/span> &lt;span style="color:#177500"># 建议设置为 1，显示启动事务&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>&lt;/p>
&lt;p>注意：&lt;/p>
&lt;p>begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。&lt;/p>
&lt;p>第一种启动方式，一致性视图是在执行第一个快照读语句时创建的；&lt;/p>
&lt;p>第二种启动方式，一致性视图是在执行 start transaction with consistent snapshot 时创建的。&lt;/p>
&lt;p>额外说明：&lt;/p>
&lt;p>“start transaction with consistent snapshot; ”的意思是从这个语句开始，创建一个持续整个事务的一致性快照。所以，在 RC 隔离级别下，这个用法就没意义了，等效于普通的 start transaction。&lt;/p>
&lt;p>因为 RC 级别下，事务开启后每一个语句执行前都会重新计算一个新视图，用这种方式解决脏读，但是有不可重复读的问题。和 RR 级别下创建视图和使用视图不一样。&lt;/p>
&lt;h1 id="faq">FAQ&lt;/h1>
&lt;h2 id="避免长事务影响">避免长事务影响&lt;/h2>
&lt;p>从应用开发端和数据库端来看：&lt;/p>
&lt;h3 id="应用开发端">应用开发端&lt;/h3>
&lt;p>1、确认是否使用了 set_autocommit=0。&lt;/p>
&lt;p>可以通过开启 general_log，查询日志开启。（将其值改为 1）&lt;/p>
&lt;p>方法一： 　&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 设置路径 　　&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt;set global &lt;span style="color:#000">general_log_file&lt;/span>&lt;span style="color:#000">=&lt;/span>&lt;span style="color:#c41a16">&amp;#39;/tmp/general.lg&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># 开启general log模式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt;set global &lt;span style="color:#000">general_log&lt;/span>&lt;span style="color:#000">=&lt;/span>on;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql&amp;gt;set global &lt;span style="color:#000">general_log&lt;/span>&lt;span style="color:#000">=&lt;/span>off;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>关闭general log模式 命令行设置即可,无需重启 在general log模式开启过程中，所有对数据库的操作都将被记录 general.log 文件
方法二：&lt;/p>
&lt;p>也可以将日志记录在表中 set global log_output='table' 运行后,可以在mysql数据库下查找 general_log 表&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">#&lt;/span> &lt;span style="color:#000">二、查询日志关闭&lt;/span> &lt;span style="color:#000">查看是否是开启状态：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">show&lt;/span> &lt;span style="color:#a90d91">global&lt;/span> &lt;span style="color:#000">variables&lt;/span> &lt;span style="color:#a90d91">like&lt;/span> &lt;span style="color:#c41a16">&amp;#39;%general%&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000">&amp;gt;&lt;/span> &lt;span style="color:#a90d91">set&lt;/span> &lt;span style="color:#a90d91">global&lt;/span> &lt;span style="color:#000">general_log&lt;/span> &lt;span style="color:#000">=&lt;/span> &lt;span style="color:#a90d91">off&lt;/span>; &lt;span style="color:#000">//&lt;/span> &lt;span style="color:#000">关闭查询日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>2、确实是否有不必要的只读事务&lt;/p>
&lt;p>有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这种只读事务可以去掉。&lt;/p>
&lt;p>3、控制每个语句执行的最长时间&lt;/p>
&lt;p>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，避免单个语句意外执行太长时间。&lt;/p>
&lt;h3 id="数据库端">数据库端&lt;/h3>
&lt;p>1、监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill&lt;/p>
&lt;p>2、Percona 的 pt-kill 这个工具不错，推荐使用&lt;/p>
&lt;p>3、在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；&lt;/p>
&lt;p>4、如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。&lt;/p>
&lt;p>innodb_undo_tablespaces 是控制 undo 是否开启独立的表空间的参数。&lt;/p>
&lt;p>为0表示：undo使用系统表空间，即ibdata1&lt;/p>
&lt;p>不为0表示：使用独立的表空间，一般名称为 undo001 undo002，存放地址的配置项为：innodb_undo_directory 一般innodb_undo_tablespaces 默认配置为0，innodb_undo_directory默认配置为当前数据目录&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://github.com/Yhzhtk/note/issues/42">https://github.com/Yhzhtk/note/issues/42&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://juejin.im/post/6844903919387148296">https://juejin.im/post/6844903919387148296&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">https://tech.meituan.com/2014/08/20/innodb-lock.html&lt;/a>&lt;/p></description></item><item><title>Docs: MySQL技术内幕-InnoDB</title><link>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-InnoDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/30.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-InnoDB/</guid><description>
&lt;h1 id="体系结构与存储引擎">体系结构与存储引擎&lt;/h1>
&lt;h2 id="定义数据库与实例">定义数据库与实例&lt;/h2>
&lt;p>数据库：物理操作系统文件或其他形式文件类型的集合。&lt;/p>
&lt;p>实例：MySQL数据库由后台线程以及一个共享内存区组成&lt;/p>
&lt;p>MySQL被设计为一个&lt;strong>单进程多线程&lt;/strong>架构的数据库，与SQL Server比较类似。而Oracle是&lt;strong>多进程&lt;/strong>的架构。&lt;/p>
&lt;p>查看MySQL实例启动时，在哪些位置查找配置文件：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mysql --help | grep my.cnf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可以看出，是按/etc/my.cnf -&amp;gt; /etc/mysql/my.cnf -&amp;gt; /url/local/mysql/etc/my.cnf -&amp;gt; ~/.my.cnf 的顺序读取配置文件，以最后读取到的配置文件为准。&lt;/p>
&lt;h1 id="innodb存储引擎">InnoDB存储引擎&lt;/h1>
&lt;h2 id="innodb体系架构">InnoDB体系架构&lt;/h2>
&lt;p>内存池负责工作：&lt;/p>
&lt;p>1、维护所有进程/线程需要访问的多个内部数据结构&lt;/p>
&lt;p>2、缓冲磁盘上的数据，方便快速读取，&lt;strong>同时对磁盘文件的数据修改之前在这里缓冲&lt;/strong>&lt;/p>
&lt;p>3、重做日志（redo log）缓冲&lt;/p>
&lt;p>后台线程的作用：&lt;/p>
&lt;p>1、负责刷新内存池中的数据，保证缓冲池中的内存缓存的是最近的数据&lt;/p>
&lt;p>2、将已修改的数据文件刷新到磁盘文件，同时保证在数据库发生异常的情况下InnoDB能恢复到正常运行状态&lt;/p>
&lt;h3 id="后台线程">后台线程&lt;/h3>
&lt;p>1、Master Thread&lt;/p>
&lt;p>（核心线程）负责将缓冲池中的数据异步刷新到磁盘，保证数据一致性，包括脏页的刷新、合并插入缓冲、UNDO页的回收等&lt;/p>
&lt;p>2、IO Thread&lt;/p>
&lt;p>使用大量异步线程处理写IO请求。write/read/insert buffer/log IO thread&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>SHOW VARIABLES LIKE &lt;span style="color:#c41a16">&amp;#39;innodb_version&amp;#39;&lt;/span>&lt;span style="color:#c41a16">\G&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SHOW VARIBALES LIKE &lt;span style="color:#c41a16">&amp;#39;innodb_%io_threads&amp;#39;&lt;/span>&lt;span style="color:#c41a16">\G&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>可以通过命令&lt;strong>SHOW ENGINE INNODB STATUS&lt;/strong>观察InnoDB的IO Thread。
3、Purge Thread&lt;/p>
&lt;p>事务被提交后，其所使用的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配的undo页。&lt;/p>
&lt;p>4、Page Cleaner Thread&lt;/p>
&lt;p>作用：将之前版本中脏页的刷新操作都放入到单独的线程中来完成。目的：减轻原Master Thread的工作及对于用户查询线程的阻塞，进一步提高性能。&lt;/p>
&lt;h3 id="内存">内存&lt;/h3>
&lt;h4 id="1-缓冲池">1、缓冲池&lt;/h4>
&lt;p>缓冲池缓存的数据页类型有：索引页、数据页、undo页、插入缓冲（insert buffer）、自适应哈希索引（adaptive hash index）、InnoDB存储的锁信息（lock info）、数据字典信息（data dictionary）等。&lt;/p>
&lt;p>缓冲池实例数（默认1，可配置）：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>SHOW VARIABLES LIKE &lt;span style="color:#c41a16">&amp;#39;innodb_buffer_pool_instances&amp;#39;&lt;/span>&lt;span style="color:#c41a16">\G&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h4 id="2-lru-free-flush">2、LRU、Free、Flush&lt;/h4>
&lt;p>LRU加入了midpoint位置，新读取到的页，虽然是最新访问的页，但并不是直接放入到LRU列表的首部，而是放入到LRU列表的midpoint位置。该算法称为midpoint insertion strategy。默认配置该位置在LRU列表长度的5/8处。由参数innodb_old_blocks_pct控制。innodb_old_blocks_time表示页读取到mid位置后需要等待多久才能被加入到LRU列表的热端。&lt;/p>
&lt;p>命令（红色）结果Database pages表示LRU列表中页的数量。&lt;/p>
&lt;p>page made young表示LRU列表中页移动到前端的次数。&lt;/p>
&lt;p>脏页（LRU列表中的页被修改后，称为脏页）通过CHECKPOIN机制将脏页刷新回磁盘，而Flush列表中的页即为脏页。&lt;/p>
&lt;blockquote>
&lt;p>脏页既存在于LRU列表中，也存在于Flush列表中。LRU列表用来管理缓冲池中页的可用性，Flush列表用来管理将页刷新回磁盘，二者互不影响。&lt;/p>
&lt;/blockquote>
&lt;p>Modified db pages 表示脏页的数量&lt;/p>
&lt;p>元数据表可查看：&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>SELECT TABLE_NAME, SPACE, PAGE_NUMBER, PAGE_TYPE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FROM INNODB_BUFFER_PAGE_LRU
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WHERE OLDEST_MODIFICATION &amp;gt; 0;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Free为空闲列表&lt;/p>
&lt;h4 id="3-重做日志缓冲">3、重做日志缓冲&lt;/h4>
&lt;p>redo log buffer&lt;/p>
&lt;p>大小有配置参数innodb_log_buffer_size控制。通常8MB满足绝大部分应用，因为下列三种情况会将内容刷新到外部磁盘的重做日志文件中：&lt;/p>
&lt;p>1）Master Thread每一秒将重做日志缓冲刷新到重做日志文件&lt;/p>
&lt;p>2）每个事物提交是会将重做日志缓冲刷新到重做日志文件&lt;/p>
&lt;p>3）当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件&lt;/p>
&lt;h4 id="4-额外的内存池">4、额外的内存池&lt;/h4>
&lt;p>对内存的管理是通过一种称为内存堆（heap）的方式进行的。内存分配时，需要从额外的内存池中进行申请，例如分配缓冲池，每个缓冲池中的帧缓冲（frame buffer）还有对应的缓冲控制对象（buffer control block）（记录LRU、锁、等待等信息）。所以申请很大的缓冲池时，也应考虑相应增加该值。&lt;/p>
&lt;h4 id="buffer-pool的lru算法">Buffer Pool的LRU算法&lt;/h4>
&lt;p>了解完了InnoDB的内存结构之后，我们来仔细看看Buffer Pool的LRU算法是如何实现将最近没有使用过的数据给过期的。&lt;/p>
&lt;p>&lt;strong>原生LRU&lt;/strong>&lt;/p>
&lt;p>首先明确一点，此处的LRU算法和我们传统的LRU算法有一定的区别。为什么呢？因为实际生产环境中会存在全表扫描的情况，如果数据量较大，可能会将Buffer Pool中存下来的热点数据给全部替换出去，而这样就会导致该段时间MySQL性能断崖式下跌。&lt;/p>
&lt;p>对于这种情况，MySQL有一个专用名词叫缓冲池污染。所以MySQL对LRU算法做了优化。&lt;/p>
&lt;p>&lt;strong>优化后的LRU&lt;/strong>&lt;/p>
&lt;p>优化之后的链表被分成了两个部分，分别是 New Sublist 和 Old Sublist，其分别占用了 Buffer Pool 的3/4和1/4。&lt;/p>
&lt;p>&lt;img src="../imgs/mysql-innodb20220229_1.png" alt="mysql-innodb20220229_1.png">&lt;/p>
&lt;p>该链表存储的数据来源有两部分，分别是：&lt;/p>
&lt;p>1、MySQL的预读线程预先加载的数据&lt;/p>
&lt;p>2、用户的操作，例如Query查询&lt;/p>
&lt;p>默认情况下，由用户操作影响而进入到Buffer Pool中的数据，会被立即放到链表的最前端，也就是 New Sublist 的 Head 部分。但如果是MySQL启动时预加载的数据，则会放入MidPoint中，如果这部分数据被用户访问过之后，才会放到链表的最前端。&lt;/p>
&lt;p>这样一来，虽然这些页数据在链表中了，但是由于没有被访问过，就会被移动到后1/4的 Old Sublist中去，直到被清理掉。&lt;/p>
&lt;h3 id="checkpoint技术">Checkpoint技术&lt;/h3>
&lt;p>当前事务数据库系统普遍采用Write Ahead Log策略，即当事务提交时，先写重做日志，再修改页。宕机通过重做日志恢复数据，保证数据持久性。&lt;/p>
&lt;p>Checkpoint（检查点）技术的目的解决如下问题：&lt;/p>
&lt;p>1、缩短数据库的恢复时间&lt;/p>
&lt;p>2、缓冲池不够用时，将脏页刷新到磁盘&lt;/p>
&lt;p>3、重做日志不可用时，刷新脏页&lt;/p>
&lt;p>宕机时，不需要重做所有的日志，Checkpoint之前的页都已经刷新回磁盘，大大缩短恢复时间。&lt;/p>
&lt;p>重做日志不可用是因为其设计为循环使用，并不是让其无限增大。重做日志可以被重用的部分是指这些重做日志已经不再需要，即宕机时，恢复操作不需要这部分的重做日志，因此可以覆盖使用。若此时还需要使用，则必须强制产生Checkpoint，将缓冲池中的页至少刷新到当前重做日志的位置。&lt;/p>
&lt;p>Checkpoint将缓冲池中的脏页刷回到磁盘。&lt;/p>
&lt;p>两种Checkpoint：&lt;/p>
&lt;p>1、Sharp Checkpoint&lt;/p>
&lt;p>2、Fuzzy Checkpoint&lt;/p>
&lt;p>Sharp Checkpoint发生在数据库关闭时将所有的脏页都刷新回磁盘，默认工作方式，即参数innodb_fast_shutdown=1&lt;/p>
&lt;p>如果运行时使用Sharp Checkpoint性能受到很大影响。故使用Fuzzy Checkpoint只刷新一部分脏页，而不是刷新所有的脏页回磁盘。&lt;/p>
&lt;p>几种情况的Fuzzy Checkpoint：&lt;/p>
&lt;p>1、Master Thread Checkpoint&lt;/p>
&lt;blockquote>
&lt;p>每秒或每十秒异步&lt;/p>
&lt;/blockquote>
&lt;p>2、FLUSH_LRU_LIST Checkpoint&lt;/p>
&lt;blockquote>
&lt;p>保证LRU列表需要大约100多个空闲也可用，移除LRU列表尾端的页需要Checkpoint&lt;/p>
&lt;/blockquote>
&lt;p>3、Async/Sync Flush Checkpoint&lt;/p>
&lt;blockquote>
&lt;p>重做日志不可用，保证重做日志循环使用&lt;/p>
&lt;/blockquote>
&lt;p>4、Dirty Page too much Checkpoint&lt;/p>
&lt;blockquote>
&lt;p>脏页数量太多（配置参数：innodb_max_dirty_pages_pct）&lt;/p>
&lt;/blockquote>
&lt;h2 id="master-thread工作方式">Master Thread工作方式&lt;/h2>
&lt;h3 id="1-0-x版本之前的master-thread">1.0.x版本之前的Master Thread&lt;/h3>
&lt;p>具有最高的线程优先级别。内部由多个循环组成（根据数据库运行状态进行切换）：&lt;/p>
&lt;p>&lt;strong>1、主循环（loop）&lt;/strong>&lt;/p>
&lt;p>每秒一次的操作包括：&lt;/p>
&lt;ul>
&lt;li>日志缓冲刷新到磁盘，即使事务还没有提交（总是）&lt;/li>
&lt;li>合并插入缓冲（可能）&lt;/li>
&lt;li>至多刷新100个InnoDB的缓冲池中的脏页到磁盘（可能）&lt;/li>
&lt;li>如果当前没有用户活动，则切换到background loop（可能）&lt;/li>
&lt;/ul>
&lt;p>**即使某个事物还没有提交，InnoDB存储引擎仍然每秒会将重做日志缓冲中的内容刷新到重做日志文件。**所以解释为什么再大的事务提交（commit）时间也是很短的。&lt;/p>
&lt;p>InnoDB存储引擎判断当前一秒内发生IO次数是否小于5次，是则认为当前IO压力小，可以执行合并插入缓冲的操作。&lt;/p>
&lt;p>判断当前缓冲池中脏页的比例（buf_get_modified_ratio_pct，默认为90，代表90%），如果超过，则刷新100个脏页到磁盘。&lt;/p>
&lt;p>每十秒的操作包括：&lt;/p>
&lt;ul>
&lt;li>刷新100个脏页到磁盘（可能）&lt;/li>
&lt;li>合并至多5个插入缓冲（总是）&lt;/li>
&lt;li>将日志缓冲刷新到磁盘（总是）&lt;/li>
&lt;li>删除无用的Undo页（总是）&lt;/li>
&lt;li>刷新100个或者10个脏页到磁盘（总是）&lt;/li>
&lt;/ul>
&lt;p>判断过去10秒之内磁盘IO操作是否小于200次，是则认为磁盘IO具备操作能力，因此将100个脏页刷新到磁盘。&lt;/p>
&lt;p>接着合并插入缓冲操作（总是）。&lt;/p>
&lt;p>之后将日志缓冲刷新到磁盘（总是）（和每秒操作一致）。&lt;/p>
&lt;p>接着执行full purge操作，即删除无用的Undo页。判断是否可以删除，可以则立即删除。&lt;/p>
&lt;p>然后判断缓冲池脏页比例（buf_get_modified_ratio_pct），超过70%，则刷新100个脏页到磁盘，否则刷新10个。&lt;/p>
&lt;p>2、后台循环（backgroup loop）&lt;/p>
&lt;p>若当前没有用户活动（数据空闲时）或者数据库关闭（shutdown），就会切换到这个循环。backgroup loop会执行以下操作：&lt;/p>
&lt;ul>
&lt;li>删除无用的Undo页（总是）&lt;/li>
&lt;li>合并20个插入缓冲（总是）&lt;/li>
&lt;li>跳回到主循环（总是）&lt;/li>
&lt;li>不断刷新100个页直到符合条件（可能，跳转到flush loop中完成）&lt;/li>
&lt;/ul>
&lt;p>3、刷新循环（flush loop）&lt;/p>
&lt;p>若flush loop也没有事可以做，会切换到suspend loop，将Master Thread挂起，等待事件的发生。若用户启用（enable）InnoDB存储引擎，却未使用任何表，Master Thread总是处于挂起状态。&lt;/p>
&lt;p>4、暂停循环（suspend loop）&lt;/p>
&lt;h3 id="1-2-x版本之前的master-thread">1.2.x版本之前的Master Thread&lt;/h3>
&lt;p>1.0.x版本之前对于IO有限制，在缓冲池想磁盘刷新时做了硬编码（hard coding），固态硬盘（SSD）出现，则限制了对磁盘IO的性能，尤其是写入。&lt;/p>
&lt;p>分析：无论何时，最大只会刷新100个脏页到磁盘，合并20个插入缓冲。如果是写密集每秒可能产生大于100个脏页，如果产生大于20个插入缓冲，Master Thread可能忙不过来或者说慢。&lt;/p>
&lt;p>从1.0.x版本提供参数innodb_io_capacity表示磁盘吞吐量，默认200。对于刷新到磁盘页的数量，会按照该参数的百分比来控制。规则如下：&lt;/p>
&lt;ul>
&lt;li>合并插入缓冲时，数量为该参数的5%&lt;/li>
&lt;li>从缓冲区刷新脏页时，数量为该值&lt;/li>
&lt;/ul>
&lt;p>参数innodb_max_dirty_pages_pct默认值90，即脏页占缓冲池90%。该值太大，内存很大时DB压力很大，刷新脏页速度很慢，数据恢复时间更久。&lt;/p>
&lt;p>1.0.x版本提供默认值75，和Google测试的80最接近。这样既可以加快刷新脏页的频率，又能保证磁盘IO的负载。（太小增加磁盘的压力）&lt;/p>
&lt;p>增加参数innodb_adaptive_flushing（自适应地刷新）。原来刷新规则：脏页在缓冲池所占比例小于innodb_max_dirtypages_pct时，不刷新脏页；大于时刷新100个脏页。引入该参数后，buf_flush_get_desired_flush_rate函数通过判断产生重做日志（redo log）的速度决定最适合的刷新脏页数量。因此脏页比例小于innodb_max_dirtypages_pct时，也会刷新一定量的脏页。&lt;/p>
&lt;p>之前每次full purge时，最多回收20个Undo页，1.0.x版本引入参数innodb_purge_batch_size，控制每次full purge回收的Undo页的数量。默认值为20。&lt;/p>
&lt;p>1.0.x版本在性能方面取得了极大的提高。&lt;/p>
&lt;h3 id="1-2-x版本的master-thread">1.2.x版本的Master Thread&lt;/h3>
&lt;p>对于刷新脏页的操作，从Master Thread线程分离到一个单独的Page Cleaner Thread，减轻主线程工作，提高并发。&lt;/p>
&lt;h2 id="innodb关键特性">InnoDB关键特性&lt;/h2>
&lt;h3 id="1-插入缓冲-insert-buffer">1、插入缓冲（Insert Buffer）&lt;/h3>
&lt;p>性能提升&lt;/p>
&lt;h4 id="1-insert-buffer">1）Insert Buffer&lt;/h4>
&lt;p>对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引是否在缓冲池中，若在直接插入，否则先放到一个Insert Buffer对象中。然后以一定的频率和情况进行Insert Buffer和辅助索引页子节点的merge（合并）操作。这通常能将多个插入合并到一个操作中（在一个索引页中），大大提高非聚集索引插入的性能&lt;/p>
&lt;p>使用需要满足两个条件：&lt;/p>
&lt;ul>
&lt;li>索引是辅助索引&lt;/li>
&lt;li>索引&lt;strong>不是唯一&lt;/strong>的&lt;/li>
&lt;/ul>
&lt;p>问题：若宕机有大量的Insert Buffer并没有合并到实际的非聚集索引中，恢复需要大量时间（甚至几小时）。修改占用缓冲池大小的比例&lt;/p>
&lt;h4 id="2-change-buffer">2）Change Buffer&lt;/h4>
&lt;p>1.0.x版本引入了Change Buffer，可将其视为Insert Buffer的升级。可以对DML操作（INSERT/ DELETE/UPDATE）都进行缓冲，分别是Insert Buffer、Delete Buffer、Purge Buffer。&lt;/p>
&lt;p>适用条件：&lt;strong>非唯一的辅助索引&lt;/strong>。&lt;/p>
&lt;p>UPDATE操作可分为两个过程：&lt;/p>
&lt;ul>
&lt;li>将记录标记为已删除（Delete Buffer）&lt;/li>
&lt;li>真正将记录删除（Purge Buffer）&lt;/li>
&lt;/ul>
&lt;p>参数innofb_chage_buffering用来开启各种buffer选项。可选inserts/deletes/purges /changes/all/none（默认all）。参数innodb_change_buffer_max_size控制Change Buffer最大使用内存数量。默认25，表示最多使用25%的缓冲池内存空间，最大有效值50。&lt;/p>
&lt;h4 id="3-insert-buffer的内部实现">3）Insert Buffer的内部实现&lt;/h4>
&lt;p>其数据结构是一颗B+树。MySQL4.1之前的版本中每张表都有一颗Insert Buffer B+树，现在版本全局只有一颗。存放在共享空间中，默认也就是ibdata1中。因此试图通过独立表空间idb文件恢复表中数据时，往往会导致CHECK TABLE失败。因为表的辅助索引中的数据可能还在Insert Buffer中，也就是共享空间中，所以还需要进行REPAIR TABLE操作来重建表上所有的辅助索引。（详情见P51）&lt;/p>
&lt;h4 id="4-merge-insert-buffer">4）Merge Insert Buffer&lt;/h4>
&lt;p>Insert Buffer的记录合并（merge）到真正的辅助索引中&lt;/p>
&lt;p>该操作可能发生在以下几种情况下：&lt;/p>
&lt;ul>
&lt;li>辅助索引页被读取到缓冲池时&lt;/li>
&lt;li>Insert Buffer Bitmap页追踪到该辅助索引页已无可用空间时&lt;/li>
&lt;li>Master Thread&lt;/li>
&lt;/ul>
&lt;h3 id="2-两次写-double-write">2、两次写（Double Write）&lt;/h3>
&lt;p>可靠性。&lt;/p>
&lt;p>解决诸如部分写失效（partial page write）等问题。&lt;/p>
&lt;p>为什么不使用重做日志恢复？因为重做日志记录的是对页的物理操作，如偏移量xx写AA。如果页本身损坏，重做没有意义。即应用重做日志前，需要一个页的副本，当写入失效发生时，先通过页的副本还原该页，再进行重做，这就是doublewrite。&lt;/p>
&lt;p>doublewrite由两部分组成：&lt;/p>
&lt;ul>
&lt;li>doublewrite buffer（2MB）&lt;/li>
&lt;li>物理磁盘上共享表空间中连续的128个页，即2个区（extent），大小同样为2MB。
在对缓冲池的脏页进行刷新时，并不直接写磁盘，而是会通过memcpy函数将脏页先复制到内存中的doublewrite buffer，之后通过doublewrite buffer再分两次，每次1MB顺序写入共享表空间的物理磁盘上（顺序文件），然后调用fsync函数，同步磁盘（真正的数据文件.ibd），避免缓冲写带来的问题。&lt;/li>
&lt;/ul>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>SHOW GLOBAL STATUS LIKE &lt;span style="color:#c41a16">&amp;#39;innodb_dblwr%&amp;#39;&lt;/span>&lt;span style="color:#c41a16">\G&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>innodb_dblwr_pages_written为写了的页数，innodb_dblwr_writes为实际写入次数，其比例小于64：1则说明系统写入压力不高。
参数skip_innodb_doublewrite可以禁止doublewrite功能，从服务器提高性能可以考虑，主服务器确保开启双写服务。&lt;/p>
&lt;blockquote>
&lt;p>诸如ZFS文件系统本身提供了部分写失效的防范机制，可以不启用双写&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>理解&lt;/strong>&lt;/p>
&lt;p>这时利用redo log （页（数据块）的物理操作）来恢复已经损坏的数据块是无效的！数据块的本身已经损坏，再次重做依然是一个坏块！所以此时需要一个数据块的副本来还原该损坏的数据块，再利用重做日志进行其他数据块的重做操作，这就是doublwrite的原因作用！&lt;/p>
&lt;p>理解可参考：&lt;a href="http://jockchou.github.io/blog/2015/07/23/innodb-doublewrite-buffer.html">http://jockchou.github.io/blog/2015/07/23/innodb-doublewrite-buffer.html&lt;/a>&lt;/p>
&lt;h3 id="3-自适应哈希索引-adaptive-hash-index-ahi">3、自适应哈希索引（Adaptive Hash Index，AHI）&lt;/h3>
&lt;p>（Innodb存储引擎会监控对表上二级索引的查找，如果发现某二级索引被频繁访问，二级索引成为热数据，建立哈希索引可以带来速度的提升）&lt;/p>
&lt;p>&lt;img src="../imgs/mysql-innodb20220229_2.png" alt="mysql-innodb20220229_2.png">&lt;/p>
&lt;p>InnoDB存储引擎会监控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，则建立哈希索引，称之为自适应哈希索引。AHI是通过缓冲池的B+树页构造出来，建立速度很快，不需要对整张表构建哈希索引。&lt;/p>
&lt;p>要求：对这个页的连续访问模式必须是一样的。&lt;/p>
&lt;p>参数innodb_adaptive_hash_index禁用或启动此特性。默认开启。&lt;/p>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>会占用innodb buffer pool&lt;/li>
&lt;li>只能等值查找&lt;/li>
&lt;/ul>
&lt;h3 id="4-异步io-async-io">4、异步IO（Async IO）&lt;/h3>
&lt;p>除了异步，还有一个优势是IO Merge操作。&lt;/p>
&lt;p>1.1.x之前，AIO通过代码模拟实现。1.1.x提供了内核级别AIO的支持（Native AIO，mac系统不支持）。需要libaio库支持。&lt;/p>
&lt;p>参数innodb_use_native_aio用来控制是否启用Native AIO，Linux系统下默认ON。&lt;/p>
&lt;h3 id="5-刷新临接页-flush-neighbor-page">5、刷新临接页（Flush Neighbor Page）&lt;/h3>
&lt;p>当刷新一个脏页时，检测该页所在区（extent）的所有页，如果是脏页，那么一起刷新。通过AIO将多个IO写入操作合并为一个。&lt;/p>
&lt;p>两个问题：&lt;/p>
&lt;p>1、是否可能将不怎么脏的页进行写入，该页很快又会变成脏页？&lt;/p>
&lt;p>2、固态硬盘有较高的IOPS，也需要该特性？&lt;/p>
&lt;p>1.2.x版本开始提供innodb_flush_neighbors控制是否启用该特性。建议传统机械硬盘启动，固态硬盘不启用。&lt;/p>
&lt;h2 id="启动-关闭与恢复">启动、关闭与恢复&lt;/h2>
&lt;p>参数innodb_fast_shutdown影响：&lt;/p>
&lt;ul>
&lt;li>0表示DB关闭时，需完成所有的full purge和merge insert buffer，并且将所有的脏页刷新回磁盘&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>full purge：删除无用的Undo页
merge insert buffer：Insert Buffer的记录合并到真正的辅助索引中&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>1为默认值，不需要完成full purge和merge insert buffer，但将所有脏页刷新会磁盘&lt;/li>
&lt;li>2两者皆不，而是将日志都写入日志文件，下次启动，会进行恢复操作（recovery）&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>kill关闭DB，也会进行恢复操作&lt;/p>
&lt;/blockquote>
&lt;p>参数innodb_force_recovery，略&lt;/p>
&lt;h1 id="文件">文件&lt;/h1>
&lt;h2 id="参数文件">参数文件&lt;/h2>
&lt;h2 id="日志文件">日志文件&lt;/h2>
&lt;h3 id="1-错误日志">1、错误日志&lt;/h3>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>SHOW VARIABLES LIKE &lt;span style="color:#c41a16">&amp;#39;log_error&amp;#39;&lt;/span> &lt;span style="color:#177500"># 定位文件名和路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system hostname &lt;span style="color:#177500"># 主机名，默认错误日志为 主机名.err&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="2-慢查询日志">2、慢查询日志&lt;/h3>
&lt;p>参数long_query_time设置运行时间阈值，超过（不包括等于）则记录在慢查询日志中，默认值为10（秒）。&lt;/p>
&lt;p>参数log_slow_queries为记录开关。&lt;/p>
&lt;p>参数log_queries_not_using_indexes，如果运行语句没有使用索引，是否记录到该日志开关。&lt;/p>
&lt;h3 id="3-查询日志">3、查询日志&lt;/h3>
&lt;h3 id="4-二进制日志">4、二进制日志&lt;/h3>
&lt;p>记录了对DB执行更改的所有操作，但不包括SELECT和SHOW这类操作&lt;/p>
&lt;blockquote>
&lt;p>若操作本身并没有导致DB发生变化，那么可能也会写入二进制日志&lt;/p>
&lt;/blockquote>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>SHOW MASTER STATUS # 得到File名称
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SHOW BINLOG EVENTS IN &amp;#39;mysqld.000008&amp;#39; # 使用File名称查询
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>二进制日志作用：&lt;/p>
&lt;ul>
&lt;li>恢复（recovery）&lt;/li>
&lt;li>复制（replication）&lt;/li>
&lt;li>审计（audit）：判断是否有进行注入的攻击&lt;/li>
&lt;/ul>
&lt;h2 id="套接字文件">套接字文件&lt;/h2>
&lt;p>UNIX系统本地连接MySQL可采用UNIX域套接字方式，需要一个套接字（socket）文件，一般在/tmp目录下，名为mysql.sock。&lt;/p>
&lt;h2 id="pid文件">pid文件&lt;/h2>
&lt;p>默认位于数据库目录下，文件名为主机名.pid&lt;/p>
&lt;h2 id="表结构定义文件">表结构定义文件&lt;/h2>
&lt;p>每个表都有一个以frm为后缀的文件，记录表结构定义，视图也有。可直接只用cat查看&lt;/p>
&lt;h2 id="innodb存储引擎文件">InnoDB存储引擎文件&lt;/h2>
&lt;h3 id="1-表空间文件">1、表空间文件&lt;/h3>
&lt;h3 id="2-重做日志文件">2、重做日志文件&lt;/h3>
&lt;h1 id="表">表&lt;/h1>
&lt;h2 id="索引组织表">索引组织表&lt;/h2>
&lt;p>表根据主键顺序组织存放的，这种存储方式成为索引组织表（index organized table）。&lt;/p>
&lt;p>如果没有显式地定义主键，InnoDB则会按如下方式选择或创建主键：&lt;/p>
&lt;p>1、首先判断表中是否有&lt;strong>非空的唯一索引&lt;/strong>（Unique NOT NULL），如果有，则该列即为主键。&lt;/p>
&lt;p>2、如果不符合上述条件，InnoDB自动创建一个6字节大小的指针&lt;/p>
&lt;blockquote>
&lt;p>当表中有多个非空唯一索引时，会选择建表时第一个定义的非空唯一索引为主键。（定义索引的顺序，而不是建表时列的顺序。&lt;/p>
&lt;/blockquote>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>select a,b,c,d,_rowid from table
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>_rowid可以显示表的主键，但只能用于查看单个列为主键的情况&lt;/p>
&lt;h2 id="innodb逻辑存储结构">InnoDB逻辑存储结构&lt;/h2>
&lt;p>所有数据被逻辑地存放在一个空间中，称之为表空间（tablespace）。&lt;strong>表空间又由段（segment）、区（extent）、页（page）组成&lt;/strong>。页在一些文档中有时也称为块（block）。&lt;/p>
&lt;h3 id="表空间">表空间&lt;/h3>
&lt;p>共享表空间iddata1，即所有数据都存放在该表空间中。若启用参数innodb_file_per_table，则每张表内的数据可以单独放到一个表空间内。&lt;/p>
&lt;p>注意：每张表的表空间内存放的只是数据、索引和插入缓冲Bitmap页，其他类的数据，如回滚(undo)信息，插入缓冲索引页、系统事务信息，二次写缓冲(Double write buffer)等还是存放在原来的共享表空间内。&lt;/p>
&lt;p>所以即使启动该参数，共享表空间还是不断增大。&lt;/p>
&lt;h3 id="段">段&lt;/h3>
&lt;p>表空间是由各个段组成的，常见的段有数据段、索引段、回滚段等。&lt;/p>
&lt;p>InnoDB存储引擎表示索引组织的（index organized），因此数据即索引，索引即数据。&lt;/p>
&lt;p>数据段：B+树的叶子节点&lt;/p>
&lt;p>索引段：B+树的非叶子节点&lt;/p>
&lt;p>对段的管理是引擎自身完成的。&lt;/p>
&lt;h3 id="区">区&lt;/h3>
&lt;p>&lt;strong>区是由连续页组成的空间，在任何情况下每个区的大小都为1MB&lt;/strong>。为了保证区中页的连续性，InnoDB存储引擎一次从磁盘中申请4-5个区。默认情况下页大小为16KB，即一个区中共有64个连续的页。&lt;/p>
&lt;p>1.0.x版本开始引入压缩页，页大小可通过参数KYE_BLOCK_SIZE设置为8KB/4KB/2KB，因此每个区对应页的数量为128、256、512。&lt;/p>
&lt;p>1.2.x版本新增参数innodb_page_size，可将默认页大小置为4K/8K，但页中的数据库不是压缩，此时区中页的数量同样为256、128。&lt;/p>
&lt;h3 id="页">页&lt;/h3>
&lt;p>页（page）也称为块，是InnoDB磁盘管理的最小单位。&lt;/p>
&lt;p>1.2.x版本新增参数innodb_page_size，可将页的大小设置为4K/8K/16K，设置完成，则所有表中页的大小都为该值，不可以对其再次进行修改。除非通过mysqldump导入和导出操作来产生新的库。&lt;/p>
&lt;p>常见的页类型有：&lt;/p>
&lt;ul>
&lt;li>数据页（B-tree Node）&lt;/li>
&lt;li>undo页（undo Log Page）&lt;/li>
&lt;li>系统页（System Page）&lt;/li>
&lt;li>事务数据页（Transaction system Page）&lt;/li>
&lt;li>插入缓冲位图页（Insert Buffer Bitmap）&lt;/li>
&lt;li>插入缓冲空闲列表页（Insert Buffer Free List）&lt;/li>
&lt;li>未压缩的二进制大对象页（Uncompressed BLOB Page）&lt;/li>
&lt;li>压缩的二进制大对象页（compressed BLOB Page）&lt;/li>
&lt;/ul>
&lt;h3 id="行">行&lt;/h3>
&lt;p>InnoDB引擎是面向行（row-oriented），也就是数据时按行进行存放的。每个页存放的行记录有硬性指标，最多允许存放16KB/2-200行，即7992行记录。&lt;/p>
&lt;h2 id="innodb行记录格式">InnoDB行记录格式&lt;/h2>
&lt;h3 id="compact行记录格式">Compact行记录格式&lt;/h3>
&lt;h3 id="redundant行记录格式">Redundant行记录格式&lt;/h3>
&lt;h3 id="行溢出数据">行溢出数据&lt;/h3>
&lt;p>MySQL数据库的VARCHAR类型可以存放65535字节。通过测试最长长度为为65532，因为有别的开销。（字符集为latin1，UTF-8、GBK不一样）&lt;/p>
&lt;blockquote>
&lt;p>注意如果没有讲SQL_MODE设为严格模式，或许可以建立表，但会抛出warning。自动将VARCHAR类型转换成了TEXT类型。&lt;/p>
&lt;/blockquote>
&lt;h3 id="compressed和dynamic行记录格式">Compressed和Dynamic行记录格式&lt;/h3>
&lt;h3 id="char的行结构存储">CHAR的行结构存储&lt;/h3>
&lt;h2 id="innodb数据页结构">InnoDB数据页结构&lt;/h2>
&lt;p>InnoDB数据页由以下7个部分组成：&lt;/p>
&lt;ul>
&lt;li>File Header（文件头）&lt;/li>
&lt;li>Page Header（页头）&lt;/li>
&lt;li>Infimun和Supremum Records&lt;/li>
&lt;li>User Records（用户记录，即行记录）&lt;/li>
&lt;li>Free Space（空闲空间）&lt;/li>
&lt;li>Page Directory（页目录）&lt;/li>
&lt;li>File Trailer（文件结尾信息）&lt;/li>
&lt;/ul>
&lt;h2 id="named-file-formats机制">Named File Formats机制&lt;/h2>
&lt;h2 id="约束">约束&lt;/h2>
&lt;h3 id="数据完整性">数据完整性&lt;/h3>
&lt;h3 id="约束的创建和查找">约束的创建和查找&lt;/h3>
&lt;h3 id="约束和索引的区别">约束和索引的区别&lt;/h3>
&lt;h3 id="对错误数据的约束">对错误数据的约束&lt;/h3>
&lt;h3 id="enum和set约束">ENUM和SET约束&lt;/h3>
&lt;h3 id="触发器与约束">触发器与约束&lt;/h3>
&lt;h3 id="外键约束">外键约束&lt;/h3>
&lt;h2 id="视图">视图&lt;/h2>
&lt;h2 id="分区表">分区表&lt;/h2>
&lt;h1 id="索引与算法">索引与算法&lt;/h1>
&lt;h2 id="innodb存储引擎索引概述">InnoDB存储引擎索引概述&lt;/h2>
&lt;p>常见索引：&lt;/p>
&lt;ul>
&lt;li>B+树索引&lt;/li>
&lt;li>全文索引&lt;/li>
&lt;li>哈希索引&lt;/li>
&lt;/ul>
&lt;p>常常被忽略的问题：B+树索引并不能找到一个给定键值的具体行，B+树索引能找到的只是被查找数据行所在的页。然后数据库通过把页读入到内存，再在内存中进行查找，最后得到要查找的数据。&lt;/p>
&lt;h2 id="数据结构与算法">数据结构与算法&lt;/h2>
&lt;h3 id="二分查找法">二分查找法&lt;/h3>
&lt;h3 id="二叉查找树和平衡二叉树">二叉查找树和平衡二叉树&lt;/h3>
&lt;h2 id="b-树">B+树&lt;/h2>
&lt;h3 id="b-树索引">B+树索引&lt;/h3>
&lt;p>1、聚集索引&lt;/p>
&lt;p>表中数据按照主键顺序存放&lt;/p>
&lt;p>2、辅助索引&lt;/p>
&lt;p>3、B+树索引的分裂&lt;/p>
&lt;p>4、B+树索引的管理&lt;/p>
&lt;p>5、Cardinality值&lt;/p>
&lt;p>怎么查看索引是否是高选择性（举例，性别不属于高选择性。取值范围广，几乎没有重复，即高选择性）。Cardinality值表示索引中不重复记录数量的预估值。&lt;/p>
&lt;blockquote>
&lt;p>注意，这是个预估值，不是准确值。&lt;/p>
&lt;/blockquote>
&lt;p>数据库对于Cardinality的统计都是通过采样（Sample）的方法来完成。&lt;/p>
&lt;p>InnoDB存储引擎内部对更新Cardinality信息的策略为：&lt;/p>
&lt;ul>
&lt;li>表中1/16的数据已发生过变化&lt;/li>
&lt;li>stat_modified_counter &amp;gt; 2 000 000 000&lt;/li>
&lt;/ul>
&lt;h2 id="b-树索引的使用">B+树索引的使用&lt;/h2>
&lt;h3 id="不同应用中b-树索引的使用">不同应用中B+树索引的使用&lt;/h3>
&lt;h3 id="联合索引">联合索引&lt;/h3>
&lt;h3 id="覆盖索引">覆盖索引&lt;/h3>
&lt;p>即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。&lt;/p>
&lt;h3 id="优化器选择不适用索引的情况">优化器选择不适用索引的情况&lt;/h3>
&lt;p>多发生在范围查找、JOIN链接操作等情况下&lt;/p>
&lt;h3 id="索引提示">索引提示&lt;/h3>
&lt;p>显式地告诉优化器使用哪个索引。&lt;/p>
&lt;h3 id="multi-range-read优化">Multi-Range Read优化&lt;/h3>
&lt;p>好处：&lt;/p>
&lt;ul>
&lt;li>MRR是数据访问变得较为顺序。在查询辅助索引时，首先根据得到的查询结果按照主键进行排序，并按照主键排序的顺序进行书签查找&lt;/li>
&lt;li>减少缓冲池中页被替换的次数&lt;/li>
&lt;li>批量处理对键值的查询操作&lt;/li>
&lt;/ul>
&lt;p>MRR的工作方式：&lt;/p>
&lt;ul>
&lt;li>将查询得到的辅助索引键值存放于一个缓存中，这时缓存的数据时根据辅助索引键值排序的&lt;/li>
&lt;li>将缓存中的键值根据RowID进行排序&lt;/li>
&lt;li>根据RowID的排列顺序来访问实际的数据文件&lt;/li>
&lt;/ul>
&lt;h3 id="index-condition-pushdown-icp-优化">Index Condition Pushdown（ICP）优化&lt;/h3>
&lt;p>MySQL5.6开始支持。&lt;/p>
&lt;p>将WHERE的部分过滤操作放在了存储引擎层。大大减少上层SQL层对记录的索取（fetch），提高性能。&lt;/p>
&lt;h2 id="哈希算法">哈希算法&lt;/h2>
&lt;h2 id="全文索引">全文索引&lt;/h2>
&lt;p>1.2.x版本开始支持全文索引。&lt;/p>
&lt;h1 id="锁">锁&lt;/h1>
&lt;h2 id="innodb引擎里面的锁">InnoDB引擎里面的锁&lt;/h2>
&lt;h3 id="一致性非锁定读">一致性非锁定读&lt;/h3>
&lt;p>一致性非锁定读（consistent nonlocking read）是指InnoDB存储引擎通过行多版本控制（mutil versioning）的方式来读取当前执行时间数据库中行的数据。&lt;/p>
&lt;h3 id="一致性锁定读">一致性锁定读&lt;/h3>
&lt;p>两种一致性的锁定读（locking read）操作：&lt;/p>
&lt;p>1、SELECT ... FOR UPDATE&lt;/p>
&lt;p>2、SELECT ... LOCK IN SHARE MODE&lt;/p>
&lt;p>第一种操作对读取的行记录加一个X锁，其他事务不能对已锁定的行加上任何锁。&lt;/p>
&lt;p>第二种操作对读取的行记录加S锁，其他事务可以向被锁定的行加S锁，但如果加X锁，会被阻塞。&lt;/p>
&lt;h3 id="自增长与锁">自增长与锁&lt;/h3>
&lt;p>在InnoDB存储引擎的内存结构中，对每个含有自增长值得表都有一个自增长计数器（auto-increment counter）。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SELECT&lt;/span> &lt;span style="color:#a90d91">MAX&lt;/span>(&lt;span style="color:#000">auto_inc_col&lt;/span>) &lt;span style="color:#a90d91">FROM&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#a90d91">FOR&lt;/span> &lt;span style="color:#a90d91">UPDATE&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>这种实现方式称作AUTO-INC Locking。这种锁其实是采用一种特殊的表锁机制，为了提高插入的性能，&lt;strong>锁不是在一个事务完成后才释放，而是在完成对自增长值插入的SQL语句后立即释放&lt;/strong>。
问题：&lt;/p>
&lt;p>1、并发插入性能差，事务必须等待前一个插入的完成（虽然不用等待事务的完成）&lt;/p>
&lt;p>2、对于INSERT ... SELECT的大数据两的插入会有插入性能问题&lt;/p>
&lt;p>MySQL 5.1.22版本开始，InnoDB提供了一种轻量级互斥量的自增长实现机制，大大提高了自增长值插入的性能。并提供参数innodb_autoinc_lock_mode控制自增长模式，默认值为1。&lt;/p>
&lt;p>首先介绍插入类型：&lt;/p>
&lt;p>1、insert-like&lt;/p>
&lt;p>所有的插入语句，如INSERT、REPLACE、INSERT...SELECT、REPLACE...SELECT、LOAD DATA等&lt;/p>
&lt;p>2、simple inserts&lt;/p>
&lt;p>插入前能确定插入行数的语句，如INSERT...SELECT、REPLACE...SELECT、LOAD DATA&lt;/p>
&lt;blockquote>
&lt;p>不包括INSERT...ON DUPLICATE KEY UPDATE这类语句&lt;/p>
&lt;/blockquote>
&lt;p>3、bulk inserts&lt;/p>
&lt;p>插入前不能确定插入行数的语句，如INSERT...SERLECT，REPLACE...SELECT，LOAD DATA&lt;/p>
&lt;p>4、mixed-mode inserts&lt;/p>
&lt;p>插入中有一部分是自增长的，有一部分是确定的。如INSERT INTO t1(c1, c2) VALUES (1, 'a'), (NULL, 'b')；也可以是指INSERT...ON DUPLICATE KEY UPDATE&lt;/p>
&lt;p>上述参数innodb_autoinc_lock_mode以及各个设置下对自增的影响，共有三个有效值可以设定，即0、1、2，具体说明如下：&lt;/p>
&lt;p>&lt;strong>值为0：&lt;/strong>&lt;/p>
&lt;p>MySQL5.1.22版本之前自增长的实现方式，即通过表锁的AUTO-INC Locking。&lt;/p>
&lt;p>&lt;strong>值为1：&lt;/strong>&lt;/p>
&lt;p>默认值。&lt;/p>
&lt;p>对于“simple inserts”，该值会用互斥量（mutex）去对内存中的计数器进行累加的操作。&lt;/p>
&lt;p>对于“bulk inserts”，还是使用传统表锁的AUTO-INC Locking方式。&lt;/p>
&lt;p>在这种配置下，如果不考虑回滚操作，对于自增值列的增长还是连续的。并且在这种方式下，statement-based方式的replication还是能很好地工作。需要注意的是，如果已经使用AUTO-INC Locking方式去产生自增长的值，而这时需要再进行“simple inserts”的操作时，还是需要等待AUTO-INC Locking的释放。&lt;/p>
&lt;p>&lt;strong>值为2：&lt;/strong>&lt;/p>
&lt;p>该模式下，对于所有的“INSERT-like”自增长值的产生都是通过互斥量，而不是AUTO-INC Locking的方式。显然这是性能最高的方式。但在并发插入的情况下，自增长的的值可能不是连续的。&lt;/p>
&lt;p>最重要的是，&lt;strong>基于Statement-Base Replication会出现问题。因此，使用该模式任何时候都应该使用row-base replication&lt;/strong>。这样才能保证最大的并发性能及replication主从数据的一致。&lt;/p>
&lt;blockquote>
&lt;p>InnoDB自增长的实现与MyISAM不同，MyISAM存储引擎是表锁设计，自增长不用考虑并发插入问题。因此在master上用InnoDB，在slave上用MyISAM的replication架构下，用户必须考虑这种情况。&lt;/p>
&lt;/blockquote>
&lt;p>InnoDB中，自增长的列必须是索引，同时必须是索引的第一个列，如果不是则会抛出异常，而MyISAM没有这个问题。&lt;/p>
&lt;h3 id="外键和锁">外键和锁&lt;/h3>
&lt;p>InnoDB会自动对其加一个索引，这样可以避免表锁——这比Oracle做得好，Oracle不会自动添加索引，用户必须自己手动添加，这也导致了Oracle可能产生死锁。&lt;/p>
&lt;p>对于外键值的插入或者更新，首先需要查询父表中的记录，即SELECT父表。但是对于父表的SELECT操作，不是使用一致性非锁定读的方式，因为这样会发生数据不一致的问题，因此这时使用的是SELECT...LOCK IN SHARE MODE方式，即主动对父表加一个S锁。如果这时父表上已经加了X锁，子表上的操作会被阻塞。&lt;/p>
&lt;h2 id="锁的算法">锁的算法&lt;/h2>
&lt;h3 id="行锁的3种算法">行锁的3种算法&lt;/h3>
&lt;p>InnoDB存储引擎有3种行锁的算法，分别是：&lt;/p>
&lt;ul>
&lt;li>Record Lock：单个行记录上的锁&lt;/li>
&lt;li>Gap Lock：间隙锁，锁定一个范围，但不包括记录本身&lt;/li>
&lt;li>Next-Key Lock：Gap Lock+Record Lock，锁定一个范围，并且锁定记录本身&lt;/li>
&lt;/ul>
&lt;p>当查询的索引含有唯一属性时，InnoDB会对Next-Key Lock进行优化，将其降级为Record Lock，即仅锁住索引本身，而不是范围。若是辅助索引，其加上的是Next-Key Lock。&lt;/p>
&lt;p>用户可以通过以下两种方式来显式地关闭Gap Lock：&lt;/p>
&lt;ul>
&lt;li>将事务的隔离级别设置为READ COMMITTED&lt;/li>
&lt;li>将参数innodb_locks_unsafe_for_binlog设置为1&lt;/li>
&lt;/ul>
&lt;p>在上述的配置下，除了外键约束和唯一性检查依然需要的Gap Lock，其余情况仅使用Record Lock进行锁定。但是，上述设置破坏了事务的隔离性，并且对于replication，可能会导致主从数据的不一致。此外，从性能上来看，READ COMMITTED也不会优于默认的事务隔离级别READ REPEATEABLE。&lt;/p>
&lt;h3 id="解决phantome-problem">解决Phantome Problem&lt;/h3>
&lt;p>Phantom Problem是指在同一事务下，连续执行两次同样的SQL语句可能导致不同的结果，第二次SQL语句可能会返回之前不存在的行。&lt;/p>
&lt;p>在默认的事务隔离级别下，即REPEATABLE READ下，InnoDB采用Next-Key Locking机制来避免Phantom Problem（幻象问题）。其他DB可能需要在SERIALIZABLE的事务隔离级别下才能解决该问题。&lt;/p>
&lt;h2 id="锁问题">锁问题&lt;/h2>
&lt;h3 id="脏读">脏读&lt;/h3>
&lt;h3 id="不可重复读">不可重复读&lt;/h3>
&lt;h3 id="丢失更新">丢失更新&lt;/h3>
&lt;h2 id="阻塞">阻塞&lt;/h2>
&lt;h2 id="死锁">死锁&lt;/h2>
&lt;h2 id="锁升级">锁升级&lt;/h2>
&lt;p>锁升级（Lock Escalation）是指当前锁的粒度降低。比如，DB把一个表的1000个行锁升级为一个页锁，或者将页锁升级为表锁。这种升级保护了系统资源，防止系统用太多的内存来维护锁，在一定程度上提高了效率。但锁升级带来的一个问题是因为锁粒度的降低而导致并发性能的降低。&lt;/p>
&lt;h1 id="事务">事务&lt;/h1>
&lt;h2 id="事务的实现">事务的实现&lt;/h2>
&lt;h3 id="redo">redo&lt;/h3>
&lt;h3 id="undo">undo&lt;/h3>
&lt;h3 id="purge">purge&lt;/h3>
&lt;p>delete和update操作可能并不直接删除原有的数据。例如delete，将主键列等于xx的记录delete flag设置为1，记录并没有被删除，即记录还存在于B+树中。其次，对辅助索引没有做处理，甚至没有产生undo log。而真正删除这行记录的操作其实被“延时”了，最终在purge操作中完成。&lt;/p>
&lt;p>purge用于最终完成delete和update操作。这样设计是因为InnoDB支持MVCC，所以记录不能在事务提交时立即进行处理。这时其他事务可能正在引用这行，故InnoDB需要保存记录之前的版本。而是否可以删除该跳记录通过purge来进行判断。若该行记录已不被任何其他事务引用，那就可以进行真正的delete操作。&lt;/p>
&lt;p>因为undo log可重用没有顺序，所以使用history list记录了顺序，然后从undo page中找undo log。这样是为了避免大量的随机读取操作，从而提高purge的效率。&lt;/p>
&lt;p>全局动态参数innodb_purge_batch_size用来设置每次purge操作需要清理的undo page数量。&lt;/p>
&lt;h3 id="group-commit">group commit&lt;/h3>
&lt;p>一次fsync可以确保多个事务日志被写入文件。InnoDB事务提交时会进行两个阶段的操作：&lt;/p>
&lt;p>1）修改内存中事务对应的细腻，并且将日志写入重做日志缓冲&lt;/p>
&lt;p>2）调用fsync将确保日志都从重做日志缓冲写入磁盘&lt;/p>
&lt;p>问题：&lt;/p>
&lt;p>InnoDB1.2版本之前，开启二进制后，该功能失效，从而导致性能下降。并且在线环境多使用replication环境，因此二进制日志的选项基本都为开启状态，因此该问题显著。&lt;/p>
&lt;p>原因：&lt;/p>
&lt;p>开启二进制日志后，为了博阿正存储引擎层中的事务和二进制日志的一致性，二者之间使用了两阶段事务，其步骤如下：&lt;/p>
&lt;p>1）当事务提交时InnoDB存储引擎进行prepare操作&lt;/p>
&lt;p>2）MySQL数据库上层写入二进制日志&lt;/p>
&lt;p>3）InnoDB存储引擎层将日志写入重做日志文件&lt;/p>
&lt;p>a）修改内存中事务对应的信息，并且将日志写入重做日志缓冲&lt;/p>
&lt;p>b）调用fsync将确保日志都从重做日志缓冲写入磁盘&lt;/p>
&lt;p>为了保证MySQL数据库上层二进制日志的写入顺序和InnoDB层的事务提交顺序一致，MySQL数据内部使用了prepare_commit_mutex这个锁。但是在启用这个锁之后，步骤3）的步骤a）步不可以在其他事务执行步骤b）时进行，从而导致group commit失效。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;p>Binary Log Group Commit(BLGC)，步骤如下：&lt;/p>
&lt;ul>
&lt;li>Flush阶段，将每个事务的二进制日志写入内存中&lt;/li>
&lt;li>Sync阶段，将内存中的二进制日志刷新到磁盘，若队列中有多个事务，那么仅一次fsync操作就完成了二进制日志的写入，这就是BLGC&lt;/li>
&lt;li>commit阶段，leader根据顺序调用存储引擎层事务的提交，InnoDB存储引擎本就支持group commit，因此修复了原先由于锁prepare_commit_mutex导致group commit失效的问题&lt;/li>
&lt;/ul>
&lt;h2 id="事务控制语句">事务控制语句&lt;/h2>
&lt;h2 id="隐式提交的sql语句">隐式提交的SQL语句&lt;/h2>
&lt;p>以下SQL语句会产生一个隐式的提交操作，即执行完这些语句后会有一个隐式的COMMIT操作：&lt;/p>
&lt;ul>
&lt;li>DDL语句&lt;/li>
&lt;li>用来隐式地修改MySQL架构的操作：CREATE USER、DROP USER、GRANT、RENAME USER、REVOKE、SET PASSWORD&lt;/li>
&lt;li>管理语句：ANALYZE TABLE、CACHE INDEX、CHECK TABLE、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE&lt;/li>
&lt;/ul>
&lt;h2 id="对于事务操作的统计">对于事务操作的统计&lt;/h2>
&lt;p>每秒事务处理的能力（Transaction Per Second，TPS），计算TPS的方法是(com_commit+com_rollback)/time，但是利用这个方法计算的前提是：所有事务必须都是显式提交，如果存在隐式提价和回滚（默认autocommit=1），不会计算到com_commit和com_rollback变量中。&lt;/p>
&lt;style>
.td-content .highlight {
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.code-collapse1 {
overflow-y: auto;
max-height: 500px;
overflow-x: auto;
max-width: 100%;
}
&lt;/style>
&lt;div class="code-collapse1">
&lt;div class="highlight">&lt;div style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">SHOW&lt;/span> &lt;span style="color:#a90d91">GLOBAL&lt;/span> &lt;span style="color:#000">STATUS&lt;/span> &lt;span style="color:#a90d91">LIKE&lt;/span> &lt;span style="color:#c41a16">&amp;#39;com_commit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="分布式事务">分布式事务&lt;/h2>
&lt;h3 id="mysql数据库分布式事务">MySQL数据库分布式事务&lt;/h3>
&lt;p>InnoDB提供了对XA事务的支持，并通过XA事务支持分布式事务的实现。&lt;/p>
&lt;blockquote>
&lt;p>在使用分布式事务时，InnoDB存储引擎的事务隔离级别必须设置为SERIALIZABLE&lt;/p>
&lt;/blockquote>
&lt;p>XA事务允许不同的数据库之间的分布式事务&lt;/p>
&lt;p>XA事务由一个或多个资源管理器（Resource Managers）、一个事务管理器（Transaction Manager）以及一个应用程序（Application Program）组成。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>资源管理器：提供访问事务资源的方法。通常一个数据库就是一个资源管理器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务管理器：协调参与全局事务中的各个事务。需要和参与全局事务的所有资源管理器进行通信&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应用程序：定义事务的边界，指定全局事务中的操作
分布式事务使用两段式提交（two-phase commit）的方式：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有参与全局事务的节点都开始准备（PREPARE）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务管理器告诉资源管理器执行ROLLBACK还是COMMIT&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="不好的事务习惯">不好的事务习惯&lt;/h2>
&lt;h3 id="在循环中提交">在循环中提交&lt;/h3>
&lt;h3 id="使用自动提交">使用自动提交&lt;/h3>
&lt;h3 id="使用自动回滚">使用自动回滚&lt;/h3>
&lt;h2 id="长事务">长事务&lt;/h2>
&lt;p>长事务（Long-Lived Transaction）。&lt;/p>
&lt;p>可以分解成多个小事务&lt;/p></description></item></channel></rss>